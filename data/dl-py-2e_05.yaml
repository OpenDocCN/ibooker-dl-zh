- en: 5 Fundamentals of machine learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习的基础知识
- en: This chapter covers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖
- en: Understanding the tension between generalization and optimization, the fundamental
    issue in machine learning
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解泛化和优化之间的紧张关系，这是机器学习中的基本问题
- en: Evaluation methods for machine learning models
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习模型的评估方法
- en: Best practices to improve model fitting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进模型拟合的最佳实践
- en: Best practices to achieve better generalization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现更好泛化的最佳实践
- en: 'After the three practical examples in chapter 4, you should be starting to
    feel familiar with how to approach classification and regression problems using
    neural networks, and you’ve witnessed the central problem of machine learning:
    overfitting. This chapter will formalize some of your new intuition about machine
    learning into a solid conceptual framework, highlighting the importance of accurate
    model evaluation and the balance between training and generalization.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 章中的三个实际例子之后，你应该开始熟悉如何使用神经网络解决分类和回归问题，并且见证了机器学习的核心问题：过拟合。本章将把你对机器学习的一些新直觉形式化为一个坚实的概念框架，强调准确模型评估的重要性以及训练和泛化之间的平衡。
- en: '5.1 Generalization: The goal of machine learning'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1 泛化：机器学习的目标
- en: 'In the three examples presented in chapter 4—predicting movie reviews, topic
    classification, and house-price regression—we split the data into a training set,
    a validation set, and a test set. The reason not to evaluate the models on the
    same data they were trained on quickly became evident: after just a few epochs,
    performance on never-before-seen data started diverging from performance on the
    training data, which always improves as training progresses. The models started
    to *overfit*. Overfitting happens in every machine learning problem.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 章中提出的三个例子——预测电影评论、主题分类和房价回归——我们将数据分为训练集、验证集和测试集。很快就明显看到了不在训练数据上评估模型的原因：在几个周期后，从未见过的数据的性能开始与训练数据的性能分歧，而训练数据的性能始终随着训练的进行而改善。模型开始*过拟合*。过拟合在每个机器学习问题中都会发生。
- en: The fundamental issue in machine learning is the tension between optimization
    and generalization. *Optimization* refers to the process of adjusting a model
    to get the best performance possible on the training data (the *learning* in *machine
    learning*), whereas *generalization* refers to how well the trained model performs
    on data it has never seen before. The goal of the game is to get good generalization,
    of course, but you don’t control generalization; you can only fit the model to
    its training data. If you do that *too well*, overfitting kicks in and generalization
    suffers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习中的基本问题是优化和泛化之间的紧张��系。*优化*指的是调整模型以在训练数据上获得最佳性能的过程（*机器学习*中的*学习*），而*泛化*指的是训练好的模型在从未见过的数据上的表现。当然，游戏的目标是获得良好的泛化，但你无法控制泛化；你只能将模型拟合到其训练数据。如果你做得*太好*，过拟合就会发生，泛化就会受到影响。
- en: But what causes overfitting? How can we achieve good generalization?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是是什么导致了过拟合？我们如何实现良好的泛化？
- en: 5.1.1 Underfitting and overfitting
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1.1 欠拟合和过拟合
- en: For the models you saw in the previous chapter, performance on the held-out
    validation data started improving as training went on and then inevitably peaked
    after a while. This pattern (illustrated in figure 5.1) is universal. You’ll see
    it with any model type and any dataset.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你在上一章中看到的模型，在保留验证数据上的性能随着训练的进行而改善，然后在一段时间后必然达到顶峰。这种模式（如图 5.1 所示）是普遍存在的。你会在任何模型类型和任何数据集中看到这种情况。
- en: '![](../Images/05-01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-01.png)'
- en: Figure 5.1 Canonical overfitting behavior
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 典型的过拟合行为
- en: 'At the beginning of training, optimization and generalization are correlated:
    the lower the loss on training data, the lower the loss on test data. While this
    is happening, your model is said to be *underfit*: there is still progress to
    be made; the network hasn’t yet modeled all relevant patterns in the training
    data. But after a certain number of iterations on the training data, generalization
    stops improving, validation metrics stall and then begin to degrade: the model
    is starting to overfit. That is, it’s beginning to learn patterns that are specific
    to the training data but that are misleading or irrelevant when it comes to new
    data.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练开始时，优化和泛化是相关的：在训练数据上的损失越低，测试数据上的损失也越低。当这种情况发生时，你的模型被称为*欠拟合*：仍然有进步的空间；网络尚未对训练数据中的所有相关模式进行建模。但在对训练数据进行一定数量的迭代后，泛化停止改善，验证指标停滞然后开始恶化：模型开始过拟合。也就是说，它开始学习训练数据特定的模式，但这些模式在新数据方面是误导性的或无关的。
- en: Overfitting is particularly likely to occur when your data is noisy, if it involves
    uncertainty, or if it includes rare features. Let’s look at concrete examples.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 过拟合在数据存在噪声、不确定性或包含稀有特征时特别容易发生。让我们看看具体的例子。
- en: Noisy training data
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 嘈杂的训练数据
- en: In real-world datasets, it’s fairly common for some inputs to be invalid. Perhaps
    a MNIST digit could be an all-black image, for instance, or something like figure
    5.2.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的数据集中，一些输入无效是相当常见的。例如，一个 MNIST 数字可能是一张全黑的图片，或者像图 5.2 那样的东西。
- en: '![](../Images/05-02.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-02.png)'
- en: Figure 5.2 Some pretty weird MNIST training samples
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 一些相当奇怪的 MNIST 训练样本
- en: What are these? I don’t know either. But they’re all part of the MNIST training
    set. What’s even worse, however, is having perfectly valid inputs that end up
    mislabeled, like those in figure 5.3.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是什么？我也不知道。但它们都是 MNIST 训练集的一部分。然而，更糟糕的是，有些完全有效的输入最终被错误标记，就像图 5.3 中的那些一样。
- en: '![](../Images/05-03.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-03.png)'
- en: Figure 5.3 Mislabeled MNIST training samples
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 错标的 MNIST 训练样本
- en: If a model goes out of its way to incorporate such outliers, its generalization
    performance will degrade, as shown in figure 5.4\. For instance, a 4 that looks
    very close to the mislabeled 4 in figure 5.3 may end up getting classified as
    a 9\.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个模型竭尽全力地纳入这些异常值，其泛化性能将会下降，就像图 5.4 中所示的那样。例如，一个看起来非常接近图 5.3 中错误标记的 4 的 4 可能最终被分类为
    9。
- en: '![](../Images/05-04.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-04.png)'
- en: 'Figure 5.4 Dealing with outliers: robust fit vs. overfitting'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 处理异常值：鲁棒拟合 vs. 过拟合
- en: Ambiguous features
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊特征
- en: Not all data noise comes from inaccuracies—even perfectly clean and neatly labeled
    data can be noisy when the problem involves uncertainty and ambiguity. In classification
    tasks, it is often the case that some regions of the input feature space are associated
    with multiple classes at the same time. Let’s say you’re developing a model that
    takes an image of a banana and predicts whether the banana is unripe, ripe, or
    rotten. These categories have no objective boundaries, so the same picture might
    be classified as either unripe or ripe by different human labelers. Similarly,
    many problems involve randomness. You could use atmospheric pressure data to predict
    whether it will rain tomorrow, but the exact same measurements may be followed
    sometimes by rain and sometimes by a clear sky, with some probability.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有数据噪声都来自不准确性，即使是完全干净和整洁标记的数据，在涉及不确定性和模糊性的问题时也可能存在噪声。在分类任务中，通常情况下，输入特征空间的某些区域同时与多个类相关联。假设你正在开发一个模型，该模型接收香蕉的图像并预测香蕉是未熟、成熟还是腐烂。这些类别没有客观的界限，因此同一张图片可能会被不同的人类标记者分类为未熟或成熟。同样，许多问题涉及随机性。你可以使用大气压力数据来预测明天是否会下雨，但完全相同的测量有时可能会导致下雨，有时可能会导致晴天，具有一定的概率。
- en: A model could overfit to such probabilistic data by being too confident about
    ambiguous regions of the feature space, like in figure 5.5\. A more robust fit
    would ignore individual data points and look at the bigger picture.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模型可能会对这种概率性数据过拟合，对特征空间中模糊区域过于自信，就像图 5.5 中那样。更鲁棒的拟合会忽略个别数据点，看到更大的图景。
- en: '![](../Images/05-05.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-05.png)'
- en: Figure 5.5 Robust fit vs. overfitting giving an ambiguous area of the feature
    space
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 鲁棒拟合 vs. 过拟合给出特征空间中的模糊区域
- en: Rare features and spurious correlations
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 稀有特征和虚假相关性
- en: 'If you’ve only ever seen two orange tabby cats in your life, and they both
    happened to be terribly antisocial, you might infer that orange tabby cats are
    generally likely to be antisocial. That’s overfitting: if you had been exposed
    to a wider variety of cats, including more orange ones, you’d have learned that
    cat color is not well correlated with character.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一生中只见过两只橘色虎斑猫，而且它们都恰好非常不合群，你可能会推断橘色虎斑猫通常可能是不合群的。这就是过拟合：如果你接触到更多种类的猫，包括更多橘色的猫，你会发现猫的颜色与性格并没有很好的相关性。
- en: Likewise, machine learning models trained on datasets that include rare feature
    values are highly susceptible to overfitting. In a sentiment classification task,
    if the word “cherimoya” (a fruit native to the Andes) only appears in one text
    in the training data, and this text happens to be negative in sentiment, a poorly
    regularized model might put a very high weight on this word and always classify
    new texts that mention cherimoyas as negative, whereas, objectively, there’s nothing
    negative about the cherimoya.[¹](../Text/05.htm#pgfId-1012190)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，训练在包含稀有特征值的数据集上的机器学习模型极易过拟合。在情感分类任务中，如果训练数据中的单词“cherimoya”（一种原产于安第斯山脉的水果）只出现在一篇文本中，并且这篇文本恰好是负面情感的，一个调节不好的模型可能会对这个词赋予很高的权重，并且总是将提到cherimoyas的新文本分类为负面，然而，客观上，cherimoya并没有什么负面的东西。
- en: Importantly, a feature value doesn’t need to occur only a couple of times to
    lead to spurious correlations. Consider a word that occurs in 100 samples in your
    training data and that’s associated with a positive sentiment 54% of the time
    and with a negative sentiment 46% of the time. That difference may well be a complete
    statistical fluke, yet your model is likely to learn to leverage that feature
    for its classification task. This is one of the most common sources of overfitting.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，一个特征值不需要只出现几次就会导致虚假相关性。考虑一个在你的训练数据中出现 100 次的单词，它与积极情感相关的概率为 54%，与消极情感相关的概率为
    46%。这种差异很可能是一个完全的统计偶然，然而你的模型很可能会学会利用这个特征来进行分类任务。这是过拟合的最常见来源之一。
- en: 'Here’s a striking example. Take MNIST. Create a new training set by concatenating
    784 white noise dimensions to the existing 784 dimensions of the data, so half
    of the data is now noise. For comparison, also create an equivalent dataset by
    concatenating 784 all-zeros dimensions. Our concatenation of meaningless features
    does not at all affect the information content of the data: we’re only adding
    something. Human classification accuracy wouldn’t be affected by these transformations
    at all.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个引人注目的例子。以 MNIST 为例。通过将 784 个白噪声维度连接到现有数据的 784 个维度上，创建一个新的训练集，因此一半的数据现在是噪声。为了比较，还创建一个通过连接
    784 个全零维度而得到的等效数据集。我们连接的无意义特征完全不影响数据的信息内容：我们只是在添加一些东西。人类分类准确度不会受到这些转换的影响。
- en: Listing 5.1 Adding white noise channels or all-zeros channels to MNIST
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.1 向 MNIST 添加白噪声通道或全零通道
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, let’s train the model from chapter 2 on both of these training sets.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在这两个训练集上训练第 2 章中的模型。
- en: Listing 5.2 Training the same model on MNIST data with noise channels or all-zero
    channels
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.2 在带有噪声通道或全零通道的 MNIST 数据上训练相同的模型
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s compare how the validation accuracy of each model evolves over time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较每个模型的验证准确性随时间的演变。
- en: Listing 5.3 Plotting a validation accuracy comparison
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.3 绘制验证准确性比较
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Despite the data holding the same information in both cases, the validation
    accuracy of the model trained with noise channels ends up about one percentage
    point lower (see figure 5.6)—purely through the influence of spurious correlations.
    The more noise channels you add, the further accuracy will degrade.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管数据在两种情况下都包含相同的信息，但通过虚假相关性的影响，使用噪声通道训练的模型的验证准确性最终会降低约一个百分点（参见图 5.6）——纯粹是通过虚假相关性的影响。你添加的噪声通道越多，准确性就会进一步下降。
- en: '![](../Images/05-06.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-06.png)'
- en: Figure 5.6 Effect of noise channels on validation accuracy
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 噪声通道对验证准确性的影响
- en: Noisy features inevitably lead to overfitting. As such, in cases where you aren’t
    sure whether the features you have are informative or distracting, it’s common
    to do *feature selection* before training. Restricting the IMDB data to the top
    10,000 most common words was a crude form of feature selection, for instance.
    The typical way to do feature selection is to compute some usefulness score for
    each feature available—a measure of how informative the feature is with respect
    to the task, such as the mutual information between the feature and the labels—and
    only keep features that are above some threshold. Doing this would filter out
    the white noise channels in the preceding example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 嘈杂的特征不可避免地导致过拟合。因此，在你不确定所拥有的特征是信息性的还是干扰性的情况下，通常在训练之前进行*特征选择*是很常见的。例如，将IMDB数据限制为最常见的前10000个单词就是一种粗糙的特征选择。进行特征选择的典型方法是为每个可用特征计算一些有用性评分——衡量特征相对于任务的信息性的度量，比如特征与标签之间的互信息——并且只保留高于某个阈值的特征。这样做将过滤掉前面示例中的白噪声通道。
- en: 5.1.2 The nature of generalization in deep learning
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1.2 深度学习中泛化性质的本质
- en: A remarkable fact about deep learning models is that they can be trained to
    fit anything, as long as they have enough representational power.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习模型的一个显著特点是，只要具有足够的表征能力，它们就可以被训练来拟合任何东西。
- en: Don’t believe me? Try shuffling the MNIST labels and train a model on that.
    Even though there is no relationship whatsoever between the inputs and the shuffled
    labels, the training loss goes down just fine, even with a relatively small model.
    Naturally, the validation loss does not improve at all over time, since there
    is no possibility of generalization in this setting.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不相信？试着洗牌MNIST标签并在此基础上训练一个模型。尽管输入和洗牌标签之间没有任何关系，训练损失仍然可以很好地下降，即使是使用相对较小的模型。当然，由于在这种情况下没有泛化的可能性，验证损失不会随时间改善。
- en: Listing 5.4 Fitting an MNIST model with randomly shuffled labels
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5.4 使用随机洗牌标签拟合MNIST模型
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In fact, you don’t even need to do this with MNIST data—you could just generate
    white noise inputs and random labels. You could fit a model on that, too, as long
    as it has enough parameters. It would just end up memorizing specific inputs,
    much like a Python dictionary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你甚至不需要用MNIST数据来做这个实验——你可以只生成白噪声输入和随机标签。只要模型有足够的参数，你也可以在这上面拟合一个模型。它最终只会记住特定的输入，就像一个Python字典一样。
- en: If this is the case, then how come deep learning models generalize at all? Shouldn’t
    they just learn an ad hoc mapping between training inputs and targets, like a
    fancy `dict`? What expectation can we have that this mapping will work for new
    inputs?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样的话，那么深度学习模型到底是如何泛化的呢？它们难道不应该只是学习训练输入和目标之间的临时映射，就像一个高级`dict`一样吗？我们有什么期望这种映射会适用于新的输入呢？
- en: As it turns out, the nature of generalization in deep learning has rather little
    to do with deep learning models themselves, and much to do with the structure
    of information in the real world. Let’s take a look at what’s really going on
    here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，深度学习中的泛化性质与深度学习模型本身关系不大，而与现实世界中信息的结构有很大关系。让我们看看这里到底发生了什么。
- en: The manifold hypothesis
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 流形假设
- en: 'The input to an MNIST classifier (before preprocessing) is a 28 × 28 array
    of integers between 0 and 255\. The total number of possible input values is thus
    256 to the power of 784—much greater than the number of atoms in the universe.
    However, very few of these inputs would look like valid MNIST samples: actual
    handwritten digits only occupy a tiny *subspace* of the parent space of all possible
    28 × 28 `uint8` arrays. What’s more, this subspace isn’t just a set of points
    sprinkled at random in the parent space: it is highly structured.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: MNIST分类器的输入（预处理之前）是一个28×28的整数数组，取值范围在0到255之间。因此，可能的输入值总数是256的784次方——远远大于宇宙中的原子数量。然而，这些输入中很少有看起来像有效MNIST样本的：实际手写数字只占据了所有可能的28×28
    `uint8`数组父空间中的一个微小*子空间*。而且，这个子空间不仅仅是在父空间中随机分布的一组点：它具有高度结构化。
- en: 'First, the subspace of valid handwritten digits is *continuous*: if you take
    a sample and modify it a little, it will still be recognizable as the same handwritten
    digit. Further, all samples in the valid subspace are *connected* by smooth paths
    that run through the subspace. This means that if you take two random MNIST digits
    A and B, there exists a sequence of “intermediate” images that morph A into B,
    such that two consecutive digits are very close to each other (see figure 5.7).
    Perhaps there will be a few ambiguous shapes close to the boundary between two
    classes, but even these shapes would still look very digit-like.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有效手写数字的子空间是*连续*的：如果你拿一个样本并稍微修改它，它仍然可以被识别为相同的手写数字。此外，所有有效子空间中的样本都通过平滑路径*连接*在一起。这意味着如果你拿两个随机的MNIST数字A和B，存在一个“中间”图像序列，将A变形为B，使得两个连续数字非常接近彼此（见图5.7）。也许在两个类之间边界附近会有一些模糊的形状，但即使这些形状看起来仍然非常像数字。
- en: '![](../Images/05-07.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-07.png)'
- en: Figure 5.7 Different MNIST digits gradually morphing into one another, showing
    that the space of handwritten digits forms a “manifold.” This image was generated
    using code from chapter 12.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 不同的MNIST数字逐渐变形成彼此，显示手写数字空间形成了一个“流形”。此图像是使用第12章的��码生成的。
- en: In technical terms, you would say that handwritten digits form a *manifold*
    within the space of possible 28 × 28 `uint8` arrays. That’s a big word, but the
    concept is pretty intuitive. A “manifold” is a lower-dimensional subspace of some
    parent space that is locally similar to a linear (Euclidian) space. For instance,
    a smooth curve in the plane is a 1D manifold within a 2D space, because for every
    point of the curve, you can draw a tangent (the curve can be approximated by a
    line at every point). A smooth surface within a 3D space is a 2D manifold. And
    so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来说，你会说手写数字形成了一个*流形*，位于可能的28×28 `uint8`数组空间中。这是一个大词，但概念相当直观。一个“流形”是某个父空间中的低维子空间，局部类似于线性（欧几里得）空间。例如，在平面上的平滑曲线是2D空间中的1D流形，因为对于曲线的每个点，你都可以画出一个切线（曲线可以在每个点处用一条直线来近似）。在3D空间中的平滑曲面是2D流形。依此类推。
- en: More generally, the *manifold hypothesis* posits that all natural data lies
    on a low-dimensional manifold within the high-dimensional space where it is encoded.
    That’s a pretty strong statement about the structure of information in the universe.
    As far as we know, it’s accurate, and it’s the reason why deep learning works.
    It’s true for MNIST digits, but also for human faces, tree morphology, the sounds
    of the human voice, and even natural language.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，*流形假设*认为所有自然数据都位于编码它的高维空间中的低维流形上。这是关于宇宙中信息结构的一个非常强烈的陈述。据我们所知，这是准确的，也是深度学习有效的原因。这对于MNIST数字是正确的，但也适用于人脸、树形态、人声和甚至自然语言。
- en: The manifold hypothesis implies that
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 流形假设意味着
- en: Machine learning models only have to fit relatively simple, low-dimensional,
    highly structured subspaces within their potential input space (latent manifolds).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习模型只需要适应潜在输入空间（潜在流形）中相对简单、低维、高度结构化的子空间。
- en: Within one of these manifolds, it’s always possible to *interpolate* between
    two inputs, that is to say, morph one into another via a continuous path along
    which all points fall on the manifold.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这些流形中的一个中，总是可以在两个输入之间*插值*，也就是说，通过一个连续路径将一个变形为另一个，路径上的所有点都落在流形上。
- en: The ability to interpolate between samples is the key to understanding generalization
    in deep learning.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在深度学习中，插值样本之间的能力是理解泛化的关键。
- en: Interpolation as a source of generalization
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 插值作为泛化的来源
- en: If you work with data points that can be interpolated, you can start making
    sense of points you’ve never seen before by relating them to other points that
    lie close on the manifold. In other words, you can make sense of the *totality*
    of the space using only a *sample* of the space. You can use interpolation to
    fill in the blanks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理可以插值的数据点，你可以通过将它们与流形上靠近的其他点联系起来，开始理解以前从未见过的点。换句话说，你可以通过插值来填补空白，从而理解空间的*整体*。
- en: Note that interpolation on the latent manifold is different from linear interpolation
    in the parent space, as illustrated in figure 5.8\. For instance, the average
    of pixels between two MNIST digits is usually not a valid digit.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，潜在流形上的插值与父空间中的线性插值是不同的，如图5.8所示。例如，在两个MNIST数字之间的像素的平均值通常不是一个有效的数字。
- en: '![](../Images/05-08.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-08.png)'
- en: Figure 5.8 Difference between linear interpolation and interpolation on the
    latent manifold. Every point on the latent manifold of digits is a valid digit,
    but the average of two digits usually isn’t.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 线性插值和潜在流形上的插值之间的差异。数字的潜在流形上的每个点都是一个有效的数字，但两个数字的平均值通常不是。
- en: 'Crucially, while deep learning achieves generalization via interpolation on
    a learned approximation of the data manifold, it would be a mistake to assume
    that interpolation is *all* there is to generalization. It’s the tip of the iceberg.
    Interpolation can only help you make sense of things that are very close to what
    you’ve seen before: it enables *local generalization*. But remarkably, humans
    deal with extreme novelty all the time, and they do just fine. You don’t need
    to be trained in advance on countless examples of every situation you’ll ever
    have to encounter. Every single one of your days is different from any day you’ve
    experienced before, and different from any day experienced by anyone since the
    dawn of humanity. You can switch between spending a week in NYC, a week in Shanghai,
    and a week in Bangalore without requiring thousands of lifetimes of learning and
    rehearsal for each city.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 至关重要的是，虽然深度学习通过在学习的数据流形上进行插值来实现泛化，但假设插值就是泛化的全部是错误的。这只是冰山一角。插值只能帮助你理解与之前看到的非常接近的事物：它实现了*局部泛化*。但值得注意的是，人类总是处理极端的新颖性，并且做得很好。你不需要事先在无数例子上接受训练，以便应对你将要遇到的每种情况。你每一天都与以往任何一天都不同，也与自人类诞生以来的任何一天都不同。你可以在纽约待一周，上海待一周，班加罗尔待一周，而无需为每个城市进行数千次的学习和排练。
- en: 'Humans are capable of *extreme generalization*, which is enabled by cognitive
    mechanisms other than interpolation: abstraction, symbolic models of the world,
    reasoning, logic, common sense, innate priors about the world—what we generally
    call *reason*, as opposed to intuition and pattern recognition. The latter are
    largely interpolative in nature, but the former isn’t. Both are essential to intelligence.
    We’ll talk more about this in chapter 14\.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 人类能够进行*极端泛化*，这是由于插值之外的认知机制所实现的：抽象、世界的符号模型、推理、逻辑、常识、对世界的内在先验——我们通常称之为*理性*，与���觉和模式识别相对。后者在很大程度上是插值性质的，但前者不是。这两者对智能都是至关重要的。我们将在第14章中更多地讨论这个问题。
- en: Why deep learning works
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么深度学习有效
- en: Remember the crumpled paper ball metaphor from chapter 2? A sheet of paper represents
    a 2D manifold within 3D space (see figure 5.9). A deep learning model is a tool
    for uncrumpling paper balls, that is, for disentangling latent manifolds.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得第2章中的揉皱纸球的比喻吗？一张纸代表了3D空间中的2D流形（见图5.9）。深度学习模型是一种展开纸球的工具，也就是说，是为了解开潜在流形。
- en: '![](../Images/05-09.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-09.png)'
- en: Figure 5.9 Uncrumpling a complicated manifold of data
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 展开复杂的数据流形
- en: A deep learning model is basically a very high-dimensional curve—a curve that
    is smooth and continuous (with additional constraints on its structure, originating
    from model architecture priors), since it needs to be differentiable. And that
    curve is fitted to data points via gradient descent, smoothly and incrementally.
    By its very nature, deep learning is about taking a big, complex curve—a manifold—and
    incrementally adjusting its parameters until it fits some training data points.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个深度学习模型基本上是一个非常高维的曲线—一条平滑连续的曲线（受模型架构先验的额外约束），因为它需要是可微的。这条曲线通过梯度下降逐渐和增量地拟合到数据点。深度学习的本质是关于取一个大的、复杂的曲线—一个流形—并逐渐调整其参数，直到它拟合一些训练数据点。
- en: The curve involves enough parameters that it could fit anything—indeed, if you
    let your model train for long enough, it will effectively end up purely memorizing
    its training data and won’t generalize at all. However, the data you’re fitting
    to isn’t made of isolated points sparsely distributed across the underlying space.
    Your data forms a highly structured, low-dimensional manifold within the input
    space—that’s the manifold hypothesis. And because fitting your model curve to
    this data happens gradually and smoothly over time as gradient descent progresses,
    there will be an intermediate point during training at which the model roughly
    approximates the natural manifold of the data, as you can see in figure 5.10.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线涉及足够多的参数，可以拟合任何东西——实际上，如果你让你的模型训练足够长的时间，它最终将纯粹地记忆其训练数据，根本无法泛化。然而，你要拟合的数据并不是由稀疏分布在基础空间中的孤立点组成。你的数据在输入空间内形成了一个高度结构化的低维流形—这就是流形假设。由于随着梯度下降的进行，将模型曲线拟合到这些数据中是逐渐平稳进行的，因此在训练过程中会有一个中间点，此时模型大致近似于数据的自然流形，正如你在图5.10中所看到的。
- en: '![](../Images/05-10.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-10.png)'
- en: Figure 5.10 Going from a random model to an overfit model, and achieving a robust
    fit as an intermediate state
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 从随机模型到过拟合模型，以及作为中间状态实现稳健拟合
- en: Moving along the curve learned by the model at that point will come close to
    moving along the actual latent manifold of the data—as such, the model will be
    capable of making sense of never-before-seen inputs via interpolation between
    training inputs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着模型在那一点学习的曲线移动将接近沿着数据的实际潜在流形移动—因此，模型将能够通过在训练输入之间进行插值来理解以前从未见过的输入。
- en: 'Besides the trivial fact that they have sufficient representational power,
    there are a few properties of deep learning models that make them particularly
    well-suited to learning latent manifolds:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们具有足够的表征能力这一显而易见的事实外，深度学习模型具有一些特性使它们特别适合学习潜在流形：
- en: Deep learning models implement a smooth, continuous mapping from their inputs
    to their outputs. It has to be smooth and continuous because it must be differentiable,
    by necessity (you couldn’t do gradient descent otherwise). This smoothness helps
    approximate latent manifolds, which follow the same properties.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习模型实现了从输入到输出的平滑连续映射。它必须是平滑和连续的，因为它必须是可微的，这是必然的（否则你无法进行梯度下降）。这种平滑性有助于近似潜在流形，这些流形具有相同的特性。
- en: Deep learning models tend to be structured in a way that mirrors the “shape”
    of the information in their training data (via architecture priors). This is particularly
    the case for image-processing models (discussed in chapters 8 and 9) and sequence-processing
    models (chapter 10). More generally, deep neural networks structure their learned
    representations in a hierarchical and modular way, which echoes the way natural
    data is organized.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习模型往往以与其训练数据中信息“形状”相似的方式进行结构化（通过架构先验）。这特别适用于图像处理模型（在第8章和第9章讨论）和序列处理模型（第10章）。更一般地说，深度神经网络以分层和模块化的方式构建其学习表示，这与自然数据组织方式相呼应。
- en: Training data is paramount
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据至关重要
- en: While deep learning is indeed well suited to manifold learning, the power to
    generalize is more a consequence of the natural structure of your data than a
    consequence of any property of your model. You’ll only be able to generalize if
    your data forms a manifold where points can be interpolated. The more informative
    and the less noisy your features are, the better you will be able to generalize,
    since your input space will be simpler and better structured. Data curation and
    feature engineering are essential to generalization.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然���度学习确实非常适合流形学习，但泛化的能力更多地是由数据的自然结构而不是模型的任何属性决定的。只有当你的数据形成一个可以进行插值的流形时，你才能进行泛化。你的特征越具信息性，噪声越少，你就越能进行泛化，因为你的输入空间将更简单、更有结构。数据筛选和特征工程对泛化至关重要。
- en: Further, because deep learning is curve fitting, for a model to perform well
    *it needs to be trained on a dense sampling of its input space*. A “dense sampling”
    in this context means that the training data should densely cover the entirety
    of the input data manifold (see figure 5.11). This is especially true near decision
    boundaries. With a sufficiently dense sampling, it becomes possible to make sense
    of new inputs by interpolating between past training inputs without having to
    use common sense, abstract reasoning, or external knowledge about the world—all
    things that machine learning models have no access to.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于深度学习是曲线拟合，为了使模型表现良好，*它需要在其输入空间上进行密集采样训练*。在这种情况下，“密集采样”意味着训练数据应该密集覆盖整个输入数据流形（参见图5.11）。这在决策边界附近尤为重要。通过足够密集的采样，可以通过在过去的训练输入之间进行插值来理解新的输入，而无需使用常识、抽象推理或关于世界的外部知识—这些是机器学习模型无法访问的东西。
- en: '![](../Images/05-11.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-11.png)'
- en: Figure 5.11 A dense sampling of the input space is necessary in order to learn
    a model capable of accurate generalization.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 为了学习一个能够准确泛化的模型，需要对输入空间进行密集采样。
- en: 'As such, you should always keep in mind that the best way to improve a deep
    learning model is to train it on more data or better data (of course, adding overly
    noisy or inaccurate data will harm generalization). A denser coverage of the input
    data manifold will yield a model that generalizes better. You should never expect
    a deep learning model to perform anything more than crude interpolation between
    its training samples, and thus you should do everything you can to make interpolation
    as easy as possible. The only thing you will find in a deep learning model is
    what you put into it: the priors encoded in its architecture and the data it was
    trained on.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您应始终牢记改进深度学习模型的最佳方法是在更多或更好的数据上训练它（当然，添加过于嘈杂或不准确的数据将损害泛化能力）。输入数据流形的更密集覆盖将产生更好泛化的模型。您永远不应期望深度学习模型执行比其训练样本之间的粗略插值更多的操作，因此您应尽一切可能使插值变得更容易。您在深度学习模型中找到的唯一东西就是您放入其中的东西：编码在其架构中的先验和训练数据。
- en: When getting more data isn’t possible, the next best solution is to modulate
    the quantity of information that your model is allowed to store, or to add constraints
    on the smoothness of the model curve. If a network can only afford to memorize
    a small number of patterns, or very regular patterns, the optimization process
    will force it to focus on the most prominent patterns, which have a better chance
    of generalizing well. The process of fighting overfitting this way is called *regularization*.
    We’ll review regularization techniques in depth in section 5.4.4.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当无法获取更多数据时，下一个最佳解决方案是调节模型允许存储的信息量，或者对模型曲线的平滑性添加约束。如果一个网络只能记住少量模式，或者非常规律的模式，优化过程将迫使其专注于最突出的模式，这些模式更有可能泛化良好。这种通过这种方式对抗过拟合的过程称为*正则化*。我们将在第5.4.4节深入讨论正则化技术。
- en: 'Before you can start tweaking your model to help it generalize better, you’ll
    need a way to assess how your model is currently doing. In the following section,
    you’ll learn how you can monitor generalization during model development: model
    evaluation.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始调整模型以帮助其更好地泛化之前，您需要一种评估当前模型表现的方法。在接下来的部分中，您将学习如何在模型开发过程中监控泛化：模型评估。
- en: 5.2 Evaluating machine learning models
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2 评估机器学习模型
- en: You can only control what you can observe. Since your goal is to develop models
    that can successfully generalize to new data, it’s essential to be able to reliably
    measure the generalization power of your model. In this section, I’ll formally
    introduce the different ways you can evaluate machine learning models. You’ve
    already seen most of them in action in the previous chapter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您只能控制您能观察到的内容。由于您的目标是开发能够成功泛化到新数据的模型，因此能够可靠地衡量模型泛化能力至关重要。在本节中，我将正式介绍您可以评估机器学习模型的不同方法。您在上一章中已经看到了其中大部分的应用。
- en: 5.2.1 Training, validation, and test sets
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2.1 训练、验证和测试集
- en: 'Evaluating a model always boils down to splitting the available data into three
    sets: training, validation, and test. You train on the training data and evaluate
    your model on the validation data. Once your model is ready for prime time, you
    test it one final time on the test data, which is meant to be as similar as possible
    to production data. Then you can deploy the model in production.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 评估模型总是归结为将可用数据分为三组：训练、验证和测试。您在训练数据上训练模型，并在验证数据上评估模型。一旦您的模型准备投入实际使用，您将最后一次在测试数据上测试它，这些数据应尽可能与生产数据相似。然后您可以将模型部署到生产环境中。
- en: 'You may ask, why not have two sets: a training set and a test set? You’d train
    on the training data and evaluate on the test data. Much simpler!'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问，为什么��只有两组：一个训练集和一个测试集？您可以在训练数据上训练，并在测试数据上评估。简单得多！
- en: 'The reason is that developing a model always involves tuning its configuration:
    for example, choosing the number of layers or the size of the layers (called the
    *hyperparameters* of the model, to distinguish them from the *parameters*, which
    are the network’s weights). You do this tuning by using as a feedback signal the
    performance of the model on the validation data. In essence, this tuning is a
    form of *learning*: a search for a good configuration in some parameter space.
    As a result, tuning the configuration of the model based on its performance on
    the validation set can quickly result in *overfitting to the validation set*,
    even though your model is never directly trained on it.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 原因在于，开发模型总是涉及调整其配置：例如，选择层数或层的大小（称为模型的*超参数*，以区别于*参数*，即网络的权重）。您通过使用模型在验证数据上的性能作为反馈信号来进行这种调整。本质上，这种调整是一种*学习*：在某个参数空间中寻找良好配置。因此，基于模型在验证集上的性能调整模型的配置可能很快导致*过拟合验证集*，即使您的模型从未直接在其上进行训练。
- en: Central to this phenomenon is the notion of *information leaks*. Every time
    you tune a hyperparameter of your model based on the model’s performance on the
    validation set, some information about the validation data leaks into the model.
    If you do this only once, for one parameter, then very few bits of information
    will leak, and your validation set will remain reliable for evaluating the model.
    But if you repeat this many times—running one experiment, evaluating on the validation
    set, and modifying your model as a result—then you’ll leak an increasingly significant
    amount of information about the validation set into the model.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种现象的核心是*信息泄漏*的概念。每当您根据模型在验证集上的性能调整模型的超参数时，一些关于验证数据的信息就会泄漏到模型中。如果您只这样做一次，针对一个参数，那么泄漏的信息量将很少，您的验证集将保持可靠，用于评估模型。但是，如果您多次重复这个过程——运行一个实验，在验证集上评估，并根据结果修改模型——那么您将泄漏��来越多关于验证集的信息到模型中。
- en: 'At the end of the day, you’ll end up with a model that performs artificially
    well on the validation data, because that’s what you optimized it for. You care
    about performance on completely new data, not on the validation data, so you need
    to use a completely different, never-before-seen dataset to evaluate the model:
    the test dataset. Your model shouldn’t have had access to *any* information about
    the test set, even indirectly. If anything about the model has been tuned based
    on test set performance, then your measure of generalization will be flawed.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您将得到一个在验证数据上表现良好的模型，因为这是您优化的目标。您关心的是在全新数据上的表现，而不是在验证数据上的表现，因此您需要使用一个完全不同的、以前从未见过的数据集来评估模型：测试数据集。您的模型不应该有关于测试集的*任何*信息，甚至间接的。如果模型的任何部分基于测试集的性能进行调整，那么您的泛化度量将是有缺陷的。
- en: 'Splitting your data into training, validation, and test sets may seem straightforward,
    but there are a few advanced ways to do it that can come in handy when little
    data is available. Let’s review three classic evaluation recipes: simple holdout
    validation, K-fold validation, and iterated K-fold validation with shuffling.
    We’ll also talk about the use of common-sense baselines to check that your training
    is going somewhere.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据分成训练、验证和测试集可能看起来很简单，但在数据有限时，有一些高级方法可以派上用场。让我们回顾三种经典的评估方法：简单留出验证、K 折验证和具有洗牌功能的迭代
    K 折验证。我们还将讨论使用常识基线来检查您的训练是否有所进展。
- en: Simple holdout validation
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 简单留出验证
- en: Set apart some fraction of your data as your test set. Train on the remaining
    data, and evaluate on the test set. As you saw in the previous sections, in order
    to prevent information leaks, you shouldn’t tune your model based on the test
    set, and therefore you should *also* reserve a validation set.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将一部分数据作为测试集。在剩余数据上进行训练，并在测试集上进行评估。正如您在前面的部分中看到的，为了防止信息泄漏，您不应该根据测试集调整模型，因此您还应该保留一个验证集。
- en: Schematically, holdout validation looks like figure 5.12\. Listing 5.5 shows
    a simple implementation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从示意图 5.12 的示意图上看，留出验证看起来像是。列表 5.5 显示了一个简单的实现。
- en: '![](../Images/05-12.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-12.png)'
- en: Figure 5.12 Simple holdout validation split
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 简单留出验证分割
- en: Listing 5.5 Holdout validation (note that labels are omitted for simplicity)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.5 留出验证（为简单起见省略了标签）
- en: '[PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ❶ Shuffling the data is usually appropriate.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 通常适合对数据进行洗牌。
- en: ❷ Defines the validation set
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 定义验证集
- en: ❸ Defines the training set
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 定义训练集
- en: ❹ Trains a model on the training data, and evaluates it on the validation data
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 在训练数据上训练模型，并在验证数据上评估
- en: ❺ At this point you can tune your model, retrain it, evaluate it, tune it again.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ 在这一点上，您可以调整您的模型，重新训练它，评估它，再次调整它。
- en: ❻ Once you’ve tuned your hyperparameters, it’s common to train your final model
    from scratch on all non-test data available.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ❻ 一旦调整了超参数，通常会从头开始在所有非测试数据上训练最终模型。
- en: 'This is the simplest evaluation protocol, and it suffers from one flaw: if
    little data is available, then your validation and test sets may contain too few
    samples to be statistically representative of the data at hand. This is easy to
    recognize: if different random shuffling rounds of the data before splitting end
    up yielding very different measures of model performance, then you’re having this
    issue. K-fold validation and iterated K-fold validation are two ways to address
    this, as discussed next.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单��评估协议，但存在一个缺陷：如果可用的数据很少，那么您的验证和测试集可能包含的样本太少，无法统计代表手头的数据。这很容易识别：如果在分割之前对数据进行不同的随机洗牌轮次导致模型性能的度量值非常不同，那么您就会遇到这个问题。K
    折验证和具有洗牌功能的迭代 K 折验证是解决这个问题的两种方法，接下来将讨论。
- en: K-fold validation
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: K 折验证
- en: With this approach, you split your data into `K` partitions of equal size. For
    each partition `i`, train a model on the remaining `K - 1` partitions, and evaluate
    it on partition `i`. Your final score is then the averages of the K scores obtained.
    This method is helpful when the performance of your model shows significant variance
    based on your train-test split. Like holdout validation, this method doesn’t exempt
    you from using a distinct validation set for model calibration.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，将数据分成`K`个大小相等的分区。对于每个分区`i`，在剩余的`K - 1`个分区上训练模型，并在分区`i`上评估。然后，您的最终得分是获得的
    K 个分数的平均值。当您的模型的性能根据训练-测试分割显示出显著变化时，这种方法是有帮助的。与留出验证一样，这种方法并不免除您使用一个不同的验证集进行模型校准。
- en: Schematically, K-fold cross-validation looks like figure 5.13\. Listing 5.6
    shows a simple implementation.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从图 5.13 的示意图上看，K 折交叉验证看起来像是。列表 5.6 显示了一个简单的实现。
- en: '![](../Images/05-13.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-13.png)'
- en: Figure 5.13 K-fold cross-validation with K=3
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 K 折交叉验证，K=3
- en: Listing 5.6 K-fold cross-validation (note that labels are omitted for simplicity)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.6 K 折交叉验证（为简单起见省略了标签）
- en: '[PRE5]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ❶ Selects the validation-data partition
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 选择验证数据分区
- en: ❷ Uses the remainder of the data as training data. Note that the + operator
    represents list concatenation, not summation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 使用剩余的数据作为训练数据。请注意，+ 运算符表示列表连接，而不是求和。
- en: ❸ Creates a brand-new instance of the model (untrained)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 创建一个全新的模型实例（未经训练）
- en: '❹ Validation score: average of the validation scores of the k folds'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 验证分数：k 个折叠的验证分数的平均值
- en: ❺ Trains the final model on all non-test data available
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ 在所有非测试数据上训练最终模型
- en: Iterated K-fold validation with shuffling
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 具有洗牌功能的迭代 K 折验证
- en: This one is for situations in which you have relatively little data available
    and you need to evaluate your model as precisely as possible. I’ve found it to
    be extremely helpful in Kaggle competitions. It consists of applying K-fold validation
    multiple times, shuffling the data every time before splitting it `K` ways. The
    final score is the average of the scores obtained at each run of K-fold validation.
    Note that you end up training and evaluating `P * K` models (where `P` is the
    number of iterations you use), which can be very expensive.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个是用于在可用数据相对较少且需要尽可能精确评估模型的情况下。我发现在Kaggle竞赛中非常有帮助。它包括多次应用K折验证，在每次将数据随机洗牌后将其分成`K`份。最终得分是在每次K折验证运行中获得的得分的平均值。请注意，你最终会训练和评估`P
    * K`个模型（其中`P`是你使用的迭代次数），这可能非常昂贵。
- en: 5.2.2 Beating a common-sense baseline
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2.2 打败常识基线
- en: Besides the different evaluation protocols you have available, one last thing
    you should know about is the use of common-sense baselines.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你可以使用的不同评估协议之外，你还应该了解的最后一件事是使用常识基线。
- en: Training a deep learning model is a bit like pressing a button that launches
    a rocket in a parallel world. You can’t hear it or see it. You can’t observe the
    manifold learning process—it’s happening in a space with thousands of dimensions,
    and even if you projected it to 3D, you couldn’t interpret it. The only feedback
    you have is your validation metrics—like an altitude meter on your invisible rocket.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 训练深度学习模型有点像按下一个按钮，在另一个平行世界中发射火箭。你听不到也看不到。你无法观察到流形学习过程—它发生在一个有数千维度的空间中，即使你将其投影到3D，你也无法解释它。你唯一的反馈是你的验证指标—就像你看不见的火箭上的高度计。
- en: 'It’s particularly important to be able to tell whether you’re getting off the
    ground at all. What was the altitude you started at? Your model seems to have
    an accuracy of 15%—is that any good? Before you start working with a dataset,
    you should always pick a trivial baseline that you’ll try to beat. If you cross
    that threshold, you’ll know you’re doing something right: your model is actually
    using the information in the input data to make predictions that generalize, and
    you can keep going. This baseline could be the performance of a random classifier,
    or the performance of the simplest non-machine learning technique you can imagine.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 能够判断你是否有所进展特别重要。你开始时的高度是多少？你的模型似乎有15%的准确率—这算好吗？在开始处理数据集之前，你应该始终选择一个微不足道的基线来尝试超越。如果你超过了这个阈值，你就知道你做对了：你的模型实际上正在利用输入数据中的信息进行泛化预测，你可以继续前进。这个基线可以是随机分类器的性能，或者你能想象到的最简单的非机器学习技术的性能。
- en: For instance, in the MNIST digit-classification example, a simple baseline would
    be a validation accuracy greater than 0.1 (random classifier); in the IMDB example,
    it would be a validation accuracy greater than 0.5\. In the Reuters example, it
    would be around 0.18-0.19, due to class imbalance. If you have a binary classification
    problem where 90% of samples belong to class A and 10% belong to class B, then
    a classifier that always predicts A already achieves 0.9 in validation accuracy,
    and you’ll need to do better than that.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在MNIST数字分类示例中，一个简单的基准是验证准确率大于0.1（随机分类器）；在IMDB示例中，它将是验证准确率大于0.5。在Reuters示例中，由于类别不平衡，它将在0.18-0.19左右。如果你有一个二元分类问题，其中90%的样本属于A类，10%属于B类，那么总是预测A的分类器在验证准确率方面已经达到0.9，你需要做得比这更好。
- en: Having a common-sense baseline you can refer to is essential when you’re getting
    started on a problem no one has solved before. If you can’t beat a trivial solution,
    your model is worthless—perhaps you’re using the wrong model, or perhaps the problem
    you’re tackling can’t even be approached with machine learning in the first place.
    Time to go back to the drawing board.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始解决以前没有人解决过的问题时，拥有一个可以参考的常识基线是至关重要的。如果你无法击败一个微不足道的解决方案，你的模型是毫无价值的—也许你使用的是错误的模型，或者你正在处理的问题根本无法用机器学习方法解决。是时候重新审视问题了。
- en: 5.2.3 Things to keep in mind about model evaluation
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2.3 关于模型评估需要记住的事情
- en: 'Keep an eye out for the following when you’re choosing an evaluation protocol:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择评估协议时，请注意以下事项：
- en: '*Data representativeness*—You want both your training set and test set to be
    representative of the data at hand. For instance, if you’re trying to classify
    images of digits, and you’re starting from an array of samples where the samples
    are ordered by their class, taking the first 80% of the array as your training
    set and the remaining 20% as your test set will result in your training set containing
    only classes 0–7, whereas your test set will contain only classes 8–9\. This seems
    like a ridiculous mistake, but it’s surprisingly common. For this reason, you
    usually should *randomly shuffle* your data before splitting it into training
    and test sets.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据代表性*—你希望你的训练集和测试集都能代表手头的数据。例如，如果你试图对数字图像进行分类，并且从一个按类别排序的样本数组开始，将数组的前80%作为训练集，剩下的20%作为测试集，将导致你的训练集只包含类别0-7，而测试集只包含类别8-9。这似乎是一个荒谬的错误，但这种情况出奇地常见。因此，你通常应该在将数据拆分为训练集和测试集之前*随机洗牌*你的数据。'
- en: '*The arrow of time*—If you’re trying to predict the future given the past (for
    example, tomorrow’s weather, stock movements, and so on), you should not randomly
    shuffle your data before splitting it, because doing so will create a *temporal
    leak*: your model will effectively be trained on data from the future. In such
    situations, you should always make sure all data in your test set is *posterior*
    to the data in the training set.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*时间的箭头*—如果你试图根据过去来预测未来（例如，明天的天气、股票走势等），在将数据拆分之前不要随机洗牌，因为这样做会造成*时间泄漏*：你的模型实际上是在未来的数据上进行训练的。在这种情况下，你应该始终确保测试集中的所有数据都*晚于*训练集中的数据。'
- en: '*Redundancy in your data*—If some data points in your data appear twice (fairly
    common with real-world data), then shuffling the data and splitting it into a
    training set and a validation set will result in redundancy between the training
    and validation sets. In effect, you’ll be testing on part of your training data,
    which is the worst thing you can do! Make sure your training set and validation
    set are disjoint.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据中的冗余*——如果你的数据中有一些数据点出现两次（在真实世界数据中很常见），那么对数据进行洗牌并将其分成训练集和验证集将导致训练集和验证集之间存在冗余。实际上，你将在部分训练数据上进行测试，这是你能做的最糟糕的事情！确保你的训练集和验证集是不相交的。'
- en: Having a reliable way to evaluate the performance of your model is how you’ll
    be able to monitor the tension at the heart of machine learning—between optimization
    and generalization, underfitting and overfitting.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个可靠的方法来评估模型性能是你如何能够监控机器学习中的核心张力——在优化和泛化、欠拟合和过拟合之间。
- en: 5.3 Improving model fit
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3 改善模型拟合
- en: To achieve the perfect fit, you must first overfit. Since you don’t know in
    advance where the boundary lies, you must cross it to find it. Thus, your initial
    goal as you start working on a problem is to achieve a model that shows some generalization
    power and that is able to overfit. Once you have such a model, you’ll focus on
    refining generalization by fighting overfitting.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现完美拟合，你必须首先过拟合。由于你事先不知道边界在哪里，你必须越过它找到它。因此，你在开始解决问题时的初始目标是获得一个显示一定泛化能力并能够过拟合的模型。一旦你有了这样的模型，你将专注于通过对抗过拟合来完善泛化。
- en: 'There are three common problems you’ll encounter at this stage:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段你会遇到三个常见问题：
- en: 'Training doesn’t get started: your training loss doesn’t go down over time.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练无法开始：你的训练损失不会随时间降低。
- en: 'Training gets started just fine, but your model doesn’t meaningfully generalize:
    you can’t beat the common-sense baseline you set.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练开始得很顺利，但你的模型并没有有意义地泛化：你无法击败你设定的常识基线。
- en: Training and validation loss both go down over time, and you can beat your baseline,
    but you don’t seem to be able to overfit, which indicates you’re still underfitting.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着时间的推移，训练和验证损失都在下降，你可以击败你的基线，但似乎无法过拟合，这表明你仍然欠拟合。
- en: 'Let’s see how you can address these issues to achieve the first big milestone
    of a machine learning project: getting a model that has some generalization power
    (it can beat a trivial baseline) and that is able to overfit.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何解决这些问题，以实现机器学习项目的第一个重要里程碑：获得具有一定泛化能力的模型（能够击败一个简单的基线）并且能够过拟合。
- en: 5.3.1 Tuning key gradient descent parameters
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.1 调整关键梯度下降参数
- en: 'Sometimes training doesn’t get started, or it stalls too early. Your loss is
    stuck. This is *always* something you can overcome: remember that you can fit
    a model to random data. Even if nothing about your problem makes sense, you should
    *still* be able to train something—if only by memorizing the training data.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有时训练无法开始，或者过早停滞。你的损失停滞不前。这总是可以克服的：记住你可以将模型拟合到随机数据上。即使你的问题毫无意义，你仍然应该能够训练出一些东西——即使只是通过记忆训练数据。
- en: 'When this happens, it’s always a problem with the configuration of the gradient
    descent process: your choice of optimizer, the distribution of initial values
    in the weights of your model, your learning rate, or your batch size. All these
    parameters are interdependent, and as such it is usually sufficient to tune the
    learning rate and the batch size while keeping the rest of the parameters constant.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，通常是由于梯度下降过程的配置问题：你选择的优化器、模型权重的初始值分布、学习率或批量大小。所有这些参数是相互依赖的，因此通常只需调整学习率和批量大小，同时保持其他参数不变即可。
- en: 'Let’s look at a concrete example: let’s train the MNIST model from chapter
    2 with an inappropriately large learning rate of value 1.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个具体的例子：让我们用值为 1 的不合适大学习率训练第 2 章的 MNIST 模型。
- en: Listing 5.7 Training an MNIST model with an incorrectly high learning rate
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.7 使用不正确高学习率训练 MNIST 模型
- en: '[PRE6]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The model quickly reaches a training and validation accuracy in the 30%–40%
    range, but cannot get past that. Let’s try to lower the learning rate to a more
    reasonable value of `1e-2`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型很快达到了 30%–40% 的训练和验证准确率，但无法超越这一范围。让我们尝试将学习率降低到一个更合理的值`1e-2`。
- en: Listing 5.8 The same model with a more appropriate learning rate
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.8 具有更合适学习率的相同模型
- en: '[PRE7]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The model is now able to train.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型能够训练。
- en: If you find yourself in a similar situation, try
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己处于类似情况，尝试
- en: Lowering or increasing the learning rate. A learning rate that is too high may
    lead to updates that vastly overshoot a proper fit, like in the preceding example,
    and a learning rate that is too low may make training so slow that it appears
    to stall.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低或增加学习率。学习率过高可能导致更新远超适当拟合，就像前面的例子中一样，而学习率过低可能使训练过于缓慢，看起来停滞不前。
- en: Increasing the batch size. A batch with more samples will lead to gradients
    that are more informative and less noisy (lower variance).
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加批量大小。具有更多样本的批次将导致更具信息性和更少噪声的梯度（方差更低）。
- en: You will, eventually, find a configuration that gets training started.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你会找到一个能够开始训练的配置。
- en: 5.3.2 Leveraging better architecture priors
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.2 利用更好的架构先验知识
- en: 'You have a model that fits, but for some reason your validation metrics aren’t
    improving at all. They remain no better than what a random classifier would achieve:
    your model trains but doesn’t generalize. What’s going on?'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个适合的模型，但由于某种原因你的验证指标根本没有改善。它们仍然不比随机分类器获得的好：你的模型训练了，但泛化能力不强。发生了什么？
- en: This is perhaps the worst machine learning situation you can find yourself in.
    It indicates that *something is fundamentally wrong with your approach*, and it
    may not be easy to tell what. Here are some tips.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是你会遇到的最糟糕的机器学习情况。这表明*你的方法在根本上有问题*，而且可能不容易判断。以下是一些建议。
- en: 'First, it may be that the input data you’re using simply doesn’t contain sufficient
    information to predict your targets: the problem as formulated is not solvable.
    This is what happened earlier when we tried to fit an MNIST model where the labels
    were shuffled: the model would train just fine, but validation accuracy would
    stay stuck at 10%, because it was plainly impossible to generalize with such a
    dataset.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，可能是你使用的输入数据根本不包含足够的信息来预测目标：问题的表述是不可解的。这就是之前当我们尝试拟合一个MNIST模型时发生的情况，其中标签被洗牌：模型训练得很好，但验证准确率停留在10%，因为用这样的数据集明显不可能泛化。
- en: 'It may also be that the kind of model you’re using is not suited for the problem
    at hand. For instance, in chapter 10, you’ll see an example of a timeseries prediction
    problem where a densely connected architecture isn’t able to beat a trivial baseline,
    whereas a more appropriate recurrent architecture does manage to generalize well.
    Using a model that makes the right assumptions about the problem is essential
    to achieve generalization: you should leverage the right architecture priors.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 也可能是你使用的模型类型不适合当前的问题。例如，在第10章中，你会看到一个时间序列预测问题的例子，其中一个密集连接的架构无法击败一个微不足道的基准线，而一个更合适的循环架构确实能够很好地泛化。使用对问题做出正确假设的模型对于实现泛化是至关重要的：你应该利用正确的架构先验知识。
- en: In the following chapters, you’ll learn about the best architectures to use
    for a variety of data modalities—images, text, timeseries, and so on. In general,
    you should always make sure to read up on architecture best practices for the
    kind of task you’re attacking—chances are you’re not the first person to attempt
    it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习到用于各种数据模态（图像、文本、时间序列等）的最佳架构。一般来说，你应该始终确保阅读关于你正在攻击的任务类型的架构最佳实践——很可能你不是第一个尝试的人。
- en: 5.3.3 Increasing model capacity
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.3 增加模型容量
- en: 'If you manage to get to a model that fits, where validation metrics are going
    down, and that seems to achieve at least some level of generalization power, congratulations:
    you’re almost there. Next, you need to get your model to start overfitting.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功得到一个适合的模型，其中验证指标在下降，并且似乎至少达到了一定程度的泛化能力，恭喜你：你已经接近成功了。接下来，你需要让你的模型开始过拟合。
- en: Consider the following small model—a simple logistic regression—trained on MNIST
    pixels.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的小模型——一个简单的逻辑回归——在MNIST像素上训练。
- en: Listing 5.9 A simple logistic regression on MNIST
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5.9 在MNIST上的简单逻辑回归
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You get loss curves that look like figure 5.14:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到类似于图5.14的损失曲线：
- en: '[PRE9]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/05-14.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-14.png)'
- en: Figure 5.14 Effect of insufficient model capacity on loss curves
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 不足模型容量对损失曲线的影响
- en: Validation metrics seem to stall, or to improve very slowly, instead of peaking
    and reversing course. The validation loss goes to 0.26 and just stays there. You
    can fit, but you can’t clearly overfit, even after many iterations over the training
    data. You’re likely to encounter similar curves often in your career.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 验证指标似乎停滞不前，或者改善非常缓慢，而不是达到峰值然后逆转。验证损失降至0.26，然后停在那里。你可以拟合，但你无法明显过拟合，即使在对训练数据进行多次迭代后。你在职业生涯中很可能经常遇到类似的曲线。
- en: 'Remember that it should always be possible to overfit. Much like the problem
    where the training loss doesn’t go down, this is an issue that can always be solved.
    If you can’t seem to be able to overfit, it’s likely a problem with the *representational
    power* of your model: you’re going to need a bigger model, one with more *capacity*,
    that is to say, one able to store more information. You can increase representational
    power by adding more layers, using bigger layers (layers with more parameters),
    or using kinds of layers that are more appropriate for the problem at hand (better
    architecture priors).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，总是可以过拟合的。就像训练损失不下降的问题一样，这是一个总是可以解决的问题。如果你似乎无法过拟合，很可能是你的模型的*表征能力*的问题：你需要一个更大的模型，一个具有更多*容量*的模型，也就是说，能够存储更多信息的模型。你可以通过添加更多层、使用更大的层（具有更多参数的层）或使用更适合问题的层来增加表征能力（更好的架构先验）。
- en: 'Let’s try training a bigger model, one with two intermediate layers with 96
    units each:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试训练一个更大的模型，一个具有两个中间层，每个层有96个单元：
- en: '[PRE10]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The validation curve now looks exactly like it should: the model fits fast
    and starts overfitting after 8 epochs (see figure 5.15).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在验证曲线看起来正是应该的：模型快速拟合，并在8个时期后开始过拟合（见图5.15）。
- en: '![](../Images/05-15.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-15.png)'
- en: Figure 5.15 Validation loss for a model with appropriate capacity
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 具有适当容量的模型的验证损失
- en: 5.4 Improving generalization
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.4 改善泛化能力
- en: Once your model has shown itself to have some generalization power and to be
    able to overfit, it’s time to switch your focus to maximizing generalization.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的模型展现出一定的泛化能力并且能够过拟合，就是时候将注意力转移到最大化泛化上了。
- en: 5.4.1 Dataset curation
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.1 数据集整理
- en: You’ve already learned that generalization in deep learning originates from
    the latent structure of your data. If your data makes it possible to smoothly
    interpolate between samples, you will be able to train a deep learning model that
    generalizes. If your problem is overly noisy or fundamentally discrete, like,
    say, list sorting, deep learning will not help you. Deep learning is curve fitting,
    not magic.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学到了深度学习中泛化是源自数据的潜在结构。如果你的数据使得在样本之间平滑插值成为可能，你将能够训练一个泛化的深度学习模型。如果你的问题过于嘈杂或基本上是离散的，比如说，列表排序，深度学习将无法帮助你。深度学习是曲线拟合，而不是魔术。
- en: As such, it is essential that you make sure that you’re working with an appropriate
    dataset. Spending more effort and money on data collection almost always yields
    a much greater return on investment than spending the same on developing a better
    model.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，确保你正在使用一个合适的数据集是至关重要的。在数据收集上投入更多的精力和金钱几乎总是比在开发更好的模型上投入相同的精力和金钱产生更大的回报。
- en: Make sure you have enough data. Remember that you need a *dense sampling* of
    the input-cross-output space. More data will yield a better model. Sometimes,
    problems that seem impossible at first become solvable with a larger dataset.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你有足够的数据。记住你需要对输入-输出空间进行*密集采样*。更多的数据将产生更好的模型。有时，一开始看起来不可能的问题会随着更大的数据集而变得可解。
- en: Minimize labeling errors—visualize your inputs to check for anomalies, and proofread
    your labels.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化标记错误——可视化你的输入以检查异常，并校对你的标签。
- en: Clean your data and deal with missing values (we’ll cover this in the next chapter).
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清洁你的数据并处理缺失值（我们将在下一章中介绍）。
- en: If you have many features and you aren’t sure which ones are actually useful,
    do feature selection.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有很多特征，而不确定哪些是真正有用的，那就进行特征选择。
- en: A particularly important way to improve the generalization potential of your
    data is *feature engineering*. For most machine learning problems, feature engineering
    is a key ingredient for success. Let’s take a look.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 提高数据泛化潜力的一个特别重要的方法是*特征工程*。对于大多数机器学习问题，特征工程是成功的关键因素。让我们来看看。
- en: 5.4.2 Feature engineering
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.2 特征工程
- en: '*Feature engineering* is the process of using your own knowledge about the
    data and about the machine learning algorithm at hand (in this case, a neural
    network) to make the algorithm work better by applying hardcoded (non-learned)
    transformations to the data before it goes into the model. In many cases, it isn’t
    reasonable to expect a machine learning model to be able to learn from completely
    arbitrary data. The data needs to be presented to the model in a way that will
    make the model’s job easier.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*特征工程*是利用你对数据和手头的机器学习算法（在本例中是神经网络）的知识，通过在数据进入模型之前应用硬编码（非学习的）转换来使算法更好地工作的过程。在许多情况下，期望机器学习模型能够从完全任意的数据中学习是不合理的。数据需要以一种使模型工作更轻松的方式呈现给模型。'
- en: Let’s look at an intuitive example. Suppose you’re trying to develop a model
    that can take as input an image of a clock and can output the time of day (see
    figure 5.16).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个直观的例子。假设你正在开发一个模型，可以接受时钟的图像作为输入，并输出一天中的时间（见图 5.16）。
- en: '![](../Images/05-16.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-16.png)'
- en: Figure 5.16 Feature engineering for reading the time on a clock
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 读取时钟上时间的特征工程
- en: If you choose to use the raw pixels of the image as input data, you have a difficult
    machine learning problem on your hands. You’ll need a convolutional neural network
    to solve it, and you’ll have to expend quite a bit of computational resources
    to train the network.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择将图像的原始像素作为输入数据，那么你将面临一个困难的机器学习问题。你将需要一个卷积神经网络来解决它，并且需要耗费相当多的计算资源来训练网络。
- en: 'But if you already understand the problem at a high level (you understand how
    humans read time on a clock face), you can come up with much better input features
    for a machine learning algorithm: for instance, it’s easy to write a five-line
    Python script to follow the black pixels of the clock hands and output the `(x,
    y)` coordinates of the tip of each hand. Then a simple machine learning algorithm
    can learn to associate these coordinates with the appropriate time of day.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你已经在高层次上理解了问题（你了解人类如何读取时钟面上的时间），你可以为机器学习算法想出更好的输入特征：例如，编写一个五行的 Python 脚本来跟踪时钟指针的黑色像素，并输出每个指针尖端的`(x,
    y)`坐标。然后一个简单的机器学习算法可以学会将这些坐标与适当的时间关联起来。
- en: 'You can go even further: do a coordinate change, and express the `(x, y)` coordinates
    as polar coordinates with regard to the center of the image. Your input will become
    the angle `theta` of each clock hand. At this point, your features are making
    the problem so easy that no machine learning is required; a simple rounding operation
    and dictionary lookup are enough to recover the approximate time of day.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以更进一步：进行坐标变换，将`(x, y)`坐标表示为相对于图像中心的极坐标。你的输入将变为每个时钟指针的角度`theta`。此时，你的特征使问题变得如此简单，以至于不需要机器学习；一个简单的四舍五入操作和字典查找就足以恢复大致的时间。
- en: 'That’s the essence of feature engineering: making a problem easier by expressing
    it in a simpler way. Make the latent manifold smoother, simpler, better organized.
    Doing so usually requires understanding the problem in depth.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是特征工程的本质：通过以更简单的方式表达问题来使问题变得更容易。使潜在流形更加平滑、简单、更有组织。通常这需要深入理解问题。
- en: Before deep learning, feature engineering used to be the most important part
    of the machine learning workflow, because classical shallow algorithms didn’t
    have hypothesis spaces rich enough to learn useful features by themselves. The
    way you presented the data to the algorithm was absolutely critical to its success.
    For instance, before convolutional neural networks became successful on the MNIST
    digit-classification problem, solutions were typically based on hardcoded features
    such as the number of loops in a digit image, the height of each digit in an image,
    a histogram of pixel values, and so on.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在深度学习之前，特征工程曾经是机器学习工作流程中最重要的部分，因为经典的浅层算法没有足够丰富的假设空间来自动学习有用的特征。你向算法呈现数据的方式对其成功至关重要。例如，在卷积神经网络在
    MNIST 数字分类问题上取得成功之前，解决方案通常基于硬编码的特征，如数字图像中的循环次数、图像中每个数字的高度、像素值的直方图等。
- en: 'Fortunately, modern deep learning removes the need for most feature engineering,
    because neural networks are capable of automatically extracting useful features
    from raw data. Does this mean you don’t have to worry about feature engineering
    as long as you’re using deep neural networks? No, for two reasons:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现代深度学习消除了大部分特征工程的需求，因为神经网络能够自动从原始数据中提取有用的特征。这是否意味着只要使用深度神经网络，你就不必担心特征工程了？不，有两个原因：
- en: Good features still allow you to solve problems more elegantly while using fewer
    resources. For instance, it would be ridiculous to solve the problem of reading
    a clock face using a convolutional neural network.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优秀的特征仍然可以让您更优雅地解决问题，同时使用更少的资源。例如，使用卷积神经网络解决读取时钟面的问题是荒谬的。
- en: Good features let you solve a problem with far less data. The ability of deep
    learning models to learn features on their own relies on having lots of training
    data available; if you have only a few samples, the information value in their
    features becomes critical.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优秀的特征让您可以用更少的数据解决问题。深度学习模型学习特征的能力依赖于有大量的训练数据可用；如果只有少量样本，那么它们的特征中的信息价值就变得至关重要。
- en: 5.4.3 Using early stopping
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.3 使用早停法
- en: 'In deep learning, we always use models that are vastly overparameterized: they
    have way more degrees of freedom than the minimum necessary to fit to the latent
    manifold of the data. This overparameterization is not an issue, because *you
    never fully fit a deep learning model*. Such a fit wouldn’t generalize at all.
    You will always interrupt training long before you’ve reached the minimum possible
    training loss.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在深度学习中，我们总是使用远远超参数化的模型：它们的自由度远远超过拟合数据的潜在流形所需的最小自由度。这种过度参数化并不是问题，因为*你永远不会完全拟合一个深度学习模型*。这样的拟合根本不会泛化。你总是会在达到最小可能的训练损失之前中断训练。
- en: Finding the exact point during training where you’ve reached the most generalizable
    fit—the exact boundary between an underfit curve and an overfit curve—is one of
    the most effective things you can do to improve generalization.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 找到训练过程中达到最具泛化性拟合的确切点——欠拟合曲线和过拟合曲线之间的确切边界——是改善泛化的最有效的事情之一。
- en: In the examples in the previous chapter, we would start by training our models
    for longer than needed to figure out the number of epochs that yielded the best
    validation metrics, and then we would retrain a new model for exactly that number
    of epochs. This is pretty standard, but it requires you to do redundant work,
    which can sometimes be expensive. Naturally, you could just save your model at
    the end of each epoch, and once you’ve found the best epoch, reuse the closest
    saved model you have. In Keras, it’s typical to do this with an `EarlyStopping`
    callback, which will interrupt training as soon as validation metrics have stopped
    improving, while remembering the best known model state. You’ll learn to use callbacks
    in chapter 7\.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的例子中，我们会先训练我们的模型比需要的时间更长，以找出产生最佳验证指标的时期数量，然后我们会重新训练一个新模型，确切地达到那个时期数量。这是相当标准的，但它要求你做冗余的工作，有时可能很昂贵。当然，你可以在每个时期结束时保存你的模型，一旦找到最佳时期，就重用你最接近的已保存模型。在Keras中，通常使用`EarlyStopping`回调来实现这一点，它会在验证指标停止改善时立即中断训练，同时记住已知的最佳模型状态。你将在第7章学习如何使用回调。
- en: 5.4.4 Regularizing your model
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4.4 正则化您的模型
- en: '*Regularization techniques* are a set of best practices that actively impede
    the model’s ability to fit perfectly to the training data, with the goal of making
    the model perform better during validation. This is called “regularizing” the
    model, because it tends to make the model simpler, more “regular,” its curve smoother,
    more “generic”; thus it is less specific to the training set and better able to
    generalize by more closely approximating the latent manifold of the data.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*正则化技术*是一组最佳实践，积极阻碍模型完美拟合训练数据的能力，目的是使模型在验证期间表现更好。这被称为“正则化”模型，因为它倾向于使模型更简单，更“规则”，其曲线更平滑，更“通用”；因此，它对训练集不那么特定，更能够通过更接近地逼近数据的潜在流形来泛化。'
- en: Keep in mind that regularizing a model is a process that should always be guided
    by an accurate evaluation procedure. You will only achieve generalization if you
    can measure it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，正则化模型是一个应该始终由准确的评估程序指导的过程。只有通过测量，您才能实现泛化。
- en: Let’s review some of the most common regularization techniques and apply them
    in practice to improve the movie-classification model from chapter 4.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些最常见的正则化技术，并在实践中应用它们来改进第4章的电影分类模型。
- en: Reducing the network’s size
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 减小网络的大小
- en: 'You’ve already learned that a model that is too small will not overfit. The
    simplest way to mitigate overfitting is to reduce the size of the model (the number
    of learnable parameters in the model, determined by the number of layers and the
    number of units per layer). If the model has limited memorization resources, it
    won’t be able to simply memorize its training data; thus, in order to minimize
    its loss, it will have to resort to learning compressed representations that have
    predictive power regarding the targets—precisely the type of representations we’re
    interested in. At the same time, keep in mind that you should use models that
    have enough parameters that they don’t underfit: your model shouldn’t be starved
    for memorization resources. There is a compromise to be found between *too much
    capacity* and *not enough capacity*.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学到，一个太小的模型不会过拟合。缓解过拟合的最简单方法是减小模型的大小（模型中可学习参数的数量，由层数和每层单元的数量确定）。如果模型的记忆资源有限，它将无法简单地记住其训练数据；因此，为了最小化损失，它将不得不求助于学习具有关于目标的预测能力的压缩表示——这正是我们感兴趣的表示类型。同时，请记住，您应该使用具有足够参数的模型，以便它们不会欠拟合：您的模型不应该缺乏记忆资源。在*容量过大*和*容量不足*之间需要找到一个折衷。
- en: Unfortunately, there is no magical formula to determine the right number of
    layers or the right size for each layer. You must evaluate an array of different
    architectures (on your validation set, not on your test set, of course) in order
    to find the correct model size for your data. The general workflow for finding
    an appropriate model size is to start with relatively few layers and parameters,
    and increase the size of the layers or add new layers until you see diminishing
    returns with regard to validation loss.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，没有一个神奇的公式可以确定正确的层数或每个层的正确大小。你必须评估一系列不同的架构（当然是在验证集上，而不是在测试集上）以找到适合你数据的正确模型大小。找到合适模型大小的一般工作流程是从相对较少的层和参数开始，并增加层的大小或添加新层，直到看到验证损失的收益递减。
- en: Let’s try this on the movie-review classification model. The following listing
    shows our original model.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在电影评论分类模型上进行这个操作。以下列表显示了我们的原始模型。
- en: Listing 5.10 Original model
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.10 原始模型
- en: '[PRE11]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now let’s try to replace it with this smaller model.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试用这个较小的模型替换它。
- en: Listing 5.11 Version of the model with lower capacity
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.11 具有较低容量的模型版本
- en: '[PRE12]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Figure 5.17 shows a comparison of the validation losses of the original model
    and the smaller model.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 显示了原始模型和较小模型的验证损失的比较。
- en: '![](../Images/05-17.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-17.png)'
- en: Figure 5.17 Original model vs. smaller model on IMDB review classification
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 IMDB 评论分类中原始模型与较小模型的比较
- en: As you can see, the smaller model starts overfitting later than the reference
    model (after six epochs rather than four), and its performance degrades more slowly
    once it starts overfitting.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，较小的模型开始过拟合的时间比参考模型晚（在六个周期而不是四个周期之后），一旦开始过拟合，其性能下降速度更慢。
- en: Now, let’s add to our benchmark a model that has much more capacity—far more
    than the problem warrants. While it is standard to work with models that are significantly
    overparameterized for what they’re trying to learn, there can definitely be such
    a thing as *too much* memorization capacity. You’ll know your model is too large
    if it starts overfitting right away and if its validation loss curve looks choppy
    with high-variance (although choppy validation metrics could also be a symptom
    of using an unreliable validation process, such as a validation split that’s too
    small).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在基准模型中添加一个容量更大的模型——远远超出问题所需的容量。虽然通常使用远超参数化的模型来学习是标准做法，但确实存在*记忆容量过大*的情况。如果你的模型开始过拟合并且其验证损失曲线看起来波动较大（尽管波动的验证指标也可能是使用不可靠的验证过程的症状，比如验证分割太小），那么你会知道你的模型太大了。
- en: Listing 5.12 Version of the model with higher capacity
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.12 具有更高容量的模型版本
- en: '[PRE13]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Figure 5.18 shows how the bigger model fares compared with the reference model.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 显示了较大模型与参考模型的比较。
- en: '![](../Images/05-18.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-18.png)'
- en: Figure 5.18 Original model vs. much larger model on IMDB review classification
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 原始模型与 IMDB 评论分类中更大模型的比较
- en: The bigger model starts overfitting almost immediately, after just one epoch,
    and it overfits much more severely. Its validation loss is also noisier. It gets
    training loss near zero very quickly. The more capacity the model has, the more
    quickly it can model the training data (resulting in a low training loss), but
    the more susceptible it is to overfitting (resulting in a large difference between
    the training and validation loss).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 较大模型几乎立即开始过拟合，仅经过一个周期，过拟合程度更严重。其验证损失也更加嘈杂。它非常快地将训练损失降至接近零。模型容量越大，就越能快速对训练数据进行建模（导致训练损失较低），但也越���易过拟合（导致训练和验证损失之间的差异较大）。
- en: Adding weight regularization
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 添加权重正则化
- en: 'You may be familiar with the principle of *Occam’s razor*: given two explanations
    for something, the explanation most likely to be correct is the simplest one—the
    one that makes fewer assumptions. This idea also applies to the models learned
    by neural networks: given some training data and a network architecture, multiple
    sets of weight values (multiple *models*) could explain the data. Simpler models
    are less likely to overfit than complex ones.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉*奥卡姆剃刀*原理：对于某事的两种解释，最有可能正确的解释是最简单的解释——即做出更少假设的解释。这个想法也适用于神经网络学习的模型：在给定一些训练数据和网络架构的情况下，多组权重值（多个*模型*）可以解释数据。简单模型比复杂模型更不容易过拟合。
- en: 'A *simple model* in this context is a model where the distribution of parameter
    values has less entropy (or a model with fewer parameters, as you saw in the previous
    section). Thus, a common way to mitigate overfitting is to put constraints on
    the complexity of a model by forcing its weights to take only small values, which
    makes the distribution of weight values more *regular*. This is called *weight
    regularization*, and it’s done by adding to the loss function of the model a cost
    associated with having large weights. This cost comes in two flavors:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，*简单模型*是指参数值分布熵较低的模型（或者是参数较少的模型，正如你在前一节中看到的）。因此，减轻过拟合的常见方法是通过对模型的复杂性施加约束，强制其权重只取小值，这使得权重值的分布更*规则*。这被称为*权重正则化*，通过向模型的损失函数添加与权重较大相关的成本来实现。这个成本有两种形式：
- en: '*L1 regularization*—The cost added is proportional to the *absolute value of
    the weight coefficients* (the *L1* *norm* of the weights).'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*L1 正则化*—添加的成本与权重系数的*绝对值*成比例（权重的*L1 范数*）。'
- en: '*L2 regularization*—The cost added is proportional to the *square of the value
    of the weight coefficients* (the *L2 norm* of the weights). L2 regularization
    is also called *weight decay* in the context of neural networks. Don’t let the
    different name confuse you: weight decay is mathematically the same as L2 regularization.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*L2 正则化*—添加的成本与权重系数的*平方值*成比例（权重的*L2 范数*）。在神经网络的背景下，L2 正则化也被称为*权重衰减*。不要让不同的名称使你困惑：数学上，权重衰减与
    L2 正则化是相同的。'
- en: In Keras, weight regularization is added by passing *weight regularizer instances*
    to layers as keyword arguments. Let’s add L2 weight regularization to our initial
    movie-review classification model.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Keras 中，通过将*权重正则化器实例*作为关键字参数传递给层来添加权重正则化。让我们向我们最初的电影评论分类模型添加 L2 权重正则化。
- en: Listing 5.13 Adding L2 weight regularization to the model
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5.13 向模型添加 L2 权重正则化
- en: '[PRE14]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding listing, `l2(0.002)` means every coefficient in the weight
    matrix of the layer will add `0.002 * weight_coefficient_value ** 2` to the total
    loss of the model. Note that because this penalty is *only added at training time*,
    the loss for this model will be much higher at training than at test time.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的清单中，`l2(0.002)`表示层的权重矩阵中的每个系数将会为模型的总损失增加 `0.002 * weight_coefficient_value
    ** 2`。请注意，因为这种惩罚*仅在训练时添加*，所以该模型的损失在训练时会比在测试时高得多。
- en: Figure 5.19 shows the impact of the L2 regularization penalty. As you can see,
    the model with L2 regularization has become much more resistant to overfitting
    than the reference model, even though both models have the same number of parameters.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 显示了 L2 正则化惩罚的影响。正如您所看到的，具有 L2 正则化的模型比参考模型更加抵抗过拟合，尽管两个模型具有相同数量的参数。
- en: '![](../Images/05-19.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-19.png)'
- en: Figure 5.19 Effect of L2 weight regularization on validation loss
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 L2 权重正则化对验证损失的影响
- en: As an alternative to L2 regularization, you can use one of the following Keras
    weight regularizers.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 L2 正则化的替代，您可以使用以下 Keras 权重正则化器之一。
- en: Listing 5.14 Different weight regularizers available in Keras
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5.14 Keras 中可用的不同权重正则化器
- en: '[PRE15]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ❶ L1 regularization
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ L1 正则化
- en: ❷ Simultaneous L1 and L2 regularization
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 同时使用 L1 和 L2 正则化
- en: 'Note that weight regularization is more typically used for smaller deep learning
    models. Large deep learning models tend to be so overparameterized that imposing
    constraints on weight values hasn’t much impact on model capacity and generalization.
    In these cases, a different regularization technique is preferred: dropout.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，权重正则化更常用于较小的深度学习模型。大型深度学习模型往往过于参数化，对权重值施加约束对模型容量和泛化能力的影响不大。在这些情况下，更倾向于使用不同的正则化技术：丢弃。
- en: Adding dropout
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 添加丢弃
- en: '*Dropout* is one of the most effective and most commonly used regularization
    techniques for neural networks; it was developed by Geoff Hinton and his students
    at the University of Toronto. Dropout, applied to a layer, consists of randomly
    *dropping out* (setting to zero) a number of output features of the layer during
    training. Let’s say a given layer would normally return a vector `[0.2, 0.5, 1.3,
    0.8, 1.1]` for a given input sample during training. After applying dropout, this
    vector will have a few zero entries distributed at random: for example, `[0, 0.5,
    1.3, 0, 1.1]`. The *dropout rate* is the fraction of the features that are zeroed
    out; it’s usually set between 0.2 and 0.5\. At test time, no units are dropped
    out; instead, the layer’s output values are scaled down by a factor equal to the
    dropout rate, to balance for the fact that more units are active than at training
    time.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*Dropout* 是神经网络中最有效和最常用的正则化技术之一；它是由杰夫·辛顿及其多伦多大学的学生开发的。应用于层的 Dropout 在训练期间会随机*丢弃*（设置为零）层的一些输出特征。假设给定层在训练期间对于给定输入样本会返回一个向量
    `[0.2, 0.5, 1.3, 0.8, 1.1]`。应用 Dropout 后，这个向量将随机分布一些零条目：例如，`[0, 0.5, 1.3, 0, 1.1]`。*丢弃率*是被置零的特征的分数；通常设置在
    0.2 和 0.5 之间。在测试时，没有单位被丢弃；相反，层的输出值会按照与丢弃率相等的因子进行缩放，以平衡训练时更多单位处于活动状态的事实。'
- en: 'Consider a NumPy matrix containing the output of a layer, `layer_output`, of
    shape `(batch_size, features)`. At training time, we zero out at random a fraction
    of the values in the matrix:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含层输出 `layer_output` 的 NumPy 矩阵，形状为 `(batch_size, features)`。在训练时，我们随机将矩阵中的一部分值置零：
- en: '[PRE16]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ❶ At training time, drops out 50% of the units in the output
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 在训练时，输出中的单位有 50% 被丢弃
- en: 'At test time, we scale down the output by the dropout rate. Here, we scale
    by 0.5 (because we previously dropped half the units):'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试时，我们通过丢弃率缩小输出。在这里，我们缩小了 0.5（因为之前我们丢弃了一半的单位）：
- en: '[PRE17]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: ❶ At test time
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 在测试时
- en: 'Note that this process can be implemented by doing both operations at training
    time and leaving the output unchanged at test time, which is often the way it’s
    implemented in practice (see figure 5.20):'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个过程可以通过在训练时执行这两个操作并在测试时保持输出不变来实现，这通常是实践中的实现方式（参见图 5.20）：
- en: '[PRE18]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ❶ At training time
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 在训练时
- en: ❷ Note that we’re scaling up rather than scaling down in this case.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 请注意，在这种情况下我们是放大而不是缩小。
- en: '![](../Images/05-20.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-20.png)'
- en: Figure 5.20 Dropout applied to an activation matrix at training time, with rescaling
    happening during training. At test time the activation matrix is unchanged.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 在训练时应用丢弃到激活矩阵，训练期间进行重新缩放。在测试时，激活矩阵保持不变。
- en: This technique may seem strange and arbitrary. Why would this help reduce overfitting?
    Hinton says he was inspired by, among other things, a fraud-prevention mechanism
    used by banks. In his own words, “I went to my bank. The tellers kept changing
    and I asked one of them why. He said he didn’t know but they got moved around
    a lot. I figured it must be because it would require cooperation between employees
    to successfully defraud the bank. This made me realize that randomly removing
    a different subset of neurons on each example would prevent conspiracies and thus
    reduce overfitting.” The core idea is that introducing noise in the output values
    of a layer can break up happenstance patterns that aren’t significant (what Hinton
    refers to as *conspiracies*), which the model will start memorizing if no noise
    is present.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术可能看起来奇怪而武断。为什么这有助于减少过拟合？辛顿说，他受到了银行使用的防欺诈机制的启发，其中包括其他事物。他自己的话是：“我去了我的银行。出纳员经常变动，我问其中一个原因。他说他不知道，但他们经常换岗。我想这一定是因为需要员工之间的合作才能成功欺诈银行。这让我意识到，随机地在每个示例中删除不同的神经元子集将防止阴谋，从而减少过拟合。”
    核心思想是在层的输出值中引入噪声可以打破不重要的偶然模式（辛顿称之为*阴谋*），如果没有噪声，模型将开始记忆。
- en: In Keras, you can introduce dropout in a model via the `Dropout` layer, which
    is applied to the output of the layer right before it. Let’s add two `Dropout`
    layers in the IMDB model to see how well they do at reducing overfitting.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在Keras中，您可以通过`Dropout`层在模型中引入辍学，该层应用于其前一层的输出。让我们在IMDB模型中添加两个`Dropout`层，看看它们在减少过拟合方面的效果如何。
- en: Listing 5.15 Adding dropout to the IMDB model
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5.15 向IMDB模型添加辍学
- en: '[PRE19]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Figure 5.21 shows a plot of the results. This is a clear improvement over the
    reference model—it also seems to be working much better than L2 regularization,
    since the lowest validation loss reached has improved.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21显示了结果的图表。这明显比参考模型有所改进——它似乎也比L2正则化效果更好，因为达到的最低验证损失有所改善。
- en: '![](../Images/05-21.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05-21.png)'
- en: Figure 5.21 Effect of dropout on validation loss
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21 辍学对验证损失的影响
- en: 'To recap, these are the most common ways to maximize generalization and prevent
    overfitting in neural networks:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是在神经网络中最大化泛化并防止过拟合的最常见方法：
- en: Get more training data, or better training data.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取更多训练数据，或更好的训练数据。
- en: Develop better features.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发更好的特征。
- en: Reduce the capacity of the model.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少模型的容量。
- en: Add weight regularization (for smaller models).
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加权重正则化（适用于较小的模型）。
- en: Add dropout.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加辍学。
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'The purpose of a machine learning model is to *generalize*: to perform accurately
    on never-before-seen inputs. It’s harder than it seems.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习模型的目的是*泛化*：在以前未见过的输入上准确执行。这比看起来更难。
- en: A deep neural network achieves generalization by learning a parametric model
    that can successfully *interpolate* between training samples—such a model can
    be said to have learned the “latent manifold” of the training data. This is why
    deep learning models can only make sense of inputs that are very close to what
    they’ve seen during training.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度神经网络通过学习一个能够成功*插值*训练样本之间的参数模型来实现泛化——这样的模型可以说已经学会了训练数据的“潜在流形”。这就是为什么深度学习模型只能理解与训练时非常接近的输入。
- en: 'The fundamental problem in machine learning is *the tension between optimization
    and generalization*: to attain generalization, you must first achieve a good fit
    to the training data, but improving your model’s fit to the training data will
    inevitably start hurting generalization after a while. Every single deep learning
    best practice deals with managing this tension.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习中的基本问题是*优化和泛化之间的紧张关系*：要实现泛化，您必须首先对训练数据进行良好拟合，但随着时间的推移，改进模型对训练数据的拟合将不可避免地开始损害泛化。每一个深度学习最佳实践都涉及管理这种紧张关系。
- en: The ability of deep learning models to generalize comes from the fact that they
    manage to learn to approximate the *latent manifold* of their data, and can thus
    make sense of new inputs via interpolation.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习模型泛化的能力来自于它们设法学习逼近其数据的*潜在流形*，因此可以通过插值理解新的输入。
- en: It’s essential to be able to accurately evaluate the generalization power of
    your model while you’re developing it. You have at your disposal an array of evaluation
    methods, from simple holdout validation to K-fold cross-validation and iterated
    K-fold cross-validation with shuffling. Remember to always keep a completely separate
    test set for final model evaluation, since information leaks from your validation
    data to your model may have occurred.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发模型时，准确评估模型的泛化能力至关重要。您可以使用各种评估方法，从简单的留出验证到K折交叉验证和带有洗牌的迭代K折交叉验证。请记住，始终保留一个完全独立的测试集用于最终模型评估，因为您的验证数据可能会泄漏到模型中。
- en: When you start working on a model, your goal is first to achieve a model that
    has some generalization power and that can overfit. Best practices for doing this
    include tuning your learning rate and batch size, leveraging better architecture
    priors, increasing model capacity, or simply training longer.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您开始处理模型时，您的目标首先是实现具有一定泛化能力且可能过拟合的模型。实现此目标的最佳实践包括调整学习率和批量大小，利用更好的架构先验，增加模型容量，或者简单地延长训练时间。
- en: As your model starts overfitting, your goal switches to improving generalization
    through *model regularization*. You can reduce your model’s capacity, add dropout
    or weight regularization, and use early stopping. And naturally, a larger or better
    dataset is always the number one way to help a model generalize.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您的模型开始过拟合时，您的目标转为通过*模型正则化*来改善泛化。您可以减少模型的容量，添加辍学或权重正则化，并使用提前停止。自然地，更大或更好的数据集始终是帮助模型泛化的首要方法。
- en: '* * *'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[¹](../Text/05.htm#Id-1012190) Mark Twain even called it “the most delicious
    fruit known to men.”'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[¹](../Text/05.htm#Id-1012190) 马克·吐温甚至称之为“人类所知最美味的水果”。'
