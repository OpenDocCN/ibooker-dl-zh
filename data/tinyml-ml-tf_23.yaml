- en: Appendix B. Capturing Audio on Arduino
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 在Arduino上捕获音频
- en: The following text walks through the audio capture code from the wake-word application
    in [Chapter 7](ch07.xhtml#chapter_speech_wake_word_example). Since it’s not directly
    related to machine learning, it’s provided as an appendix.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文本将从[第7章](ch07.xhtml#chapter_speech_wake_word_example)中唤醒词应用程序的音频捕获代码中走过。由于它与机器学习没有直接关系，所以作为附录提供。
- en: The Arduino Nano 33 BLE Sense has an on-board microphone. To receive audio data
    from the microphone, we can register a callback function that is called when there
    is a chunk of new audio data ready.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Nano 33 BLE Sense具有内置麦克风。要从麦克风接收音频数据，我们可以注册一个回调函数，当有一块新的音频数据准备好时就会调用它。
- en: Each time this happens, we’ll write the chunk of new data to a *buffer* that
    stores a reserve of data. Because audio data takes up a lot of memory, the buffer
    has room for only a set amount of data. This data is overwritten when the buffer
    becomes full.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每次发生这种情况，我们将新数据块写入存储数据储备的*缓冲区*中。由于音频数据占用大量内存，缓冲区只能容纳一定量的数据。当缓冲区变满时，这些数据将被覆盖。
- en: Whenever our program is ready to run inference, it can read the last second’s
    worth of data from this buffer. As long as new data keeps coming in faster than
    we need to access it, there’ll always be enough new data in the buffer to preprocess
    and feed into our model.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们的程序准备好运行推断时，它可以从该缓冲区中读取最近一秒钟的数据。只要新数据持续进入得比我们需要访问的快，缓冲区中总是会有足够的新数据进行预处理并馈入我们的模型。
- en: Each cycle of preprocessing and inference is complex, and it takes some time
    to complete. Because of this, we’ll only be able to run inference a few times
    per second on an Arduino. This means that it will be easy for our buffer to stay
    full.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每个预处理和推断周期都很复杂，需要一些时间来完成。因此，在Arduino上我们每秒只能运行几次推断。这意味着我们的缓冲区很容易保持满状态。
- en: 'As we saw in [Chapter 7](ch07.xhtml#chapter_speech_wake_word_example), *audio_provider.h*
    implements these two functions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第7章](ch07.xhtml#chapter_speech_wake_word_example)中看到的，*audio_provider.h*实现了这两个函数：
- en: '`GetAudioSamples()`, which provides a pointer to a chunk of raw audio data'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetAudioSamples()`，提供指向一块原始音频数据的指针'
- en: '`LatestAudioTimestamp()`, which returns the timestamp of the most recently
    captured audio'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LatestAudioTimestamp()`，返回最近捕获音频的时间戳'
- en: The code that implements these for Arduino is located in [*arduino/audio_provider.cc*](https://oreil.ly/Bfh4v).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些功能的Arduino代码位于[*arduino/audio_provider.cc*](https://oreil.ly/Bfh4v)中。
- en: 'In the first part, we pull in some dependencies. The *PDM.h* library defines
    the API that we’ll use to get data from the microphone. The file *micro_model_settings.h*
    contains constants related to our model’s data requirements that will help us
    provide audio in the correct format:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分中，我们引入了一些依赖项。*PDM.h*库定义了我们将用来从麦克风获取数据的API。文件*micro_model_settings.h*包含了与我们模型数据需求相关的常量，这将帮助我们以正确的格式提供音频数据。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next chunk of code is where we set up some important variables:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码块是设置一些重要变量的地方：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Boolean `g_is_audio_initialized` is what we’ll use to track whether the
    microphone has started capturing audio. Our audio capture buffer is defined by
    `g_audio_capture_buffer` and is sized to be 16 times the size of `DEFAULT_PDM_BUFFER_SIZE`,
    which is a constant defined in *PDM.h* that represents the amount of audio we
    receive from the microphone each time the callback is called. Having a nice big
    buffer means that we’re unlikely to run out of data if the program slows down
    for some reason.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值`g_is_audio_initialized`用于跟踪麦克风是否已开始捕获音频。我们的音频捕获缓冲区由`g_audio_capture_buffer`定义，大小为`DEFAULT_PDM_BUFFER_SIZE`的16倍，这是在*PDM.h*中定义的一个常量，表示每次调用回调函数时从麦克风接收的音频量。拥有一个很大的缓冲区意味着如果程序因某种原因变慢，我们不太可能耗尽数据。
- en: In addition to the audio capture buffer, we also keep a buffer of output audio,
    `g_audio_output_buffer`, that we’ll return a pointer to when `GetAudioSamples()`
    is called. It’s the length of `kMaxAudioSampleSize`, which is a constant from
    *micro_model_settings.h* that defines the number of 16-bit audio samples our preprocessing
    code can handle at once.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了音频捕获缓冲区，我们还保留一个输出音频缓冲区`g_audio_output_buffer`，当调用`GetAudioSamples()`时，我们将返回一个指向它的指针。它的长度是`kMaxAudioSampleSize`，这是来自*micro_model_settings.h*的一个常量，定义了我们的预处理代码一次可以处理的16位音频样本的数量。
- en: Finally, we use `g_latest_audio_timestamp` to keep track of the time represented
    by our most recent audio sample. This won’t match up with the time on your wristwatch;
    it’s just the number of milliseconds relative to when audio capture began. The
    variable is declared as `volatile`, which means the processor shouldn’t attempt
    to cache its value. We’ll see why later on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`g_latest_audio_timestamp`来跟踪我们最新音频样本所代表的时间。这不会与您手表上的时间匹配；它只是相对于音频捕获开始时的毫秒数。该变量声明为`volatile`，这意味着处理器不应尝试缓存其值。稍后我们会看到原因。
- en: 'After setting up these variables, we define the callback function that will
    be called every time there’s new audio data available. Here it is in its entirety:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 设置这些变量后，我们定义回调函数，每当有新的音频数据可用时就会调用它。以下是完整的函数：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This function is a bit complicated, so we’ll walk through it in chunks. Its
    goal is to determine the correct index in the audio capture buffer to write this
    new data to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数有点复杂，所以我们将分块解释。它的目标是确定正确的索引，将这些新数据写入音频捕获缓冲区。
- en: 'First, we figure out how much new data we’ll receive each time the callback
    is called. We use that to determine a number in milliseconds that represents the
    time of the most recent audio sample in the buffer:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确定每次调用回调函数时将接收多少新数据。我们使用这个数据来确定一个以毫秒表示缓冲区中最近音频样本的时间的数字：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The number of audio samples per second is `kAudioSampleFrequency` (this constant
    is defined in *micro_model_settings.h*). We divide this by 1,000 to get the number
    of samples per millisecond.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每秒的音频样本数是`kAudioSampleFrequency`（这个常量在*micro_model_settings.h*中定义）。我们将这个数除以1,000得到每毫秒的样本数。
- en: 'Next, we divide the number of samples per callback (`number_of_samples`) by
    the samples per millisecond to obtain the number of milliseconds’ worth of data
    we obtain each callback:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将每个回调的样本数（`number_of_samples`）除以每毫秒的样本数以获取每个回调获得的数据的毫秒数：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We then add this to the timestamp of our previous most recent audio sample,
    `g_latest_audio_timestamp`, to obtain the timestamp of the most recent new audio
    sample.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将其添加到我们先前最近音频样本的时间戳`g_latest_audio_timestamp`，以获取最新新音频样本的时间戳。
- en: 'After we have this number, we can use it to obtain the index of the most recent
    sample *in the history of all samples*. To do this, we multiply the timestamp
    of our previous most recent audio sample by the number of samples per millisecond:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了这个数字后，我们可以使用它来获取*所有样本历史记录*中最近样本的索引。为此，我们将先前最近音频样本的时间戳乘以每毫秒的样本数：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our buffer doesn’t have room to store every sample ever captured, though. Instead,
    it has room for 16 times the `DEFAULT_PDM_BUFFER_SIZE`. As soon as we have more
    data than that, we start overwriting the buffer with new data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的缓冲区没有足够的空间来存储每个捕获的样本。相反，它有16倍`DEFAULT_PDM_BUFFER_SIZE`的空间。一旦数据超过这个限制，我们就开始用新数据覆盖缓冲区。
- en: 'We now have the index of our new samples *in the history of all samples*. Next,
    we need to convert this into theh samples’ proper index within our actual buffer.
    To do this, we can divide our history index by the buffer length and get the remainder.
    This is done using the modulo operator (`%`):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了我们新样本在*所有样本历史记录*中的索引。接下来，我们需要将其转换为实际缓冲区内样本的正确索引。为此，我们可以通过缓冲区长度除以历史索引并获取余数。这是使用模运算符（`%`）完成的：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Because the buffer’s size, `kAudioCaptureBufferSize`, is a multiple of `DEFAULT_PDM_BUFFER_SIZE`,
    the new data will always fit neatly into the buffer. The modulo operator will
    return the index within the buffer where the new data should begin.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因为缓冲区的大小`kAudioCaptureBufferSize`是`DEFAULT_PDM_BUFFER_SIZE`的倍数，新数据将始终完全适合缓冲区。模运算符将返回新数据应开始的缓冲区内的索引。
- en: 'Next, we use the `PDM.read()` method to read the latest audio into the audio
    capture buffer:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`PDM.read()`方法将最新音频读入音频捕获缓冲区：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first argument accepts a pointer to a location in memory that the data should
    be written to. The variable `g_audio_capture_buffer` is a pointer to the address
    in memory where the audio capture buffer starts. By adding `capture_index` to
    this location, we can calculate the correct spot in memory to write our new data.
    The second argument defines how much data should be read, and we go for the maximum,
    `DEFAULT_PDM_BUFFER_SIZE`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数接受一个指向数据应写入的内存位置的指针。变量`g_audio_capture_buffer`是指向音频捕获缓冲区起始地址的指针。通过将`capture_index`添加到此位置，我们可以计算出要写入新数据的内存中的正确位置。第二个参数定义应读取多少数据，我们选择最大值`DEFAULT_PDM_BUFFER_SIZE`。
- en: 'Finally, we update `g_latest_audio_timestamp`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们更新`g_latest_audio_timestamp`：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will be exposed to other parts of the program via the `LatestAudioTimestamp()`
    method, letting them know when new data becomes available. Because `g_latest_audio_timestamp`
    is declared as `volatile`, its value will be looked up from memory every time
    it is accessed. This is important, because otherwise the variable would be cached
    by the processor. Because its value is set in a callback, the processor would
    not know to refresh the cached value, and any code accessing it would not receive
    its current value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过`LatestAudioTimestamp()`方法暴露给程序的其他部分，让它们知道何时有新数据可用。因为`g_latest_audio_timestamp`声明为`volatile`，每次访问时其值将从内存中查找。这很重要，否则变量将被处理器缓存。因为其值在回调中设置，处理器不会知道要刷新缓存的值，任何访问它的代码都不会收到其当前值。
- en: 'You might be wondering what makes `CaptureSamples()` act as a callback function.
    How does it know when new audio is available? This, among other things, is handled
    in the next part of our code, which is a function that initiates audio capture:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道是什么使`CaptureSamples()`充当回调函数。它如何知道何时有新音频可用？这是我们代码的下一部分处理的，这部分是启动音频捕获的函数：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function will be called the first time someone calls `GetAudioSamples()`.
    It first uses the `PDM` library to hook up the `CaptureSamples()` callback, by
    calling `PDM.onReceive()`. Next, `PDM.begin()` is called with two arguments. The
    first argument indicates how many channels of audio to record; we only want mono
    audio, so we specify `1`. The second argument specifies how many samples we want
    to receive per second.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次有人调用`GetAudioSamples()`时将调用此函数。它首先使用`PDM`库通过调用`PDM.onReceive()`来连接`CaptureSamples()`回调。接下来，使用两个参数调用`PDM.begin()`。第一个参数指示要记录多少个音频通道；我们只需要单声道音频，因此指定`1`。第二个参数指定每秒要接收多少样本。
- en: Next, `PDM.setGain()` is used to configure the *gain*, which defines how much
    the microphone’s audio should be amplified. We specify a gain of `20`, which was
    chosen after some experimentation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`PDM.setGain()`来配置*增益*，定义麦克风音频应放大多少。我们指定增益为`20`，这是在一些实验之后选择的。
- en: Finally, we loop until `g_latest_audio_timestamp` evaluates to true. Because
    it starts at `0`, this has the effect of blocking execution until some audio has
    been captured by the callback, since at that point `g_latest_audio_timestamp`
    will have a nonzero value.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们循环直到`g_latest_audio_timestamp`评估为true。因为它从`0`开始，这会阻止执行，直到回调捕获到一些音频，此时`g_latest_audio_timestamp`将具有非零值。
- en: 'The two functions we’ve just explored allow us to initiate the process of capturing
    audio and to store the captured audio in a buffer. The next function, `GetAudioSamples()`,
    provides a mechanism for other parts of our code (namely, the feature provider)
    to obtain audio data:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨的两个函数允许我们启动捕获音频的过程并将捕获的音频存储在缓冲区中。接下来的函数`GetAudioSamples()`为我们代码的其他部分（即特征提供者）提供了获取音频数据的机制：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The function is called with an `ErrorReporter` for writing logs, two variables
    that specify what audio we’re requesting (`start_ms` and `duration_ms`), and two
    pointers used to pass back the audio data (`audio_samples_size` and `audio_samples`).
    The first part of the function calls `InitAudioRecording()`. As we saw earlier,
    this blocks execution until the first samples of audio have arrived. We use the
    variable `g_is_audio_initialized` to ensure this setup code runs only once.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数被调用时带有一个用于写日志的`ErrorReporter`，两个指定我们请求的音频的变量（`start_ms`和`duration_ms`），以及用于传回音频数据的两个指针（`audio_samples_size`和`audio_samples`）。函数的第一部分调用`InitAudioRecording()`。正如我们之前看到的，这会阻塞执行，直到音频的第一个样本到达。我们使用变量`g_is_audio_initialized`来确保这个设置代码只运行一次。
- en: 'After this point, we can assume that there’s some audio stored in the capture
    buffer. Our task is to figure out where in the buffer the correct audio data is
    located. To do this, we first determine the index *in the history of all samples*
    of the first sample that we want:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点之后，我们可以假设捕获缓冲区中存储了一些音频。我们的任务是找出正确音频数据在缓冲区中的位置。为了做到这一点，我们首先确定我们想要的第一个样本在*所有样本历史*中的索引：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we determine the total number of samples that we want to grab:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们确定我们想要抓取的样本总数：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have this information, we can figure out where in our audio capture
    buffer to read. We’ll read the data in a loop:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这些信息，我们可以确定在我们的音频捕获缓冲区中从哪里读取。我们将在循环中读取数据：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Earlier, we saw how we can use the modulo operator to find the correct position
    within a buffer that only has enough space to hold the most recent samples. Here
    we use the same technique again—if we divide the current index *within the history
    of all samples* by the size of the audio capture buffer, `kAudioCaptureBufferSize`,
    the remainder will indicate that data’s position within the buffer. We can then
    use a simple assignment to read the data from the capture buffer to the output
    buffer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们看到如何使用取模运算符来找到在缓冲区内的正确位置，该缓冲区只有足够空间来容纳最近的样本。在这里，我们再次使用相同的技术——如果我们将当前索引*在所有样本历史中*除以音频捕获缓冲区的大小`kAudioCaptureBufferSize`，余数将指示数据在缓冲区中的位置。然后我们可以使用简单的赋值将数据从捕获缓冲区读取到输出缓冲区。
- en: 'Next, to get data out of this function, we use two pointers that were supplied
    as arguments. These are `audio_samples_size`, which points to the number of audio
    samples, and `audio_samples`, which points to the output buffer:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了从这个函数中获取数据，我们使用作为参数提供的两个指针。它们分别是`audio_samples_size`，指向音频样本的数量，和`audio_samples`，指向输出缓冲区：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We end the function by returning `kTfLiteOk`, letting the caller know that the
    operation was successful.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过返回`kTfLiteOk`来结束函数，让调用者知道操作成功了。
- en: 'Then, in the final part, we define `LatestAudioTimestamp()`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在最后部分，我们定义`LatestAudioTimestamp()`：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since this always returns the timestamp of the most recent audio, it can be
    checked in a loop by other parts of our code to determine if new audio data has
    arrived.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这总是返回最近音频的时间戳，其他部分的代码可以在循环中检查它，以确定是否有新的音频数据到达。
- en: That’s all for our audio provider! We’ve now ensured that our feature provider
    has a steady supply of fresh audio samples.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的音频提供程序的全部内容！我们现在确保我们的特征提供程序有稳定的新鲜音频样本供应。
