["```py\nSite\n\u251c\u2500\u2500\u2500 Example Folder\n\u251c\u2500\u2500\u2500 index.html\n\u251c\u2500\u2500\u2500 Model Folder\n\u2502   \u251c\u2500\u2500\u2500 model.json\n\u2502   \u2514\u2500\u2500\u2500 group1-shard1of3\n\u2502   \u2514\u2500\u2500\u2500 group1-shard2of3\n\u2502   \u2514\u2500\u2500\u2500 group1-shard3of3\n...\n```", "```py\ntf.ready().then(()=>{![1](assets/1.png)constmodelPath=\"model/ttt_model.json\"![2](assets/2.png)tf.tidy(()=>{tf.loadLayersModel(modelPath).then(model=>{![3](assets/3.png)// Three board states\nconstemptyBoard=tf.zeros([9])![4](assets/4.png)constbetterBlockMe=tf.tensor([-1,0,0,1,1,-1,0,0,-1])![5](assets/5.png)constgoForTheKill=tf.tensor([1,0,1,0,-1,-1,-1,0,1])![6](assets/6.png)// Stack states into a shape [3, 9]\nconstmatches=tf.stack([emptyBoard,betterBlockMe,goForTheKill])![7](assets/7.png)constresult=model.predict(matches)![8](assets/8.png)// Log the results\nresult.reshape([3,3,3]).print()![9](assets/9.png)})})})\n```", "```py\n[\n  [0.2287459, 0.0000143, 0.2659601],\n  [0.0000982, 0.0041204, 0.0001773],\n  [0.2301052, 0.0000206, 0.270758 ]\n],\n```", "```py\n[\n  [0.0011957, 0.0032045, 0.9908957],\n  [0.000263 , 0.0006491, 0.0000799],\n  [0.0010194, 0.0002893, 0.0024035],\n],\n```", "```py\n[\n  [0.0000056, 0.9867876, 0.0000028],\n  [0.0003809, 0.0001524, 0.0011258],\n  [0.0000328, 0.0114983, 0.0000139]\n],\n```", "```py\n\ntf.ready().then(()=>{constmodelPath=\"https://tfhub.dev/google/tfjs-model/imagenet/inception_v3/classification/3\n    /default/1\";![1](assets/1.png)tf.tidy(()=>{tf.loadGraphModel(modelPath,{fromTFHub: true}).then((model)=>{![2](assets/2.png)constmysteryImage=document.getElementById(\"mystery\");constmyTensor=tf.browser.fromPixels(mysteryImage);// Inception v3 expects an image resized to 299x299\nconstreadyfied=tf.image.resizeBilinear(myTensor,[299,299],true)![3](assets/3.png).div(255)![4](assets/4.png).reshape([1,299,299,3]);![5](assets/5.png)constresult=model.predict(readyfied);![6](assets/6.png)result.print();![7](assets/7.png)const{values,indices}=tf.topk(result,3);![8](assets/8.png)indices.print();![9](assets/9.png)// Let's hear those winners\nconstwinners=indices.dataSync();console.log(`![10](assets/10.png) First place ${INCEPTION_CLASSES[winners[0]]},  Second place ${INCEPTION_CLASSES[winners[1]]},  Third place ${INCEPTION_CLASSES[winners[2]]}`);});});});\n```", "```py\nconst petImage = document.getElementById(\"pet\");\nconst myTensor = tf.browser.fromPixels(petImage);\n// Model expects 256x256 0-1 value 3D tensor\nconst readyfied = tf.image\n  .resizeNearestNeighbor(myTensor, [256, 256], true)\n  .div(255)\n  .reshape([1, 256, 256, 3]);\n\nconst result = model.predict(readyfied);\n// Model returns top left and bottom right\nresult.print();\n```", "```py\n<divstyle=\"position: relative; height: 80vh\">![1](assets/1.png)<imgid=\"pet\"src=\"/dog1.jpg\"height=\"100%\"/><canvasid=\"detection\"style=\"position: absolute; left: 0;\"><canvas/>![2](assets/2.png)</div>\n```", "```py\n// Draw box on canvas constdetection=document.getElementById(\"detection\");constimgWidth=petImage.width;constimgHeight=petImage.height;detection.width=imgWidth;![1](assets/1.png)detection.height=imgHeight;constbox=result.dataSync();![2](assets/2.png)conststartX=box[0]*imgWidth;![3](assets/3.png)conststartY=box[1]*imgHeight;constwidth=(box[2]-box[0])*imgWidth;![4](assets/4.png)constheight=(box[3]-box[1])*imgHeight;constctx=detection.getContext(\"2d\");ctx.strokeStyle=\"#0F0\";ctx.lineWidth=4;ctx.strokeRect(startX,startY,width,height);![5](assets/5.png)\n```"]