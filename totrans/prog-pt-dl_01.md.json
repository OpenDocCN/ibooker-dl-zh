["```py\n\n    ssh-Llocalhost:8888:localhost:8888\\ -i*`your``.pem``filename`*ubuntu@*`your``instance``DNS`*\n    ```", "```py\n    gcloud compute ssh _INSTANCE_NAME_ -- -L 8080:localhost:8080\n    ```", "```py\nsudo rpm -i cuda-repo-rhel7-10-0local-10.0.130-410.48-1.0-1.x86_64.rpm\nsudo yum clean all\nsudo yum install cuda\n```", "```py\nsudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb\nsudo apt-key add /var/cuda-repo-<version>/7fa2af80.pub\nsudo apt-get update\nsudo apt-get install cuda\n```", "```py\nconda install pytorch torchvision -c pytorch\n```", "```py\njupyter notebook\n```", "```py\nimport torch\nprint(torch.cuda.is_available())\nprint(torch.rand(2,2))\n```", "```py\nTrue\n 0.6040  0.6647\n 0.9286  0.4210\n[torch.FloatTensor of size 2x2]\n```", "```py\nx = torch.tensor([[0,0,1],[1,1,1],[0,0,0]])\nx\n>tensor([[0, 0, 1],\n    [1, 1, 1],\n    [0, 0, 0]])\n```", "```py\nx[0][0] = 5\n>tensor([[5, 0, 1],\n    [1, 1, 1],\n    [0, 0, 0]])\n```", "```py\ntorch.zeros(2,2)\n> tensor([[0., 0.],\n    [0., 0.]])\n```", "```py\ntensor.ones(1,2) + tensor.ones(1,2)\n> tensor([[2., 2.]])\n```", "```py\ntorch.rand(1).item()\n> 0.34106671810150146\n```", "```py\ncpu_tensor = tensor.rand(2)\ncpu_tensor.device\n> device(type='cpu')\n\ngpu_tensor = cpu_tensor.to(\"cuda\")\ngpu_tensor.device\n> device(type='cuda', index=0)\n```", "```py\ntorch.rand(2,2).max()\n> tensor(0.4726)\ntorch.rand(2,2).max().item()\n> 0.8649941086769104\n```", "```py\nlong_tensor = torch.tensor([[0,0,1],[1,1,1],[0,0,0]])\nlong_tensor.type()\n> 'torch.LongTensor'\nfloat_tensor = torch.tensor([[0,0,1],[1,1,1],[0,0,0]]).to(dtype=torch.float32)\nfloat_tensor.type()\n> 'torch.FloatTensor'\n```", "```py\nrandom_tensor = torch.rand(2,2)\nrandom_tensor.log2()\n>tensor([[-1.9001, -1.5013],\n        [-1.8836, -0.5320]])\nrandom_tensor.log2_()\n> tensor([[-1.9001, -1.5013],\n        [-1.8836, -0.5320]])\n```", "```py\nflat_tensor = torch.rand(784)\nviewed_tensor = flat_tensor.view(1,28,28)\nviewed_tensor.shape\n> torch.Size([1, 28, 28])\nreshaped_tensor = flat_tensor.reshape(1,28,28)\nreshaped_tensor.shape\n> torch.Size([1, 28, 28])\n```", "```py\nRuntimeError Traceback (most recent call last)\n<ipython-input-26-774c70ba5c08> in <module>()\n----> 1 flat_tensor.reshape(3,28,28)\n\nRuntimeError: shape '[3, 28, 28]' is invalid for input of size 784\n```", "```py\nhwc_tensor = torch.rand(640, 480, 3)\nchw_tensor = hwc_tensor.permute(2,0,1)\nchw_tensor.shape\n> torch.Size([3, 640, 480])\n```", "```py\nThe size of tensor a (2) must match the size of\ntensor b (3) at non-singleton dimension 1\n```"]