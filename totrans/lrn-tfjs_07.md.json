["```py\ntf.ready().then(()=>{constmodelPath=\"https://tfhub.dev/tensorflow/tfjs-model/ssd_mobilenet_v2/1/default/1\";![1](assets/1.png)tf.tidy(()=>{tf.loadGraphModel(modelPath,{fromTFHub: true}).then((model)=>{constmysteryImage=document.getElementById(\"mystery\");constmyTensor=tf.browser.fromPixels(mysteryImage);// SSD Mobilenet batch of 1\nconstsingleBatch=tf.expandDims(myTensor,0);![2](assets/2.png)model.executeAsync(singleBatch).then((result)=>{console.log(\"First\",result[0].shape);![3](assets/3.png)result[0].print();console.log(\"Second\",result[1].shape);![4](assets/4.png)result[1].print();});});});});\n```", "```py\nconst results = await model.executeAsync(readyfied);\nconst boxes = await results[1].squeeze().array();\n\n// Prep Canvas\nconst detection = document.getElementById(\"detection\");\nconst ctx = detection.getContext(\"2d\");\nconst imgWidth = mysteryImage.width;\nconst imgHeight = mysteryImage.height;\ndetection.width = imgWidth;\ndetection.height = imgHeight;\n\nboxes.forEach((box, idx) => {\n  ctx.strokeStyle = \"#0F0\";\n  ctx.lineWidth = 1;\n  const startY = box[0] * imgHeight;\n  const startX = box[1] * imgWidth;\n  const height = (box[2] - box[0]) * imgHeight;\n  const width = (box[3] - box[1]) * imgWidth;\n  ctx.strokeRect(startX, startY, width, height);\n});\n```", "```py\nconst prominentDetection = tf.topk(results[0]);\n// Print it to be sure\nprominentDetection.indices.print()\nprominentDetection.values.print()\n```", "```py\nconst nmsDetections = await tf.image.nonMaxSuppressionWithScoreAsync(\n  justBoxes, // shape [numBoxes, 4]\n  justValues, // shape [numBoxes]\n  maxBoxes, // Stop making boxes when this number is hit\n  iouThreshold, // Allowed overlap value 0 to 1\n  detectionThreshold, // Minimum detection score allowed\n  1 // 0 is normal NMS, 1 is max Soft-NMS\n);\n```", "```py\nconstchosen=awaitnmsDetections.selectedIndices.data();![1](assets/1.png)chosen.forEach((detection)=>{ctx.strokeStyle=\"#0F0\";ctx.lineWidth=4;constdetectedIndex=maxIndices[detection];![2](assets/2.png)constdetectedClass=CLASSES[detectedIndex];![3](assets/3.png)constdetectedScore=scores[detection];constdBox=boxes[detection];console.log(detectedClass,detectedScore);![4](assets/4.png)// No negative values for start positions\nconststartY=dBox[0]>0?dBox[0]*imgHeight : 0;![5](assets/5.png)conststartX=dBox[1]>0?dBox[1]*imgWidth : 0;constheight=(dBox[2]-dBox[0])*imgHeight;constwidth=(dBox[3]-dBox[1])*imgWidth;ctx.strokeRect(startX,startY,width,height);});\n```", "```py\n// Draw the label background. ctx.fillStyle=\"#0B0\";ctx.font=\"16px sans-serif\";![1](assets/1.png)ctx.textBaseline=\"top\";![2](assets/2.png)consttextHeight=16;consttextPad=4;![3](assets/3.png)constlabel=`${detectedClass}${Math.round(detectedScore*100)}%`;consttextWidth=ctx.measureText(label).width;ctx.fillRect(![4](assets/4.png)startX,startY,textWidth+textPad,textHeight+textPad);// Draw the text last to ensure it's on top. ctx.fillStyle=\"#000000\";![5](assets/5.png)ctx.fillText(label,startX,startY);![6](assets/6.png)\n```", "```py\nchosen.forEach((detection)=>{ctx.strokeStyle=\"#0F0\";ctx.lineWidth=4;ctx.globalCompositeOperation='destination-over';![1](assets/1.png)constdetectedIndex=maxIndices[detection];constdetectedClass=CLASSES[detectedIndex];constdetectedScore=scores[detection];constdBox=boxes[detection];// No negative values for start positions\nconststartY=dBox[0]>0?dBox[0]*imgHeight : 0;conststartX=dBox[1]>0?dBox[1]*imgWidth : 0;constheight=(dBox[2]-dBox[0])*imgHeight;constwidth=(dBox[3]-dBox[1])*imgWidth;ctx.strokeRect(startX,startY,width,height);// Draw the label background.\nctx.globalCompositeOperation='source-over';![2](assets/2.png)ctx.fillStyle=\"#0B0\";consttextHeight=16;consttextPad=4;constlabel=`${detectedClass}${Math.round(detectedScore*100)}%`;consttextWidth=ctx.measureText(label).width;ctx.fillRect(startX,startY,textWidth+textPad,textHeight+textPad);// Draw the text last to ensure it's on top.\nctx.fillStyle=\"#000000\";ctx.fillText(label,startX,startY);});\n```", "```py\nasyncfunctiondoStuff() {try{constmodel=awaitloadModel()![1](assets/1.png)constmysteryVideo=document.getElementById('mystery')![2](assets/2.png)constcamDetails=awaitsetupWebcam(mysteryVideo)![3](assets/3.png)performDetections(model,mysteryVideo,camDetails)![4](assets/4.png)}catch(e){console.error(e)![5](assets/5.png)}}\n```", "```py\n<img id=\"mystery\" src=\"/dinner.jpg\" height=\"100%\" />\n```", "```py\n<video id=\"mystery\" height=\"100%\" autoplay></video>\n```", "```py\nasyncfunctionsetupWebcam(videoRef){if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){constwebcamStream=awaitnavigator.mediaDevices.getUserMedia({![1](assets/1.png)audio: false,video:{facingMode:'user',},})if('srcObject'invideoRef){![2](assets/2.png)videoRef.srcObject=webcamStream}else{videoRef.src=window.URL.createObjectURL(webcamStream)}returnnewPromise((resolve,_)=>{![3](assets/3.png)videoRef.onloadedmetadata=()=>{![4](assets/4.png)// Prep Canvas\nconstdetection=document.getElementById('detection')constctx=detection.getContext('2d')constimgWidth=videoRef.clientWidth![5](assets/5.png)constimgHeight=videoRef.clientHeightdetection.width=imgWidthdetection.height=imgHeightctx.font='16px sans-serif'ctx.textBaseline='top'resolve([ctx,imgHeight,imgWidth])![6](assets/6.png)}})}else{alert('No webcam - sorry!')}}\n```", "```py\nctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n```", "```py\n// Loop forever\nrequestAnimationFrame(() => {\n  performDetections(model, videoRef, camDetails)\n})\n```", "```py\n  const t = tf.tensor([[\n    [1, 2, 3, 4, 5],\n    [1.1, 2.1, 3.1, 4.1, 5.1],\n    [1.2, 2.2, 3.2, 4.2, 5.2],\n    [1.2, 12.2, 3.2, 4.2, 5.2],\n    [1.3, 2.3, 3.3, 4.3, 5.3],\n    [1, 1, 1, 1, 1]\n  ]])\n\n  // Get the top-three most confident predictions.\n```"]