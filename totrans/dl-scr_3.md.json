["```py\nclass Operation(object):\n    '''\n Base class for an \"operation\" in a neural network.\n '''\n    def __init__(self):\n        pass\n\n    def forward(self, input_: ndarray):\n        '''\n Stores input in the self._input instance variable\n Calls the self._output() function.\n '''\n        self.input_ = input_\n\n        self.output = self._output()\n\n        return self.output\n\n    def backward(self, output_grad: ndarray) -> ndarray:\n        '''\n Calls the self._input_grad() function.\n Checks that the appropriate shapes match.\n '''\n        assert_same_shape(self.output, output_grad)\n\n        self.input_grad = self._input_grad(output_grad)\n\n        assert_same_shape(self.input_, self.input_grad)\n        return self.input_grad\n\n    def _output(self) -> ndarray:\n        '''\n The _output method must be defined for each Operation.\n '''\n        raise NotImplementedError()\n\n    def _input_grad(self, output_grad: ndarray) -> ndarray:\n        '''\n The _input_grad method must be defined for each Operation.\n '''\n        raise NotImplementedError()\n```", "```py\nclass ParamOperation(Operation):\n    '''\n An Operation with parameters.\n '''\n\n    def __init__(self, param: ndarray) -> ndarray:\n        '''\n The ParamOperation method\n '''\n        super().__init__()\n        self.param = param\n\n    def backward(self, output_grad: ndarray) -> ndarray:\n        '''\n Calls self._input_grad and self._param_grad.\n Checks appropriate shapes.\n '''\n\n        assert_same_shape(self.output, output_grad)\n\n        self.input_grad = self._input_grad(output_grad)\n        self.param_grad = self._param_grad(output_grad)\n\n        assert_same_shape(self.input_, self.input_grad)\n        assert_same_shape(self.param, self.param_grad)\n\n        return self.input_grad\n\n    def _param_grad(self, output_grad: ndarray) -> ndarray:\n        '''\n Every subclass of ParamOperation must implement _param_grad.\n '''\n        raise NotImplementedError()\n```", "```py\nclass WeightMultiply(ParamOperation):\n    '''\n Weight multiplication operation for a neural network.\n '''\n\n    def __init__(self, W: ndarray):\n        '''\n Initialize Operation with self.param = W.\n '''\n        super().__init__(W)\n\n    def _output(self) -> ndarray:\n        '''\n Compute output.\n '''\n        return np.dot(self.input_, self.param)\n\n    def _input_grad(self, output_grad: ndarray) -> ndarray:\n        '''\n Compute input gradient.\n '''\n        return np.dot(output_grad, np.transpose(self.param, (1, 0)))\n\n    def _param_grad(self, output_grad: ndarray)  -> ndarray:\n        '''\n Compute parameter gradient.\n '''\n        return np.dot(np.transpose(self.input_, (1, 0)), output_grad)\n```", "```py\nclass BiasAdd(ParamOperation):\n    '''\n Compute bias addition.\n '''\n\n    def __init__(self,\n                 B: ndarray):\n        '''\n Initialize Operation with self.param = B.\n Check appropriate shape.\n '''\n        assert B.shape[0] == 1\n\n        super().__init__(B)\n\n    def _output(self) -> ndarray:\n        '''\n Compute output.\n '''\n        return self.input_ + self.param\n\n    def _input_grad(self, output_grad: ndarray) -> ndarray:\n        '''\n Compute input gradient.\n '''\n        return np.ones_like(self.input_) * output_grad\n\n    def _param_grad(self, output_grad: ndarray) -> ndarray:\n        '''\n Compute parameter gradient.\n '''\n        param_grad = np.ones_like(self.param) * output_grad\n        return np.sum(param_grad, axis=0).reshape(1, param_grad.shape[1])\n```", "```py\nclass Sigmoid(Operation):\n    '''\n Sigmoid activation function.\n '''\n\n    def __init__(self) -> None:\n        '''Pass'''\n        super().__init__()\n\n    def _output(self) -> ndarray:\n        '''\n Compute output.\n '''\n        return 1.0/(1.0+np.exp(-1.0 * self.input_))\n\n    def _input_grad(self, output_grad: ndarray) -> ndarray:\n        '''\n Compute input gradient.\n '''\n        sigmoid_backward = self.output * (1.0 - self.output)\n        input_grad = sigmoid_backward * output_grad\n        return input_grad\n```", "```py\ninput_grad = <something> * output_grad\n```", "```py\nnp.dot(output_grad, np.transpose(self.param, (1, 0)))\n```", "```py\nclass Layer(object):\n    '''\n A \"layer\" of neurons in a neural network.\n '''\n\n def __init__(self,\n                 neurons: int):\n        '''\n The number of \"neurons\" roughly corresponds to the \"breadth\" of the\n layer\n '''\n        self.neurons = neurons\n        self.first = True\n        self.params: List[ndarray] = []\n        self.param_grads: List[ndarray] = []\n        self.operations: List[Operation] = []\n\n    def _setup_layer(self, num_in: int) -> None:\n        '''\n The _setup_layer function must be implemented for each layer.\n '''\n        raise NotImplementedError()\n\n    def forward(self, input_: ndarray) -> ndarray:\n        '''\n Passes input forward through a series of operations.\n '''\n        if self.first:\n            self._setup_layer(input_)\n            self.first = False\n\n        self.input_ = input_\n\n        for operation in self.operations:\n\n            input_ = operation.forward(input_)\n\n        self.output = input_\n\n        return self.output\n\n    def backward(self, output_grad: ndarray) -> ndarray:\n        '''\n Passes output_grad backward through a series of operations.\n Checks appropriate shapes.\n '''\n\n        assert_same_shape(self.output, output_grad)\n\n        for operation in reversed(self.operations):\n            output_grad = operation.backward(output_grad)\n\n        input_grad = output_grad\n\n        self._param_grads()\n\n        return input_grad\n\n    def _param_grads(self) -> ndarray:\n        '''\n Extracts the _param_grads from a layer's operations.\n '''\n\n        self.param_grads = []\n        for operation in self.operations:\n            if issubclass(operation.__class__, ParamOperation):\n                self.param_grads.append(operation.param_grad)\n\n    def _params(self) -> ndarray:\n        '''\n Extracts the _params from a layer's operations.\n '''\n\n        self.params = []\n        for operation in self.operations:\n            if issubclass(operation.__class__, ParamOperation):\n                self.params.append(operation.param)\n```", "```py\nclass Dense(Layer):\n    '''\n A fully connected layer that inherits from \"Layer.\"\n '''\n    def __init__(self,\n                 neurons: int,\n                 activation: Operation = Sigmoid()) -> None:\n        '''\n Requires an activation function upon initialization.\n '''\n        super().__init__(neurons)\n        self.activation = activation\n\n    def _setup_layer(self, input_: ndarray) -> None:\n        '''\n Defines the operations of a fully connected layer.\n '''\n        if self.seed:\n            np.random.seed(self.seed)\n\n        self.params = []\n\n        # weights\n        self.params.append(np.random.randn(input_.shape[1], self.neurons))\n\n        # bias\n        self.params.append(np.random.randn(1, self.neurons))\n\n        self.operations = [WeightMultiply(self.params[0]),\n                           BiasAdd(self.params[1]),\n                           self.activation]\n\n        return None\n```", "```py\nfor layer in self.layers:\n    X = layer.forward(X)\n\nreturn X\n```", "```py\nfor layer in reversed(self.layers):\n    grad = layer.backward(grad)\n```", "```py\nclass Loss(object):\n    '''\n The \"loss\" of a neural network.\n '''\n\n    def __init__(self):\n        '''Pass'''\n        pass\n\n    def forward(self, prediction: ndarray, target: ndarray) -> float:\n        '''\n Computes the actual loss value.\n '''\n        assert_same_shape(prediction, target)\n\n        self.prediction = prediction\n        self.target = target\n\n        loss_value = self._output()\n\n        return loss_value\n\n    def backward(self) -> ndarray:\n        '''\n Computes gradient of the loss value with respect to the input to the\n loss function.\n '''\n        self.input_grad = self._input_grad()\n\n        assert_same_shape(self.prediction, self.input_grad)\n\n        return self.input_grad\n\n    def _output(self) -> float:\n        '''\n Every subclass of \"Loss\" must implement the _output function.\n '''\n        raise NotImplementedError()\n\n    def _input_grad(self) -> ndarray:\n        '''\n Every subclass of \"Loss\" must implement the _input_grad function.\n '''\n        raise NotImplementedError()\n```", "```py\nclass MeanSquaredError(Loss):\n\n    def __init__(self)\n        '''Pass'''\n        super().__init__()\n\n    def _output(self) -> float:\n        '''\n Computes the per-observation squared error loss.\n '''\n        loss =\n            np.sum(np.power(self.prediction - self.target, 2)) /\n            self.prediction.shape[0]\n\n        return loss\n\n    def _input_grad(self) -> ndarray:\n        '''\n Computes the loss gradient with respect to the input for MSE loss.\n '''\n\n        return 2.0 * (self.prediction - self.target) / self.prediction.shape[0]\n```", "```py\nclass NeuralNetwork(object):\n    '''\n The class for a neural network.\n '''\n    def __init__(self, layers: List[Layer],\n                 loss: Loss,\n                 seed: float = 1)\n        '''\n Neural networks need layers, and a loss.\n '''\n        self.layers = layers\n        self.loss = loss\n        self.seed = seed\n        if seed:\n            for layer in self.layers:\n                setattr(layer, \"seed\", self.seed)\n\n    def forward(self, x_batch: ndarray) -> ndarray:\n        '''\n Passes data forward through a series of layers.\n '''\n        x_out = x_batch\n        for layer in self.layers:\n            x_out = layer.forward(x_out)\n\n        return x_out\n\n    def backward(self, loss_grad: ndarray) -> None:\n        '''\n Passes data backward through a series of layers.\n '''\n\n        grad = loss_grad\n        for layer in reversed(self.layers):\n            grad = layer.backward(grad)\n\n        return None\n\n    def train_batch(self,\n                    x_batch: ndarray,\n                    y_batch: ndarray) -> float:\n        '''\n Passes data forward through the layers.\n Computes the loss.\n Passes data backward through the layers.\n '''\n\n        predictions = self.forward(x_batch)\n\n        loss = self.loss.forward(predictions, y_batch)\n\n        self.backward(self.loss.backward())\n\n        return loss\n\n    def params(self):\n        '''\n Gets the parameters for the network.\n '''\n        for layer in self.layers:\n            yield from layer.params\n\n    def param_grads(self):\n        '''\n Gets the gradient of the loss with respect to the parameters for the\n network.\n '''\n        for layer in self.layers:\n            yield from layer.param_grads\n```", "```py\nlinear_regression = NeuralNetwork(\n    layers=[Dense(neurons = 1)],\n            loss = MeanSquaredError(),\n            learning_rate = 0.01\n            )\n\nneural_network = NeuralNetwork(\n    layers=[Dense(neurons=13,\n                  activation=Sigmoid()),\n            Dense(neurons=1,\n                  activation=Linear())],\n            loss = MeanSquaredError(),\n            learning_rate = 0.01\n            )\n```", "```py\n# pass X_batch forward and compute the loss\nforward_info, loss = forward_loss(X_batch, y_batch, weights)\n\n# compute the gradient of the loss with respect to each of the weights\nloss_grads = loss_gradients(forward_info, weights)\n\n# update the weights\nfor key in weights.keys():\n    weights[key] -= learning_rate * loss_grads[key]\n```", "```py\nneural_network.train_batch(X_batch, y_batch)\n```", "```py\nclass Optimizer(object):\n    '''\n Base class for a neural network optimizer.\n '''\n    def __init__(self,\n                 lr: float = 0.01):\n        '''\n Every optimizer must have an initial learning rate.\n '''\n        self.lr = lr\n\n    def step(self) -> None:\n        '''\n Every optimizer must implement the \"step\" function.\n '''\n        pass\n```", "```py\nclass SGD(Optimizer):\n    '''\n Stochastic gradient descent optimizer.\n '''\n    def __init__(self,\n                 lr: float = 0.01) -> None:\n        '''Pass'''\n        super().__init__(lr)\n\n    def step(self):\n        '''\n For each parameter, adjust in the appropriate direction, with the\n magnitude of the adjustment based on the learning rate.\n '''\n        for (param, param_grad) in zip(self.net.params(),\n                                       self.net.param_grads()):\n\n            param -= self.lr * param_grad\n```", "```py\nsetattr(self.optim, 'net', self.net)\n```", "```py\nclass Trainer(object):\n    '''\n Trains a neural network.\n '''\n    def __init__(self,\n                 net: NeuralNetwork,\n                 optim: Optimizer)\n        '''\n Requires a neural network and an optimizer in order for training to\n occur. Assign the neural network as an instance variable to the optimizer.\n '''\n        self.net = net\n        setattr(self.optim, 'net', self.net)\n\n    def fit(self, X_train: ndarray, y_train: ndarray,\n            X_test: ndarray, y_test: ndarray,\n            epochs: int=100,\n            eval_every: int=10,\n            batch_size: int=32,\n            seed: int = 1,\n            restart: bool = True) -> None:\n        '''\n Fits the neural network on the training data for a certain number of\n epochs. Every \"eval_every\" epochs, it evaluates the neural network on\n the testing data.\n '''\n        np.random.seed(seed)\n\n        if restart:\n            for layer in self.net.layers:\n                layer.first = True\n\n        for e in range(epochs):\n\n            X_train, y_train = permute_data(X_train, y_train)\n\n            batch_generator = self.generate_batches(X_train, y_train,\n                                                    batch_size)\n\n            for ii, (X_batch, y_batch) in enumerate(batch_generator):\n\n                self.net.train_batch(X_batch, y_batch)\n\n                self.optim.step()\n\n            if (e+1) % eval_every == 0:\n\n                test_preds = self.net.forward(X_test)\n\n                loss = self.net.loss.forward(test_preds, y_test)\n\n                print(f\"Validation loss after {e+1} epochs is {loss:.3f}\")\n```", "```py\noptimizer = SGD(lr=0.01)\ntrainer = Trainer(linear_regression, optimizer)\n\ntrainer.fit(X_train, y_train, X_test, y_test,\n       epochs = 50,\n       eval_every = 10,\n       seed=20190501);\n```", "```py\nValidation loss after 10 epochs is 30.295\nValidation loss after 20 epochs is 28.462\nValidation loss after 30 epochs is 26.299\nValidation loss after 40 epochs is 25.548\nValidation loss after 50 epochs is 25.092\n```", "```py\neval_regression_model(linear_regression, X_test, y_test)\n```", "```py\nMean absolute error: 3.52\n\nRoot mean squared error 5.01\n```", "```py\nValidation loss after 10 epochs is 27.434\nValidation loss after 20 epochs is 21.834\nValidation loss after 30 epochs is 18.915\nValidation loss after 40 epochs is 17.193\nValidation loss after 50 epochs is 16.214\n```", "```py\neval_regression_model(neural_network, X_test, y_test)\n```", "```py\nMean absolute error: 2.60\n\nRoot mean squared error 4.03\n```", "```py\ndeep_neural_network = NeuralNetwork(\n    layers=[Dense(neurons=13,\n                   activation=Sigmoid()),\n            Dense(neurons=13,\n                   activation=Sigmoid()),\n            Dense(neurons=1,\n                   activation=LinearAct())],\n    loss=MeanSquaredError(),\n    learning_rate=0.01\n)\n```", "```py\nValidation loss after 10 epochs is 44.134\nValidation loss after 20 epochs is 25.271\nValidation loss after 30 epochs is 22.341\nValidation loss after 40 epochs is 16.464\nValidation loss after 50 epochs is 14.604\n```", "```py\neval_regression_model(deep_neural_network, X_test, y_test)\n```", "```py\nMean absolute error: 2.45\n\nRoot mean squared error 3.82\n```"]