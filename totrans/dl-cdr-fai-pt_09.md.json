["```py\nfrom fastai.vision.all import *\npath = untar_data(URLs.PASCAL_2007)\n```", "```py\ndf = pd.read_csv(path/'train.csv')\ndf.head()\n```", "```py\ndblock = DataBlock()\n```", "```py\ndsets = dblock.datasets(df)\n```", "```py\ndsets.train[0]\n```", "```py\n(fname       008663.jpg\n labels      car person\n is_valid    False\n Name: 4346, dtype: object,\n fname       008663.jpg\n labels      car person\n is_valid    False\n Name: 4346, dtype: object)\n```", "```py\ndblock = DataBlock(get_x = lambda r: r['fname'], get_y = lambda r: r['labels'])\ndsets = dblock.datasets(df)\ndsets.train[0]\n```", "```py\n('005620.jpg', 'aeroplane')\n```", "```py\ndef get_x(r): return r['fname']\ndef get_y(r): return r['labels']\ndblock = DataBlock(get_x = get_x, get_y = get_y)\ndsets = dblock.datasets(df)\ndsets.train[0]\n```", "```py\n('002549.jpg', 'tvmonitor')\n```", "```py\ndef get_x(r): return path/'train'/r['fname']\ndef get_y(r): return r['labels'].split(' ')\ndblock = DataBlock(get_x = get_x, get_y = get_y)\ndsets = dblock.datasets(df)\ndsets.train[0]\n```", "```py\n(Path('/home/sgugger/.fastai/data/pascal_2007/train/008663.jpg'),\n ['car', 'person'])\n```", "```py\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   get_x = get_x, get_y = get_y)\ndsets = dblock.datasets(df)\ndsets.train[0]\n```", "```py\n(PILImage mode=RGB size=500x375,\n TensorMultiCategory([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n > 0., 0., 0., 0., 0., 0.]))\n```", "```py\nidxs = torch.where(dsets.train[0][1]==1.)[0]\ndsets.train.vocab[idxs]\n```", "```py\n(#1) ['dog']\n```", "```py\ndef splitter(df):\n    train = df.index[~df['is_valid']].tolist()\n    valid = df.index[df['is_valid']].tolist()\n    return train,valid\n\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   splitter=splitter,\n                   get_x=get_x,\n                   get_y=get_y)\n\ndsets = dblock.datasets(df)\ndsets.train[0]\n```", "```py\n(PILImage mode=RGB size=500x333,\n TensorMultiCategory([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,\n > 0., 0., 0., 0., 0., 0.]))\n```", "```py\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   splitter=splitter,\n                   get_x=get_x,\n                   get_y=get_y,\n                   item_tfms = RandomResizedCrop(128, min_scale=0.35))\ndls = dblock.dataloaders(df)\n```", "```py\ndls.show_batch(nrows=1, ncols=3)\n```", "```py\nlearn = cnn_learner(dls, resnet18)\n```", "```py\nx,y = dls.train.one_batch()\nactivs = learn.model(x)\nactivs.shape\n```", "```py\ntorch.Size([64, 20])\n```", "```py\nactivs[0]\n```", "```py\ntensor([ 2.0258, -1.3543,  1.4640,  1.7754, -1.2820, -5.8053,  3.6130,  0.7193,\n > -4.3683, -2.5001, -2.8373, -1.8037,  2.0122,  0.6189,  1.9729,  0.8999,\n > -2.6769, -0.3829,  1.2212,  1.6073],\n       device='cuda:0', grad_fn=<SelectBackward>)\n```", "```py\ndef binary_cross_entropy(inputs, targets):\n    inputs = inputs.sigmoid()\n    return -torch.where(targets==1, inputs, 1-inputs).log().mean()\n```", "```py\nloss_func = nn.BCEWithLogitsLoss()\nloss = loss_func(activs, y)\nloss\n```", "```py\ntensor(1.0082, device='cuda:5', grad_fn=<BinaryCrossEntropyWithLogitsBackward>)\n```", "```py\ndef accuracy(inp, targ, axis=-1):\n    \"Compute accuracy with `targ` when `pred` is bs * n_classes\"\n    pred = inp.argmax(dim=axis)\n    return (pred == targ).float().mean()\n```", "```py\ndef accuracy_multi(inp, targ, thresh=0.5, sigmoid=True):\n    \"Compute accuracy when `inp` and `targ` are the same size.\"\n    if sigmoid: inp = inp.sigmoid()\n    return ((inp>thresh)==targ.bool()).float().mean()\n```", "```py\ndef say_hello(name, say_what=\"Hello\"): return f\"{say_what} {name}.\"\nsay_hello('Jeremy'),say_hello('Jeremy', 'Ahoy!')\n```", "```py\n('Hello Jeremy.', 'Ahoy! Jeremy.')\n```", "```py\nf = partial(say_hello, say_what=\"Bonjour\")\nf(\"Jeremy\"),f(\"Sylvain\")\n```", "```py\n('Bonjour Jeremy.', 'Bonjour Sylvain.')\n```", "```py\nlearn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.fine_tune(3, base_lr=3e-3, freeze_epochs=4)\n```", "```py\nlearn.metrics = partial(accuracy_multi, thresh=0.1)\nlearn.validate()\n```", "```py\n(#2) [0.10436797887086868,0.93057781457901]\n```", "```py\nlearn.metrics = partial(accuracy_multi, thresh=0.99)\nlearn.validate()\n```", "```py\n(#2) [0.10436797887086868,0.9416930675506592]\n```", "```py\npreds,targs = learn.get_preds()\n```", "```py\naccuracy_multi(preds, targs, thresh=0.9, sigmoid=False)\n```", "```py\nTensorMultiCategory(0.9554)\n```", "```py\nxs = torch.linspace(0.05,0.95,29)\naccs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs]\nplt.plot(xs,accs);\n```", "```py\npath = untar_data(URLs.BIWI_HEAD_POSE)\n```", "```py\npath.ls()\n```", "```py\n(#50) [Path('13.obj'),Path('07.obj'),Path('06.obj'),Path('13'),Path('10'),Path('\n > 02'),Path('11'),Path('01'),Path('20.obj'),Path('17')...]\n```", "```py\n(path/'01').ls()\n```", "```py\n(#1000) [Path('01/frame_00281_pose.txt'),Path('01/frame_00078_pose.txt'),Path('0\n > 1/frame_00349_rgb.jpg'),Path('01/frame_00304_pose.txt'),Path('01/frame_00207_\n > pose.txt'),Path('01/frame_00116_rgb.jpg'),Path('01/frame_00084_rgb.jpg'),Path\n > ('01/frame_00070_rgb.jpg'),Path('01/frame_00125_pose.txt'),Path('01/frame_003\n > 24_rgb.jpg')...]\n```", "```py\nimg_files = get_image_files(path)\ndef img2pose(x): return Path(f'{str(x)[:-7]}pose.txt')\nimg2pose(img_files[0])\n```", "```py\nPath('13/frame_00349_pose.txt')\n```", "```py\nim = PILImage.create(img_files[0])\nim.shape\n```", "```py\n(480, 640)\n```", "```py\nim.to_thumb(160)\n```", "```py\ncal = np.genfromtxt(path/'01'/'rgb.cal', skip_footer=6)\ndef get_ctr(f):\n    ctr = np.genfromtxt(img2pose(f), skip_header=3)\n    c1 = ctr[0] * cal[0][0]/ctr[2] + cal[0][2]\n    c2 = ctr[1] * cal[1][1]/ctr[2] + cal[1][2]\n    return tensor([c1,c2])\n```", "```py\nget_ctr(img_files[0])\n```", "```py\ntensor([384.6370, 259.4787])\n```", "```py\nbiwi = DataBlock(\n    blocks=(ImageBlock, PointBlock),\n    get_items=get_image_files,\n    get_y=get_ctr,\n    splitter=FuncSplitter(lambda o: o.parent.name=='13'),\n    batch_tfms=[*aug_transforms(size=(240,320)),\n                Normalize.from_stats(*imagenet_stats)]\n)\n```", "```py\ndls = biwi.dataloaders(path)\ndls.show_batch(max_n=9, figsize=(8,6))\n```", "```py\nxb,yb = dls.one_batch()\nxb.shape,yb.shape\n```", "```py\n(torch.Size([64, 3, 240, 320]), torch.Size([64, 1, 2]))\n```", "```py\nyb[0]\n```", "```py\ntensor([[0.0111, 0.1810]], device='cuda:5')\n```", "```py\nlearn = cnn_learner(dls, resnet18, y_range=(-1,1))\n```", "```py\ndef sigmoid_range(x, lo, hi): return torch.sigmoid(x) * (hi-lo) + lo\n```", "```py\nplot_function(partial(sigmoid_range,lo=-1,hi=1), min=-4, max=4)\n```", "```py\ndls.loss_func\n```", "```py\nFlattenedLoss of MSELoss()\n```", "```py\nlearn.lr_find()\n```", "```py\nlr = 2e-2\nlearn.fit_one_cycle(5, lr)\n```", "```py\nmath.sqrt(0.0001)\n```", "```py\n0.01\n```", "```py\nlearn.show_results(ds_idx=1, max_n=3, figsize=(6,8))\n```"]