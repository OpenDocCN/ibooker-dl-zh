["```py\nsmiles = ['C1CCCCC1', 'O1CCOCC1'] # cyclohexane and dioxane\nmols = [Chem.MolFromSmiles(smile) for smile in smiles]\nfeat = dc.feat.CircularFingerprint(size=1024)\narr = feat.featurize(mols)\n# arr is a 2-by-1024 array containing the fingerprints for\n# the two molecules\n\n```", "```py\nfeat = dc.feat.RDKitDescriptors()\narr = feat.featurize(mols)\n# arr is a 2-by-111 array containing properties of the\n# two molecules\n\n```", "```py\ntasks, datasets, transformers = dc.molnet.load_delaney(featurizer='GraphConv')\ntrain_dataset, valid_dataset, test_dataset = datasets\n\n```", "```py\nmodel = GraphConvModel(n_tasks=1, mode='regression', dropout=0.2)\nmodel.fit(train_dataset, nb_epoch=100)\n\n```", "```py\nmetric = dc.metrics.Metric(dc.metrics.pearson_r2_score)\nprint(model.evaluate(train_dataset, [metric], transformers))\nprint(model.evaluate(test_dataset, [metric], transformers))\n\n```", "```py\nsmiles = ['COC(C)(C)CCCC(C)CC=CC(C)=CC(=O)OC(C)C',\n          'CCOC(=O)CC',\n          'CSc1nc(NC(C)C)nc(NC(C)C)n1',\n          'CC(C#C)N(C)C(=O)Nc1ccc(Cl)cc1',\n          'Cc1cc2ccccc2cc1C']\n\n```", "```py\nfrom rdkit import Chem\nmols = [Chem.MolFromSmiles(s) for s in smiles]\nfeaturizer = dc.feat.ConvMolFeaturizer()\nx = featurizer.featurize(mols)\n\n```", "```py\npredicted_solubility = model.predict_on_batch(x)\n\n```", "```py\nfrom rdkit import Chem\nfrom rdkit.Chem.Draw import MolsToGridImage\n\nsmiles_list = [\"CCCCC\",\"CCOCC\",\"CCNCC\",\"CCSCC\"]\nmol_list = [Chem.MolFromSmiles(x) for x in smiles_list\u200b]\n\n```", "```py\nquery = Chem.MolFromSmarts(\"CCC\")\nmatch_list = [mol.GetSubstructMatch(query) for mol in\nmol_list]\nMolsToGridImage(mols=mol_list, molsPerRow=4,\nhighlightAtomLists=match_list)\n\n```", "```py\nquery = Chem.MolFromSmarts(\"C*C\")\nmatch_list = [mol.GetSubstructMatch(query) for mol in\nmol_list]\nMolsToGridImage(mols=mol_list, molsPerRow=4,\nhighlightAtomLists=match_list)\n```", "```py\nquery = Chem.MolFromSmarts(\"C[C,N,O]C\")\nmatch_list = [mol.GetSubstructMatch(query) for mol in\nmol_list]\nMolsToGridImage(mols=mol_list, molsPerRow=4,\nhighlightAtomLists=match_list)\n```"]