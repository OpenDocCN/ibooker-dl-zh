["```py\n>>> tf.constant(b\"hello world\")\n<tf.Tensor: shape=(), dtype=string, numpy=b'hello world'>\n```", "```py\n>>> tf.constant(\"caf\u00e9\")\n<tf.Tensor: shape=(), dtype=string, numpy=b'caf\\xc3\\xa9'>\n```", "```py\n>>> u = tf.constant([ord(c) for c in \"caf\u00e9\"])\n>>> u\n<tf.Tensor: shape=(4,), [...], numpy=array([ 99,  97, 102, 233], dtype=int32)>\n```", "```py\n>>> b = tf.strings.unicode_encode(u, \"UTF-8\")\n>>> b\n<tf.Tensor: shape=(), dtype=string, numpy=b'caf\\xc3\\xa9'>\n>>> tf.strings.length(b, unit=\"UTF8_CHAR\")\n<tf.Tensor: shape=(), dtype=int32, numpy=4>\n>>> tf.strings.unicode_decode(b, \"UTF-8\")\n<tf.Tensor: shape=(4,), [...], numpy=array([ 99,  97, 102, 233], dtype=int32)>\n```", "```py\n>>> p = tf.constant([\"Caf\u00e9\", \"Coffee\", \"caff\u00e8\", \"\u5496\u5561\"])\n>>> tf.strings.length(p, unit=\"UTF8_CHAR\")\n<tf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 6, 5, 2], dtype=int32)>\n>>> r = tf.strings.unicode_decode(p, \"UTF8\")\n>>> r\n<tf.RaggedTensor [[67, 97, 102, 233], [67, 111, 102, 102, 101, 101], [99, 97,\n102, 102, 232], [21654, 21857]]>\n```", "```py\n>>> r[1]\n<tf.Tensor: [...], numpy=array([ 67, 111, 102, 102, 101, 101], dtype=int32)>\n```", "```py\n>>> r2 = tf.ragged.constant([[65, 66], [], [67]])\n>>> tf.concat([r, r2], axis=0)\n<tf.RaggedTensor [[67, 97, 102, 233], [67, 111, 102, 102, 101, 101], [99, 97,\n102, 102, 232], [21654, 21857], [65, 66], [], [67]]>\n```", "```py\n>>> r3 = tf.ragged.constant([[68, 69, 70], [71], [], [72, 73]])\n>>> print(tf.concat([r, r3], axis=1))\n<tf.RaggedTensor [[67, 97, 102, 233, 68, 69, 70], [67, 111, 102, 102, 101, 101,\n71], [99, 97, 102, 102, 232], [21654, 21857, 72, 73]]>\n```", "```py\n>>> r.to_tensor()\n<tf.Tensor: shape=(4, 6), dtype=int32, numpy=\narray([[   67,    97,   102,   233,     0,     0],\n [   67,   111,   102,   102,   101,   101],\n [   99,    97,   102,   102,   232,     0],\n [21654, 21857,     0,     0,     0,     0]], dtype=int32)>\n```", "```py\n>>> s = tf.SparseTensor(indices=[[0, 1], [1, 0], [2, 3]],\n...                     values=[1., 2., 3.],\n...                     dense_shape=[3, 4])\n...\n>>> tf.sparse.to_dense(s)\n<tf.Tensor: shape=(3, 4), dtype=float32, numpy=\narray([[0., 1., 0., 0.],\n [2., 0., 0., 0.],\n [0., 0., 0., 3.]], dtype=float32)>\n```", "```py\n>>> s * 42.0\n<tensorflow.python.framework.sparse_tensor.SparseTensor at 0x7f84a6749f10>\n>>> s + 42.0\n[...] TypeError: unsupported operand type(s) for +: 'SparseTensor' and 'float'\n```", "```py\narray = tf.TensorArray(dtype=tf.float32, size=3)\narray = array.write(0, tf.constant([1., 2.]))\narray = array.write(1, tf.constant([3., 10.]))\narray = array.write(2, tf.constant([5., 7.]))\ntensor1 = array.read(1)  # => returns (and zeros out!) tf.constant([3., 10.])\n```", "```py\n>>> array.stack()\n<tf.Tensor: shape=(3, 2), dtype=float32, numpy=\narray([[1., 2.],\n [0., 0.],\n [5., 7.]], dtype=float32)>\n```", "```py\n>>> a = tf.constant([[1, 5, 9]])\n>>> b = tf.constant([[5, 6, 9, 11]])\n>>> u = tf.sets.union(a, b)\n>>> u\n<tensorflow.python.framework.sparse_tensor.SparseTensor at 0x132b60d30>\n>>> tf.sparse.to_dense(u)\n<tf.Tensor: [...], numpy=array([[ 1,  5,  6,  9, 11]], dtype=int32)>\n```", "```py\n>>> a = tf.constant([[1, 5, 9], [10, 0, 0]])\n>>> b = tf.constant([[5, 6, 9, 11], [13, 0, 0, 0]])\n>>> u = tf.sets.union(a, b)\n>>> tf.sparse.to_dense(u)\n<tf.Tensor: [...] numpy=array([[ 1,  5,  6,  9, 11],\n [ 0, 10, 13,  0,  0]], dtype=int32)>\n```", "```py\n>>> q = tf.queue.FIFOQueue(3, [tf.int32, tf.string], shapes=[(), ()])\n>>> q.enqueue([10, b\"windy\"])\n>>> q.enqueue([15, b\"sunny\"])\n>>> q.size()\n<tf.Tensor: shape=(), dtype=int32, numpy=2>\n>>> q.dequeue()\n[<tf.Tensor: shape=(), dtype=int32, numpy=10>,\n <tf.Tensor: shape=(), dtype=string, numpy=b'windy'>]\n```", "```py\n>>> q.enqueue_many([[13, 16], [b'cloudy', b'rainy']])\n>>> q.dequeue_many(3)\n[<tf.Tensor: [...], numpy=array([15, 13, 16], dtype=int32)>,\n <tf.Tensor: [...], numpy=array([b'sunny', b'cloudy', b'rainy'], dtype=object)>]\n```"]