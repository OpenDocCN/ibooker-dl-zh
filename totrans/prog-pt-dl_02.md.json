["```py\nclass Dataset(object):\n    def __getitem__(self, index):\n        raise NotImplementedError\n\n    def __len__(self):\n        raise NotImplementedError\n```", "```py\nimport torchvision\nfrom torchvision import transforms\n\ntrain_data_path = \"./train/\"\n\ntransforms = transforms.Compose([\n    transforms.Resize(64),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                    std=[0.229, 0.224, 0.225] )\n    ])\n\ntrain_data = torchvision.datasets.ImageFolder\n(root=train_data_path,transform=transforms)\n```", "```py\nval_data_path = \"./val/\"\nval_data = torchvision.datasets.ImageFolder(root=val_data_path,\n                                            transform=transforms)\n```", "```py\ntest_data_path = \"./test/\"\ntest_data = torchvision.datasets.ImageFolder(root=test_data_path,\n                                             transform=transforms)\n```", "```py\nbatch_size=64\ntrain_data_loader = data.DataLoader(train_data, batch_size=batch_size)\nval_data_loader  = data.DataLoader(val_data, batch_size=batch_size)\ntest_data_loader  = data.DataLoader(test_data, batch_size=batch_size)\n```", "```py\nclass SimpleNet(nn.Module):\n\ndef __init__(self):\n    super(Net, self).__init__()\n    self.fc1 = nn.Linear(12288, 84)\n    self.fc2 = nn.Linear(84, 50)\n    self.fc3 = nn.Linear(50,2)\n\ndef forward(self):\n    x = x.view(-1, 12288)\n    x = F.relu(self.fc1(x))\n    x = F.relu(self.fc2(x))\n    x = F.softmax(self.fc3(x))\n    return x\n\nsimplenet = SimpleNet()\n```", "```py\ndef forward(self):\n    # Convert to 1D vector\n    x = x.view(-1, 12288)\n    x = F.relu(self.fc1(x))\n    x = F.relu(self.fc2(x))\n    x = self.fc3(x)\n    return x\n```", "```py\nimport torch.optim as optim\noptimizer = optim.Adam(simplenet.parameters(), lr=0.001)\n```", "```py\nfor epoch in range(epochs):\n    for batch in train_loader:\n        optimizer.zero_grad()\n        input, target = batch\n        output = model(input)\n        loss = loss_fn(output, target)\n        loss.backward()\n        optimizer.step()\n```", "```py\nif torch.cuda.is_available():\n        device = torch.device(\"cuda\")\nelse\n    device = torch.device(\"cpu\")\n\nmodel.to(device)\n```", "```py\ndef train(model, optimizer, loss_fn, train_loader, val_loader,\nepochs=20, device=\"cpu\"):\n    for epoch in range(epochs):\n        training_loss = 0.0\n        valid_loss = 0.0\n        model.train()\n        for batch in train_loader:\n            optimizer.zero_grad()\n            inputs, target = batch\n            inputs = inputs.to(device)\n            target = targets.to(device)\n            output = model(inputs)\n            loss = loss_fn(output, target)\n            loss.backward()\n            optimizer.step()\n            training_loss += loss.data.item()\n        training_loss /= len(train_iterator)\n\n        model.eval()\n        num_correct = 0\n        num_examples = 0\n        for batch in val_loader:\n            inputs, targets = batch\n            inputs = inputs.to(device)\n            output = model(inputs)\n            targets = targets.to(device)\n            loss = loss_fn(output,targets)\n            valid_loss += loss.data.item()\n            correct = torch.eq(torch.max(F.softmax(output), dim=1)[1],\n\t\t\t\t\t\t\t   target).view(-1)\n            num_correct += torch.sum(correct).item()\n            num_examples += correct.shape[0]\n        valid_loss /= len(valid_iterator)\n\n        print('Epoch: {}, Training Loss: {:.2f},\n        Validation Loss: {:.2f},\n        accuracy = {:.2f}'.format(epoch, training_loss,\n        valid_loss, num_correct / num_examples))\n```", "```py\ntrain(simplenet, optimizer, torch.nn.CrossEntropyLoss(),\n      train_data_loader, test_data_loader,device)\n```", "```py\nfrom PIL import Image\n\nlabels = ['cat','fish']\n\nimg = Image.open(FILENAME)\nimg = transforms(img)\nimg = img.unsqueeze(0)\n\nprediction = simplenet(img)\nprediction = prediction.argmax()\nprint(labels[prediction])\n```", "```py\ntorch.save(simplenet, \"/tmp/simplenet\")\n```", "```py\nsimplenet = torch.load(\"/tmp/simplenet\")\n```", "```py\ntorch.save(model.state_dict(), PATH)\n```", "```py\nsimplenet = SimpleNet()\nsimplenet_state_dict = torch.load(\"/tmp/simplenet\")\nsimplenet.load_state_dict(simplenet_state_dict)\n```"]