["```py\nimport numpy as np\nfrom tensorflow.keras import datasets, utils\n\n(x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data() ![1](Images/1.png)\n\nNUM_CLASSES = 10\n\nx_train = x_train.astype('float32') / 255.0 ![2](Images/2.png)\nx_test = x_test.astype('float32') / 255.0\n\ny_train = utils.to_categorical(y_train, NUM_CLASSES) ![3](Images/3.png)\ny_test = utils.to_categorical(y_test, NUM_CLASSES)\n```", "```py\nx_train[54, 12, 13, 1]\n# 0.36862746\n```", "```py\nfrom tensorflow.keras import layers, models\n\nmodel = models.Sequential([\n    layers.Flatten(input_shape=(32, 32, 3)),\n    layers.Dense(200, activation = 'relu'),\n    layers.Dense(150, activation = 'relu'),\n    layers.Dense(10, activation = 'softmax'),\n])\n```", "```py\nfrom tensorflow.keras import layers, models\n\ninput_layer = layers.Input(shape=(32, 32, 3))\nx = layers.Flatten()(input_layer)\nx = layers.Dense(units=200, activation = 'relu')(x)\nx = layers.Dense(units=150, activation = 'relu')(x)\noutput_layer = layers.Dense(units=10, activation = 'softmax')(x)\nmodel = models.Model(input_layer, output_layer)\n```", "```py\nx = layers.Dense(units=200, activation = 'relu')(x)\n```", "```py\nx = layers.Dense(units=200)(x)\nx = layers.Activation('relu')(x)\n```", "```py\nfrom tensorflow.keras import optimizers\n\nopt = optimizers.Adam(learning_rate=0.0005)\nmodel.compile(loss='categorical_crossentropy', optimizer=opt,\n              metrics=['accuracy'])\n```", "```py\nmodel.fit(x_train ![1](Images/1.png)\n          , y_train ![2](Images/2.png)\n          , batch_size = 32 ![3](Images/3.png)\n          , epochs = 10 ![4](Images/4.png)\n          , shuffle = True ![5](Images/5.png)\n          )\n```", "```py\nmodel.evaluate(x_test, y_test)\n```", "```py\nCLASSES = np.array(['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog'\n                   , 'frog', 'horse', 'ship', 'truck'])\n\npreds = model.predict(x_test) ![1](Images/1.png)\npreds_single = CLASSES[np.argmax(preds, axis = -1)] ![2](Images/2.png)\nactual_single = CLASSES[np.argmax(y_test, axis = -1)]\n```", "```py\nimport matplotlib.pyplot as plt\n\nn_to_show = 10\nindices = np.random.choice(range(len(x_test)), n_to_show)\n\nfig = plt.figure(figsize=(15, 3))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\n\nfor i, idx in enumerate(indices):\n    img = x_test[idx]\n    ax = fig.add_subplot(1, n_to_show, i+1)\n    ax.axis('off')\n    ax.text(0.5, -0.35, 'pred = ' + str(preds_single[idx]), fontsize=10\n       , ha='center', transform=ax.transAxes)\n    ax.text(0.5, -0.7, 'act = ' + str(actual_single[idx]), fontsize=10\n        , ha='center', transform=ax.transAxes)\n    ax.imshow(img)\n```", "```py\nfrom tensorflow.keras import layers\n\ninput_layer = layers.Input(shape=(64,64,1))\nconv_layer_1 = layers.Conv2D(\n    filters = 2\n    , kernel_size = (3,3)\n    , strides = 1\n    , padding = \"same\"\n    )(input_layer)\n```", "```py\nfrom tensorflow.keras import layers, models\n\ninput_layer = layers.Input(shape=(32,32,3))\nconv_layer_1 = layers.Conv2D(\n    filters = 10\n    , kernel_size = (4,4)\n    , strides = 2\n    , padding = 'same'\n    )(input_layer)\nconv_layer_2 = layers.Conv2D(\n    filters = 20\n    , kernel_size = (3,3)\n    , strides = 2\n    , padding = 'same'\n    )(conv_layer_1)\nflatten_layer = layers.Flatten()(conv_layer_2)\noutput_layer = layers.Dense(units=10, activation = 'softmax')(flatten_layer)\nmodel = models.Model(input_layer, output_layer)\n```", "```py\nfrom tensorflow.keras import layers\nlayers.BatchNormalization(momentum = 0.9)\n```", "```py\nfrom tensorflow.keras import layers\nlayers.Dropout(rate = 0.25)\n```", "```py\nfrom tensorflow.keras import layers, models\n\ninput_layer = layers.Input((32,32,3))\n\nx = layers.Conv2D(filters = 32, kernel_size = 3\n\t, strides = 1, padding = 'same')(input_layer)\nx = layers.BatchNormalization()(x)\nx = layers.LeakyReLU()(x)\n\nx = layers.Conv2D(filters = 32, kernel_size = 3, strides = 2, padding = 'same')(x)\nx = layers.BatchNormalization()(x)\nx = layers.LeakyReLU()(x)\n\nx = layers.Conv2D(filters = 64, kernel_size = 3, strides = 1, padding = 'same')(x)\nx = layers.BatchNormalization()(x)\nx = layers.LeakyReLU()(x)\n\nx = layers.Conv2D(filters = 64, kernel_size = 3, strides = 2, padding = 'same')(x)\nx = layers.BatchNormalization()(x)\nx = layers.LeakyReLU()(x)\n\nx = layers.Flatten()(x)\n\nx = layers.Dense(128)(x)\nx = layers.BatchNormalization()(x)\nx = layers.LeakyReLU()(x)\nx = layers.Dropout(rate = 0.5)(x)\n\noutput_layer = layers.Dense(10, activation = 'softmax')(x)\n\nmodel = models.Model(input_layer, output_layer)\n```"]