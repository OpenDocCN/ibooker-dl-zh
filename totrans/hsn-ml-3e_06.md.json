["```py\nfrom sklearn.datasets import load_iris\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import LinearSVC\n\niris = load_iris(as_frame=True)\nX = iris.data[[\"petal length (cm)\", \"petal width (cm)\"]].values\ny = (iris.target == 2)  # Iris virginica\n\nsvm_clf = make_pipeline(StandardScaler(),\n                        LinearSVC(C=1, random_state=42))\nsvm_clf.fit(X, y)\n```", "```py\n>>> X_new = [[5.5, 1.7], [5.0, 1.5]]\n>>> svm_clf.predict(X_new)\narray([ True, False])\n```", "```py\n>>> svm_clf.decision_function(X_new)\narray([ 0.66163411, -0.22036063])\n```", "```py\nfrom sklearn.datasets import make_moons\nfrom sklearn.preprocessing import PolynomialFeatures\n\nX, y = make_moons(n_samples=100, noise=0.15, random_state=42)\n\npolynomial_svm_clf = make_pipeline(\n    PolynomialFeatures(degree=3),\n    StandardScaler(),\n    LinearSVC(C=10, max_iter=10_000, random_state=42)\n)\npolynomial_svm_clf.fit(X, y)\n```", "```py\nfrom sklearn.svm import SVC\n\npoly_kernel_svm_clf = make_pipeline(StandardScaler(),\n                                    SVC(kernel=\"poly\", degree=3, coef0=1, C=5))\npoly_kernel_svm_clf.fit(X, y)\n```", "```py\nrbf_kernel_svm_clf = make_pipeline(StandardScaler(),\n                                   SVC(kernel=\"rbf\", gamma=5, C=0.001))\nrbf_kernel_svm_clf.fit(X, y)\n```", "```py\nfrom sklearn.svm import LinearSVR\n\nX, y = [...]  # a linear dataset\nsvm_reg = make_pipeline(StandardScaler(),\n                        LinearSVR(epsilon=0.5, random_state=42))\nsvm_reg.fit(X, y)\n```", "```py\nfrom sklearn.svm import SVR\n\nX, y = [...]  # a quadratic dataset\nsvm_poly_reg = make_pipeline(StandardScaler(),\n                             SVR(kernel=\"poly\", degree=2, C=0.01, epsilon=0.1))\nsvm_poly_reg.fit(X, y)\n```"]