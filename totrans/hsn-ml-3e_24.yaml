- en: Appendix C. Special Data Structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录C. 特殊数据结构
- en: In this appendix we will take a very quick look at the data structures supported
    by TensorFlow, beyond regular float or integer tensors. This includes strings,
    ragged tensors, sparse tensors, tensor arrays, sets, and queues.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将快速查看TensorFlow支持的数据结构，超出了常规的浮点或整数张量。这包括字符串、不规则张量、稀疏张量、张量数组、集合和队列。
- en: Strings
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: 'Tensors can hold byte strings, which is useful in particular for natural language
    processing (see [Chapter 16](ch16.html#nlp_chapter)):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 张量可以保存字节字符串，这在自然语言处理中特别有用（请参阅[第16章](ch16.html#nlp_chapter)）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you try to build a tensor with a Unicode string, TensorFlow automatically
    encodes it to UTF-8:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试构建一个包含Unicode字符串的张量，TensorFlow会自动将其编码为UTF-8：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is also possible to create tensors representing Unicode strings. Just create
    an array of 32-bit integers, each representing a single Unicode code point:⁠^([1](app03.html#idm45720157174848))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以创建表示Unicode字符串的张量。只需创建一个32位整数数组，每个整数代表一个单个Unicode码点：⁠^([1](app03.html#idm45720157174848))
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In tensors of type `tf.string`, the string length is not part of the tensor’s
    shape. In other words, strings are considered as atomic values. However, in a
    Unicode string tensor (i.e., an int32 tensor), the length of the string *is* part
    of the tensor’s shape.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型为`tf.string`的张量中，字符串长度不是张量形状的一部分。换句话说，字符串被视为原子值。但是，在Unicode字符串张量（即int32张量）中，字符串的长度*是*张量形状的一部分。
- en: 'The `tf.strings` package contains several functions to manipulate string tensors,
    such as `length()` to count the number of bytes in a byte string (or the number
    of code points if you set `unit="UTF8_CHAR"`), `unicode_encode()` to convert a
    Unicode string tensor (i.e., int32 tensor) to a byte string tensor, and `unicode_decode()`
    to do the reverse:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.strings`包含几个函数来操作字符串张量，例如`length()`用于计算字节字符串中的字节数（或者如果设置`unit="UTF8_CHAR"`，则计算代码点的数量），`unicode_encode()`用于将Unicode字符串张量（即int32张量）转换为字节字符串张量，`unicode_decode()`用于执行相反操作：'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also manipulate tensors containing multiple strings:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以操作包含多个字符串的张量：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the decoded strings are stored in a `RaggedTensor`. What is that?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，解码的字符串存储在`RaggedTensor`中。那是什么？
- en: Ragged Tensors
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不规则张量
- en: A *ragged tensor* is a special kind of tensor that represents a list of arrays
    of different sizes. More generally, it is a tensor with one or more *ragged dimensions*,
    meaning dimensions whose slices may have different lengths. In the ragged tensor
    `r`, the second dimension is a ragged dimension. In all ragged tensors, the first
    dimension is always a regular dimension (also called a *uniform dimension*).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*不规则张量*是一种特殊类型的张量，表示不同大小数组的列表。更一般地说，它是一个具有一个或多个*不规则维度*的张量，意味着切片可能具有不同长度的维度。在不规则张量`r`中，第二个维度是一个不规则维度。在所有不规则张量中，第一个维度始终是一个常规维度（也称为*均匀维度*）。'
- en: 'All the elements of the ragged tensor `r` are regular tensors. For example,
    let’s look at the second element of the ragged tensor:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不规则张量`r`的所有元素都是常规张量。例如，让我们看看不规则张量的第二个元素：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `tf.ragged` package contains several functions to create and manipulate
    ragged tensors. Let’s create a second ragged tensor using `tf.ragged.constant()`
    and concatenate it with the first ragged tensor, along axis 0:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.ragged`包含几个函数来创建和操作不规则张量。让我们使用`tf.ragged.constant()`创建第二个不规则张量，并沿着轴0连接它与第一个不规则张量：'
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result is not too surprising: the tensors in `r2` were appended after the
    tensors in `r` along axis 0\. But what if we concatenate `r` and another ragged
    tensor along axis 1?'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 结果并不太令人惊讶：`r2`中的张量是沿着轴0在`r`中的张量之后附加的。但是如果我们沿着轴1连接`r`和另一个不规则张量呢？
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This time, notice that the *i*^(th) tensor in `r` and the *i*^(th) tensor in
    `r3` were concatenated. Now that’s more unusual, since all of these tensors can
    have different lengths.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，请注意`r`中的第*i*个张量和`r3`中的第*i*个张量被连接。现在这更不寻常，因为所有这些张量都可以具有不同的长度。
- en: 'If you call the `to_tensor()` method, the ragged tensor gets converted to a
    regular tensor, padding shorter tensors with zeros to get tensors of equal lengths
    (you can change the default value by setting the `default_value` argument):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用`to_tensor()`方法，不规则张量将转换为常规张量，用零填充较短的张量以获得相等长度的张量（您可以通过设置`default_value`参数更改默认值）：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Many TF operations support ragged tensors. For the full list, see the documentation
    of the `tf.RaggedTensor` class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多TF操作支持不规则张量。有关完整列表，请参阅`tf.RaggedTensor`类的文档。
- en: Sparse Tensors
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稀疏张量
- en: 'TensorFlow can also efficiently represent *sparse tensors* (i.e., tensors containing
    mostly zeros). Just create a `tf.SparseTensor`, specifying the indices and values
    of the nonzero elements and the tensor’s shape. The indices must be listed in
    “reading order” (from left to right, and top to bottom). If you are unsure, just
    use `tf.sparse.reorder()`. You can convert a sparse tensor to a dense tensor (i.e.,
    a regular tensor) using `tf.sparse.to_dense()`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow还可以高效地表示*稀疏张量*（即包含大多数零的张量）。只需创建一个`tf.SparseTensor`，指定非零元素的索引和值以及张量的形状。索引必须按“读取顺序”（从左到右，从上到下）列出。如果不确定，只需使用`tf.sparse.reorder()`。您可以使用`tf.sparse.to_dense()`将稀疏张量转换为密集张量（即常规张量）：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that sparse tensors do not support as many operations as dense tensors.
    For example, you can multiply a sparse tensor by any scalar value, and you get
    a new sparse tensor, but you cannot add a scalar value to a sparse tensor, as
    this would not return a sparse tensor:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，稀疏张量不支持与密集张量一样多的操作。例如，您可以将稀疏张量乘以任何标量值，得到一个新的稀疏张量，但是您不能将标量值添加到稀疏张量中，因为这不会返回一个稀疏张量：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tensor Arrays
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 张量数组
- en: 'A `tf.TensorArray` represents a list of tensors. This can be handy in dynamic
    models containing loops, to accumulate results and later compute some statistics.
    You can read or write tensors at any location in the array:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.TensorArray`表示一个张量列表。这在包含循环的动态模型中可能很方便，用于累积结果并稍后计算一些统计数据。您可以在数组中的任何位置读取或写入张量：'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By default, reading an item also replaces it with a tensor of the same shape
    but full of zeros. You can set `clear_after_read` to `False` if you don’t want
    this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，读取一个项目也会用相同形状但全是零的张量替换它。如果不想要这样，可以将`clear_after_read`设置为`False`。
- en: Warning
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: When you write to the array, you must assign the output back to the array, as
    shown in this code example. If you don’t, although your code will work fine in
    eager mode, it will break in graph mode (these modes are discussed in [Chapter 12](ch12.html#tensorflow_chapter)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向数组写入时，必须将输出分配回数组，就像这个代码示例中所示。如果不这样做，尽管您的代码在急切模式下可以正常工作，但在图模式下会出错（这些模式在[第12章](ch12.html#tensorflow_chapter)中讨论）。
- en: By default, a `TensorArray` has a fixed size that is set upon creation. Alternatively,
    you can set `size=0` and `dynamic_size=True` to let the array grow automatically
    when needed. However, this will hinder performance, so if you know the `size`
    in advance, it’s better to use a fixed-size array. You must also specify the `dtype`,
    and all elements must have the same shape as the first one written to the array.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`TensorArray`具有在创建时设置的固定大小。或者，您可以设置`size=0`和`dynamic_size=True`，以便在需要时自动增长数组。但是，这会影响性能，因此如果您事先知道`size`，最好使用固定大小数组。您还必须指定`dtype`，并且所有元素必须与写入数组的第一个元素具有相同的形状。
- en: 'You can stack all the items into a regular tensor by calling the `stack()`
    method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用`stack()`方法将所有项目堆叠到常规张量中：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Sets
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: 'TensorFlow supports sets of integers or strings (but not floats). It represents
    sets using regular tensors. For example, the set `{1, 5, 9}` is just represented
    as the tensor `[[1, 5, 9]]`. Note that the tensor must have at least two dimensions,
    and the sets must be in the last dimension. For example, `[[1, 5, 9], [2, 5, 11]]`
    is a tensor holding two independent sets: `{1, 5, 9}` and `{2, 5, 11}`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow支持整数或字符串的集合（但不支持浮点数）。它使用常规张量表示集合。例如，集合`{1, 5, 9}`只是表示为张量`[[1, 5, 9]]`。请注意，张量必须至少有两个维度，并且集合必须在最后一个维度中。例如，`[[1,
    5, 9], [2, 5, 11]]`是一个包含两个独立集合的张量：`{1, 5, 9}`和`{2, 5, 11}`。
- en: 'The `tf.sets` package contains several functions to manipulate sets. For example,
    let’s create two sets and compute their union (the result is a sparse tensor,
    so we call `to_dense()` to display it):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.sets`包含几个用于操作集合的函数。例如，让我们创建两个集合并计算它们的并集（结果是一个稀疏张量，因此我们调用`to_dense()`来显示它）：'
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also compute the union of multiple pairs of sets simultaneously. If
    some sets are shorter than others, you must pad them with a padding value, such
    as 0:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以同时计算多对集合的并集。如果某些集合比其他集合短，必须用填充值（例如0）填充它们：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you prefer to use a different padding value, such as –1, then you must set
    `default_value=-1` (or your preferred value) when calling `to_dense()`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用不同的填充值，比如-1，那么在调用`to_dense()`时必须设置`default_value=-1`（或您喜欢的值）。
- en: Warning
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The default `default_value` is 0, so when dealing with string sets, you must
    set this parameter (e.g., to an empty string).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`default_value`是0，所以在处理字符串集合时，必须设置这个参数（例如，设置为空字符串）。
- en: Other functions available in `tf.sets` include `difference()`, `intersection()`,
    and `size()`, which are self-explanatory. If you want to check whether or not
    a set contains some given values, you can compute the intersection of that set
    and the values. If you want to add some values to a set, you can compute the union
    of the set and the values.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.sets`中还有其他可用的函数，包括`difference()`、`intersection()`和`size()`，它们都是不言自明的。如果要检查一个集合是否包含某些给定值，可以计算该集合和值的交集。如果要向集合添加一些值，可以计算集合和值的并集。'
- en: Queues
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列
- en: A queue is a data structure to which you can push data records, and later pull
    them out. TensorFlow implements several types of queues in the `tf.queue` package.
    They used to be very important when implementing efficient data loading and preprocessing
    pipelines, but the tf.data API has essentially rendered them useless (except perhaps
    in some rare cases) because it is much simpler to use and provides all the tools
    you need to build efficient pipelines. For the sake of completeness, though, let’s
    take a quick look at them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 队列是一种数据结构，您可以将数据记录推送到其中，然后再将它们取出。TensorFlow在`tf.queue`包中实现了几种类型的队列。在实现高效的数据加载和预处理流水线时，它们曾经非常重要，但是tf.data
    API基本上使它们变得无用（也许在一些罕见情况下除外），因为使用起来更简单，并提供了构建高效流水线所需的所有工具。为了完整起见，让我们快速看一下它们。
- en: 'The simplest kind of queue is the first-in, first-out (FIFO) queue. To build
    it, you need to specify the maximum number of records it can contain. Moreover,
    each record is a tuple of tensors, so you must specify the type of each tensor,
    and optionally their shapes. For example, the following code example creates a
    FIFO queue with a maximum of three records, each containing a tuple with a 32-bit
    integer and a string. Then it pushes two records to it, looks at the size (which
    is 2 at this point), and pulls a record out:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的队列是先进先出（FIFO）队列。要构建它，您需要指定它可以包含的记录的最大数量。此外，每个记录都是张量的元组，因此您必须指定每个张量的类型，以及可选的形状。例如，以下代码示例创建了一个最多包含三条记录的FIFO队列，每条记录包含一个32位整数和一个字符串的元组。然后将两条记录推送到队列中，查看大小（此时为2），并取出一条记录：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It is also possible to enqueue and dequeue multiple records at once using `enqueue_many()`
    and `dequeue_many()` (to use `dequeue_many()`, you must specify the `shapes` argument
    when you create the queue, as we did previously):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用`enqueue_many()`和`dequeue_many()`一次入队和出队多个记录（要使用`dequeue_many()`，必须在创建队列时指定`shapes`参数，就像我们之前做的那样）：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Other queue types include:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其他队列类型包括：
- en: '`PaddingFIFOQueue`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`PaddingFIFOQueue`'
- en: Same as `FIFOQueue`, but its `dequeue_many()` method supports dequeueing multiple
    records of different shapes. It automatically pads the shortest records to ensure
    all the records in the batch have the same shape.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与`FIFOQueue`相同，但其`dequeue_many()`方法支持出队不同形状的多个记录。它会自动填充最短的记录，以确保批次中的所有记录具有相同的形状。
- en: '`PriorityQueue`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`PriorityQueue`'
- en: A queue that dequeues records in a prioritized order. The priority must be a
    64-bit integer included as the first element of each record. Surprisingly, records
    with a lower priority will be dequeued first. Records with the same priority will
    be dequeued in FIFO order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个按优先级顺序出队记录的队列。优先级必须作为每个记录的第一个元素包含在其中，是一个64位整数。令人惊讶的是，优先级较低的记录将首先出队。具有相同优先级的记录将按照FIFO顺序出队。
- en: '`RandomShuffleQueue`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`RandomShuffleQueue`'
- en: A queue whose records are dequeued in random order. This was useful to implement
    a shuffle buffer before tf.data existed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个记录以随机顺序出队的队列。在tf.data出现之前，这对实现洗牌缓冲区很有用。
- en: If a queue is already full and you try to enqueue another record, the `enqueue*()`
    method will freeze until a record is dequeued by another thread. Similarly, if
    a queue is empty and you try to dequeue a record, the `dequeue*()` method will
    freeze until records are pushed to the queue by another thread.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果队列已满并且您尝试入队另一个记录，则`enqueue*()`方法将冻结，直到另一个线程出队一条记录。同样，如果队列为空并且您尝试出队一条记录，则`dequeue*()`方法将冻结，直到另一个线程将记录推送到队列中。
- en: ^([1](app03.html#idm45720157174848-marker)) If you are not familiar with Unicode
    code points, please check out [*https://homl.info/unicode*](https://homl.info/unicode).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉Unicode代码点，请查看[*https://homl.info/unicode*](https://homl.info/unicode)。
