["```py\nimagenet/mobilenet_v2_130_224/feature_vector\n```", "```py\nconsole.log(\"Loading huge CSV - this will take a while\");constnumImages=130;// between 1 and 150 // Get Y values constlabels=awaitdfd.read_csv(\"chess_labels.csv\",numImages);![1](assets/1.png)constY=labels.tensor;![2](assets/2.png)// Get X values (Chess images) constchessImages=awaitdfd.read_csv(\"chess_images.csv\",numImages);constchessTensor=chessImages.tensor.reshape([labels.shape[0],224,224,3,![3](assets/3.png)]);console.log(\"Finished loading CSVs\",chessTensor.shape,Y.shape);\n```", "```py\nFinished loading CSVs (4)\u00a0[130, 224, 224, 3] (2)\u00a0[130, 6]\n```", "```py\n// Load feature model\nconst tfhubURL =\n  \"https://oreil.ly/P2t2k\";\nconst featureModel = await tf.loadGraphModel(tfhubURL, {\n  fromTFHub: true,\n});\nconst featureX = featureModel.predict(chessTensor);\n// Push data through feature detection\nconsole.log(`Features stack ${featureX.shape}`);\n```", "```py\nFeatures stack 130,1664\n```", "```py\n// Create NN consttransferModel=tf.sequential({layers:[![1](assets/1.png)tf.layers.dense({inputShape:[featureX.shape[1]],![2](assets/2.png)units: 64,activation:\"relu\",}),tf.layers.dense({units: 6,activation:\"softmax\"}),],});\n```", "```py\ntransferModel.compile({\n  optimizer: \"adam\",\n  loss: \"categoricalCrossentropy\",\n  metrics: [\"accuracy\"],\n});\n\nawait transferModel.fit(featureX, Y, {\n  validationSplit: 0.2,\n  epochs: 20,\n  callbacks: { onEpochEnd: console.log },\n});\n```", "```py\n...\n\nconv_pw_13 (Conv2D)          [null,7,7,256]            65536\n_________________________________________________________________\nconv_pw_13_bn (BatchNormaliz [null,7,7,256]            1024\n_________________________________________________________________\nconv_pw_13_relu (Activation) [null,7,7,256]            0\n_________________________________________________________________\nglobal_average_pooling2d_1 ( [null,256]                0\n_________________________________________________________________\n reshape_1 (Reshape)          [null,1,1,256]            0\n_________________________________________________________________\ndropout (Dropout)            [null,1,1,256]            0\n_________________________________________________________________\nconv_preds (Conv2D)          [null,1,1,1000]           257000\n_________________________________________________________________\nact_softmax (Activation)     [null,1,1,1000]           0\n_________________________________________________________________\nreshape_2 (Reshape)          [null,1000]               0\n=================================================================\nTotal params: 475544\nTrainable params: 470072\nNon-trainable params: 5472\n```", "```py\nconst featureModel = await tf.loadLayersModel('mobilenet/model.json')\nconsole.log('ORIGINAL MODEL')\nfeatureModel.summary()\nconst lastLayer = featureModel.getLayer('conv_pw_13_relu')\nconst shavedModel = tf.model({\n  inputs: featureModel.inputs,\n  outputs: lastLayer.output,\n})\nconsole.log('SHAVED DOWN MODEL')\nshavedModel.summary()\n```", "```py\n// Create NN\nconst transferModel = tf.sequential({\n  layers: [\n    tf.layers.flatten({ inputShape: featureX.shape.slice(1) }),\n    tf.layers.dense({ units: 64, activation: 'relu' }),\n    tf.layers.dense({ units: 6, activation: 'softmax' }),\n  ],\n})\n```", "```py\n// combine the models\nconst combo = tf.sequential()\ncombo.add(shavedModel)\ncombo.add(transferModel)\ncombo.compile({\n  optimizer: 'adam',\n  loss: 'categoricalCrossentropy',\n  metrics: ['accuracy'],\n})\ncombo.summary()\n```", "```py\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.7.0/dist/tf.min.js\">\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@2.0\">\n</script>\n<script\nsrc=\"https://cdn.jsdelivr.net/npm/@tensorflow-models/knn-classifier@1.2.2\">\n</script>\n```", "```py\n// domID is the DOM element ID // classID is the unique class index functionaddExample(domID,classID){constfeatures=mobileNet.infer(![1](assets/1.png)document.getElementById(domID),![2](assets/2.png)true![3](assets/3.png));classifier.addExample(features,classID);}\n```", "```py\n// Add examples of two classes\naddExample('bunny1', 0)\naddExample('bunny2', 0)\naddExample('bunny3', 0)\naddExample('sport1', 1)\naddExample('sport2', 1)\naddExample('sport3', 1)\n```", "```py\n// Moment of truth consttestImage=document.getElementById('test')consttestFeature=mobileNet.infer(testImage,true);constpredicted=awaitclassifier.predictClass(testFeature)if(predicted.classIndex===0){![1](assets/1.png)document.getElementById(\"result\").innerText=\"A Bunny\"![2](assets/2.png)}else{document.getElementById(\"result\").innerText=\"A Sports Car\"}\n```"]