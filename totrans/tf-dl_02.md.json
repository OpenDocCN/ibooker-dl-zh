["```py\n>>> import tensorflow as tf\n>>> tf.InteractiveSession()\n<tensorflow.python.client.session.InteractiveSession>\n```", "```py\n>>> tf.zeros(2)\n<tf.Tensor 'zeros:0' shape=(2,) dtype=float32>\n```", "```py\n>>> a = tf.zeros(2)\n>>> a.eval()\narray([ 0.,  0.], dtype=float32)\n```", "```py\n>>> a = tf.zeros((2, 3))\n>>> a.eval()\narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]], dtype=float32)\n>>> b = tf.ones((2,2,2))\n>>> b.eval()\narray([[[ 1.,  1.],\n        [ 1.,  1.]],\n\n       [[ 1.,  1.],\n        [ 1.,  1.]]], dtype=float32)\n```", "```py\n>>> b = tf.fill((2, 2), value=5.)\n>>> b.eval()\narray([[ 5.,  5.],\n       [ 5.,  5.]], dtype=float32)\n```", "```py\n>>> a = tf.constant(3)\n>>> a.eval()\n3\n```", "```py\n>>> a = tf.random_normal((2, 2), mean=0, stddev=1)\n>>> a.eval()\narray([[-0.73437649, -0.77678096],\n       [ 0.51697761,  1.15063596]], dtype=float32)\n```", "```py\n>>> a = tf.random_uniform((2, 2), minval=-2, maxval=2)\n>>> a.eval()\narray([[-1.90391684,  1.4179163 ],\n       [ 0.67762709,  1.07282352]], dtype=float32)\n```", "```py\n>>> c = tf.ones((2, 2))\n>>> d = tf.ones((2, 2))\n>>> e = c + d\n>>> e.eval()\narray([[ 2.,  2.],\n       [ 2.,  2.]], dtype=float32)\n>>> f = 2 * e\n>>> f.eval()\narray([[ 4.,  4.],\n       [ 4.,  4.]], dtype=float32)\n```", "```py\n>>> c = tf.fill((2,2), 2.)\n>>> d = tf.fill((2,2), 7.)\n>>> e = c * d\n>>> e.eval()\narray([[ 14.,  14.],\n       [ 14.,  14.]], dtype=float32)\n```", "```py\n>>> a = tf.eye(4)\n>>> a.eval()\narray([[ 1.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.],\n       [ 0.,  0.,  1.,  0.],\n       [ 0.,  0.,  0.,  1.]], dtype=float32)\n```", "```py\n>>> r = tf.range(1, 5, 1)\n>>> r.eval()\narray([1, 2, 3, 4], dtype=int32)\n>>> d = tf.diag(r)\n>>> d.eval()\narray([[1, 0, 0, 0],\n       [0, 2, 0, 0],\n       [0, 0, 3, 0],\n       [0, 0, 0, 4]], dtype=int32)\n```", "```py\n>>> a = tf.ones((2, 3))\n>>> a.eval()\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]], dtype=float32)\n>>> at = tf.matrix_transpose(a)\n>>> at.eval()\narray([[ 1.,  1.],\n       [ 1.,  1.],\n       [ 1.,  1.]], dtype=float32)\n```", "```py\n>>> a = tf.ones((2, 3))\n>>> a.eval()\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]], dtype=float32)\n>>> b = tf.ones((3, 4))\n>>> b.eval()\narray([[ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.],\n       [ 1.,  1.,  1.,  1.]], dtype=float32)\n>>> c = tf.matmul(a, b)\n>>> c.eval()\narray([[ 3.,  3.,  3.,  3.],\n       [ 3.,  3.,  3.,  3.]], dtype=float32)\n```", "```py\n>>> a = tf.ones((2,2), dtype=tf.int32)\n>>> a.eval()\narray([[0, 0],\n       [0, 0]], dtype=int32)\n>>> b = tf.to_float(a)\n>>> b.eval()\narray([[ 0.,  0.],\n       [ 0.,  0.]], dtype=float32)\n```", "```py\n>>> a = tf.ones(8)\n>>> a.eval()\narray([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.], dtype=float32)\n>>> b = tf.reshape(a, (4, 2))\n>>> b.eval()\narray([[ 1.,  1.],\n       [ 1.,  1.],\n       [ 1.,  1.],\n       [ 1.,  1.]], dtype=float32)\n>>> c = tf.reshape(a, (2, 2, 2))\n>>> c.eval()\narray([[[ 1.,  1.],\n        [ 1.,  1.]],\n\n       [[ 1.,  1.],\n        [ 1.,  1.]]], dtype=float32)\n```", "```py\n>>> a = tf.ones(2)\n>>> a.get_shape()\nTensorShape([Dimension(2)])\n>>> a.eval()\narray([ 1.,  1.], dtype=float32)\n>>> b = tf.expand_dims(a, 0)\n>>> b.get_shape()\nTensorShape([Dimension(1), Dimension(2)])\n>>> b.eval()\narray([[ 1.,  1.]], dtype=float32)\n>>> c = tf.expand_dims(a, 1)\n>>> c.get_shape()\nTensorShape([Dimension(2), Dimension(1)])\n>>> c.eval()\narray([[ 1.],\n       [ 1.]], dtype=float32)\n>>> d = tf.squeeze(b)\n>>> d.get_shape()\nTensorShape([Dimension(2)])\n>>> d.eval()\narray([ 1.,  1.], dtype=float32)\n```", "```py\n>>> a = tf.ones((2, 2))\n>>> a.eval()\narray([[ 1.,  1.],\n       [ 1.,  1.]], dtype=float32)\n>>> b = tf.range(0, 2, 1, dtype=tf.float32)\n>>> b.eval()\narray([ 0.,  1.], dtype=float32)\n>>> c = a + b\n>>> c.eval()\narray([[ 1.,  2.],\n       [ 1.,  2.]], dtype=float32)\n```", "```py\n>>> b = tf.range(0, 2, 1)\n>>> b.eval()\narray([0, 1], dtype=int32)\n>>> c = a + b\nValueError: Tensor conversion requested dtype float32 for Tensor with dtype int32:\n'Tensor(\"range_2:0\", shape=(2,), dtype=int32)\n```", "```py\n>>> a = 3\n>>> b = 4\n>>> c = a + b\n>>> c\n7\n```", "```py\n>>> a = tf.constant(3)\n>>> b = tf.constant(4)\n>>> c = a + b\n>>> c\n<tf.Tensor 'add_1:0' shape=() dtype=int32>\n>>> c.eval()\n7\n```", "```py\n>>> tf.get_default_graph()\n<tensorflow.python.framework.ops.Graph>\n```", "```py\n>>> sess = tf.Session()\n>>> a = tf.ones((2, 2))\n>>> b = tf.matmul(a, a)\n>>> b.eval(session=sess)\narray([[ 2.,  2.],\n       [ 2.,  2.]], dtype=float32)\n```", "```py\n>>> sess.run(b)\narray([[ 2.,  2.],\n       [ 2.,  2.]], dtype=float32)\n```", "```py\n>>> a = tf.Variable(tf.ones((2, 2)))\n>>> a\n<tf.Variable 'Variable:0' shape=(2, 2) dtype=float32_ref>\n```", "```py\n>>> a.eval()\nFailedPreconditionError: Attempting to use uninitialized value Variable\n```", "```py\n>>> sess = tf.Session()\n>>> sess.run(tf.global_variables_initializer())\n>>> a.eval(session=sess)\narray([[ 1.,  1.],\n       [ 1.,  1.]], dtype=float32)\n```", "```py\n>>> sess.run(a.assign(tf.zeros((2,2))))\narray([[ 0.,  0.],\n       [ 0.,  0.]], dtype=float32)\n>>> sess.run(a)\narray([[ 0.,  0.],\n       [ 0.,  0.]], dtype=float32)\n```", "```py\n>>> sess.run(a.assign(tf.zeros((3,3))))\nValueError: Dimension 0 in both shapes must be equal, but are 2 and 3 for 'Assign_3'\n(op: 'Assign') with input shapes: [2,2], [3,3].\n```"]