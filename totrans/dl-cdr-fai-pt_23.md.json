["```py\npath = untar_data(URLs.PETS)/'images'\ndef is_cat(x): return x[0].isupper()\ndls = ImageDataLoaders.from_name_func(\n    path, get_image_files(path), valid_pct=0.2, seed=21,\n    label_func=is_cat, item_tfms=Resize(224))\nlearn = cnn_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(1)\n```", "```py\nimg = PILImage.create('images/chapter1_cat_example.jpg')\nx, = first(dls.test_dl([img]))\n```", "```py\nclass Hook():\n    def hook_func(self, m, i, o): self.stored = o.detach().clone()\n```", "```py\nhook_output = Hook()\nhook = learn.model[0].register_forward_hook(hook_output.hook_func)\n```", "```py\nwith torch.no_grad(): output = learn.model.eval()(x)\n```", "```py\nact = hook_output.stored[0]\n```", "```py\nF.softmax(output, dim=-1)\n```", "```py\ntensor([[7.3566e-07, 1.0000e+00]], device='cuda:0')\n```", "```py\ndls.vocab\n```", "```py\n(#2) [False,True]\n```", "```py\nx.shape\n```", "```py\ntorch.Size([1, 3, 224, 224])\n```", "```py\ncam_map = torch.einsum('ck,kij->cij', learn.model[1][-1].weight, act)\ncam_map.shape\n```", "```py\ntorch.Size([2, 7, 7])\n```", "```py\nx_dec = TensorImage(dls.train.decode((x,))[0][0])\n_,ax = plt.subplots()\nx_dec.show(ctx=ax)\nax.imshow(cam_map[1].detach().cpu(), alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');\n```", "```py\nhook.remove()\n```", "```py\nclass Hook():\n    def __init__(self, m):\n        self.hook = m.register_forward_hook(self.hook_func)\n    def hook_func(self, m, i, o): self.stored = o.detach().clone()\n    def __enter__(self, *args): return self\n    def __exit__(self, *args): self.hook.remove()\n```", "```py\nwith Hook(learn.model[0]) as hook:\n    with torch.no_grad(): output = learn.model.eval()(x.cuda())\n    act = hook.stored\n```", "```py\nclass HookBwd():\n    def __init__(self, m):\n        self.hook = m.register_backward_hook(self.hook_func)\n    def hook_func(self, m, gi, go): self.stored = go[0].detach().clone()\n    def __enter__(self, *args): return self\n    def __exit__(self, *args): self.hook.remove()\n```", "```py\ncls = 1\nwith HookBwd(learn.model[0]) as hookg:\n    with Hook(learn.model[0]) as hook:\n        output = learn.model.eval()(x.cuda())\n        act = hook.stored\n    output[0,cls].backward()\n    grad = hookg.stored\n```", "```py\nw = grad[0].mean(dim=[1,2], keepdim=True)\ncam_map = (w * act[0]).sum(0)\n```", "```py\n_,ax = plt.subplots()\nx_dec.show(ctx=ax)\nax.imshow(cam_map.detach().cpu(), alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');\n```", "```py\nwith HookBwd(learn.model[0][-2]) as hookg:\n    with Hook(learn.model[0][-2]) as hook:\n        output = learn.model.eval()(x.cuda())\n        act = hook.stored\n    output[0,cls].backward()\n    grad = hookg.stored\n```", "```py\nw = grad[0].mean(dim=[1,2], keepdim=True)\ncam_map = (w * act[0]).sum(0)\n```", "```py\n_,ax = plt.subplots()\nx_dec.show(ctx=ax)\nax.imshow(cam_map.detach().cpu(), alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');\n```"]