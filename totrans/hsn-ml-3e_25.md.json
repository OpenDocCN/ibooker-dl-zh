["```py\n@tf.function\ndef tf_cube(x):\n    return x ** 3\n```", "```py\n>>> concrete_function = tf_cube.get_concrete_function(tf.constant(2.0))\n>>> concrete_function\n<ConcreteFunction tf_cube(x) at 0x7F84411F4250>\n>>> concrete_function(tf.constant(2.0))\n<tf.Tensor: shape=(), dtype=float32, numpy=8.0>\n```", "```py\n>>> concrete_function.graph\n<tensorflow.python.framework.func_graph.FuncGraph at 0x7f84411f4790>\n>>> ops = concrete_function.graph.get_operations()\n>>> ops\n[<tf.Operation 'x' type=Placeholder>,\n <tf.Operation 'pow/y' type=Const>,\n <tf.Operation 'pow' type=Pow>,\n <tf.Operation 'Identity' type=Identity>]\n```", "```py\n>>> pow_op = ops[2]\n>>> list(pow_op.inputs)\n[<tf.Tensor 'x:0' shape=() dtype=float32>,\n <tf.Tensor 'pow/y:0' shape=() dtype=float32>]\n>>> pow_op.outputs\n[<tf.Tensor 'pow:0' shape=() dtype=float32>]\n```", "```py\n>>> concrete_function.graph.get_operation_by_name('x')\n<tf.Operation 'x' type=Placeholder>\n>>> concrete_function.graph.get_tensor_by_name('Identity:0')\n<tf.Tensor 'Identity:0' shape=() dtype=float32>\n```", "```py\n>>> concrete_function.function_def.signature\nname: \"__inference_tf_cube_3515903\"\ninput_arg {\n name: \"x\"\n type: DT_FLOAT\n}\noutput_arg {\n name: \"identity\"\n type: DT_FLOAT\n}\n```", "```py\n@tf.function\ndef tf_cube(x):\n    print(f\"x = {x}\")\n    return x ** 3\n```", "```py\n>>> result = tf_cube(tf.constant(2.0))\nx = Tensor(\"x:0\", shape=(), dtype=float32)\n>>> result\n<tf.Tensor: shape=(), dtype=float32, numpy=8.0>\n```", "```py\n>>> result = tf_cube(tf.constant(3.0))\n>>> result = tf_cube(tf.constant(4.0))\n```", "```py\n>>> result = tf_cube(2)  # new Python value: trace!\nx = 2\n>>> result = tf_cube(3)  # new Python value: trace!\nx = 3\n>>> result = tf_cube(tf.constant([[1., 2.]]))  # new shape: trace!\nx = Tensor(\"x:0\", shape=(1, 2), dtype=float32)\n>>> result = tf_cube(tf.constant([[3., 4.], [5., 6.]]))  # new shape: trace!\nx = Tensor(\"x:0\", shape=(None, 2), dtype=float32)\n>>> result = tf_cube(tf.constant([[7., 8.], [9., 10.]]))  # same shape: no trace\n```", "```py\n@tf.function(input_signature=[tf.TensorSpec([None, 28, 28], tf.float32)])\ndef shrink(images):\n    return images[:, ::2, ::2]  # drop half the rows and columns\n```", "```py\nimg_batch_1 = tf.random.uniform(shape=[100, 28, 28])\nimg_batch_2 = tf.random.uniform(shape=[50, 28, 28])\npreprocessed_images = shrink(img_batch_1)  # works fine, traces the function\npreprocessed_images = shrink(img_batch_2)  # works fine, same concrete function\n```", "```py\nimg_batch_3 = tf.random.uniform(shape=[2, 2, 2])\npreprocessed_images = shrink(img_batch_3)  # ValueError! Incompatible inputs\n```", "```py\n@tf.function\ndef add_10(x):\n    for i in range(10):\n        x += 1\n    return x\n```", "```py\n>>> add_10(tf.constant(0))\n<tf.Tensor: shape=(), dtype=int32, numpy=15>\n>>> add_10.get_concrete_function(tf.constant(0)).graph.get_operations()\n[<tf.Operation 'x' type=Placeholder>, [...],\n <tf.Operation 'add' type=AddV2>, [...],\n <tf.Operation 'add_1' type=AddV2>, [...],\n <tf.Operation 'add_2' type=AddV2>, [...],\n [...]\n <tf.Operation 'add_9' type=AddV2>, [...],\n <tf.Operation 'Identity' type=Identity>]\n```", "```py\n>>> add_10.get_concrete_function(tf.constant(0)).graph.get_operations()\n[<tf.Operation 'x' type=Placeholder>, [...],\n <tf.Operation 'while' type=StatelessWhile>, [...]]\n```", "```py\ncounter = tf.Variable(0)\n\n@tf.function\ndef increment(counter, c=1):\n    return counter.assign_add(c)\n\nincrement(counter)  # counter is now equal to 1\nincrement(counter)  # counter is now equal to 2\n```", "```py\n>>> function_def = increment.get_concrete_function(counter).function_def\n>>> function_def.signature.input_arg[0]\nname: \"counter\"\ntype: DT_RESOURCE\n```", "```py\ncounter = tf.Variable(0)\n\n@tf.function\ndef increment(c=1):\n    return counter.assign_add(c)\n```", "```py\nclass Counter:\n    def __init__(self):\n        self.counter = tf.Variable(0)\n\n    @tf.function\n    def increment(self, c=1):\n        return self.counter.assign_add(c)\n```", "```py\nmodel = MyModel(dynamic=True)\n```", "```py\nclass MyDense(tf.keras.layers.Layer):\n    def __init__(self, units, **kwargs):\n        super().__init__(dynamic=True, **kwargs)\n        [...]\n```", "```py\nmodel.compile(loss=my_mse, optimizer=\"nadam\", metrics=[my_mae],\n              run_eagerly=True)\n```"]