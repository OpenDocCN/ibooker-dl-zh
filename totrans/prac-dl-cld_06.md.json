["```py\n$ nvidia-smi\n```", "```py\n$ watch -n .5 nvidia-smi\n```", "```py\n$ nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits -f\ngpu_utilization.csv -l 1\n```", "```py\n$ sort -n gpu_utilization.csv | grep -v '^0$' | datamash median 1\n```", "```py\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=\"/tmp\",\n                                                      profile_batch=7)\n\nmodel.fit(train_data,\n          steps_per_epoch=10,\n          epochs=2, \n          callbacks=[`tensorboard_callback`])\n```", "```py\n*`# Create TFRecord files`*\n\nimport tensorflow as tf\nfrom PIL import Image\nimport numpy as np\nimport io\n\ncat = \"cat.jpg\"\nimg_name_to_labels = {'cat' : 0}\nimg_in_string = open(cat, 'rb').read()\nlabel_for_img = img_name_to_labels['cat']\n\ndef getTFRecord(img, label):\n feature = {\n    'label': _int64_feature(label),\n    'image_raw': _bytes_feature(img),\n }\n return tf.train.Example(features=tf.train.Features(feature=feature))\n\nwith tf.compat.v1.python_io.TFRecordWriter('img.tfrecord') as writer:\n  for filename, label in img_name_to_labels.items():\n    image_string = open(filename, 'rb').read()\n    tf_example = getTFRecord(image_string, label)\n    writer.write(tf_example.SerializeToString())\n```", "```py\n# Reading TFRecord files\n\ndataset = tf.data.TFRecordDataset('img.tfrecord')\nground_truth_info = {\n  'label': tf.compat.v1.FixedLenFeature([], tf.int64),\n  'image_raw': tf.compat.v1.FixedLenFeature([], tf.string),\n}\n\ndef map_operation(read_data):\n  return tf.compat.v1.parse_single_example(read_data, ground_truth_info)\n\nimgs = dataset.map(map_operation)\n\nfor image_features in imgs:\n  image_raw = image_features['image_raw'].numpy()\n  label = image_features['label'].numpy()\n  image = Image.open(io.BytesIO(image_raw))\n  image.show()\n  print(label)\n```", "```py\nimport tensorflow_datasets as tfds\n\n# See available datasets\nprint(tfds.list_builders())\n```", "```py\n===== Output =====\n['abstract_reasoning', 'bair_robot_pushing_small', 'caltech101', 'cats_vs_dogs',\n'celeb_a', 'celeb_a_hq', 'chexpert', 'cifar10', 'cifar100', 'cifar10_corrupted',\n'cnn_dailymail', 'coco2014', 'colorectal_histology',\n'colorectal_histology_large', 'cycle_gan' ...\n```", "```py\ntrain_dataset = tfds.load(name=\"cifar100\", split=tfds.Split.TRAIN)\ntrain_dataset = train_dataset.shuffle(2048).batch(64)\n```", "```py\nfiles = tf.data.Dataset.list_files(\"./training_data/*.tfrecord\")\ndataset = tf.data.TFRecordDataset(files)\n\ndataset = dataset.shuffle(2048)\n                 .repeat()\n                 .map(lambda item: tf.io.parse_single_example(item, features))\n                 .map(_resize_image)\n                 .batch(64)\n```", "```py\ndataset = dataset.prefetch(buffer_size=16)\n```", "```py\ndataset = dataset.map(lambda item: tf.io.parse_single_example(item, features), \n                      `num_parallel_calls``=``4`)\n```", "```py\ndataset = files.interleave(map_func, num_parallel_calls=4)\n```", "```py\noptions = tf.data.Options()\noptions.experimental_deterministic = False\n\ndataset = tf.data.Dataset.list_files(\"./training_data/\")\ndataset = dataset.with_options(options)\ndataset = dataset.interleave(tf.data.TFRecordDataset, num_parallel_calls=4)\n```", "```py\ndataset = dataset.cache()                     *`# in-memory`*\ndataset = dataset.cache(filename='tmp.cache') *`# on-disk`*\n```", "```py\ndataset = dataset.filter(lambda x: x < 1000).filter(lambda x: x % 3 == 0)\n```", "```py\noptions = tf.data.Options()\noptions.experimental_optimization.filter_fusion = True\ndataset = dataset.with_options(options)\n```", "```py\ndataset = dataset.map(lambda x: x * x).filter(lambda x: x % 2 == 0)\n```", "```py\noptions.experimental_optimization.map_and_filter_fusion = True\n```", "```py\noptions.experimental_optimization.map_fusion = True\n```", "```py\ndataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n```", "```py\noptions = tf.data.Options()\noptions.experimental_deterministic = False\n\ndataset = tf.data.Dataset.list_files(\"/path/*.tfrecord\")\ndataset = dataset.with_options(options)\ndataset = files.interleave(tf.data.TFRecordDataset,\n                            num_parallel_calls=tf.data.experimental.AUTOTUNE)\ndataset = dataset.map(preprocess,\n                      num_parallel_calls=tf.data.experimental.AUTOTUNE)\ndataset = dataset.cache() \ndataset = dataset.repeat() \ndataset = dataset.shuffle(2048)\ndataset = dataset.batch(batch_size=64) \ndataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n```", "```py\nupdated_image = tf.image.adjust_hue(image, delta = 0.2)\n```", "```py\nos.environ['TF_ENABLE_AUTO_MIXED_PRECISION'] = '1'\n```", "```py\nlr_finder = LRFinder(model)\nlr_finder.find(x_train, y_train, start_lr=0.0001, end_lr=10, batch_size=512,\n               epochs=5)\nlr_finder.plot_loss(n_skip_beginning=20, n_skip_end=5)\n```", "```py\n# Show Simple Moving Average over 20 points to smoothen the graph\nlr_finder.plot_loss_change(sma=20, n_skip_beginning=20, n_skip_end=5,\n                           y_lim=(-0.01, 0.01))\n```", "```py\nconv_layer = tf.keras.layers.Conv2D(224, 3)\n\ndef non_tf_func(image):\n  for _ in range(1,3):\n        conv_layer(image)\n  return\n\n@tf.function\ndef tf_func(image):\n  for _ in range(1,3):\n        conv_layer(image)\n  return\n\nmat = tf.zeros([1, 100, 100, 100])\n\n# Warm up\nnon_tf_func(mat)\ntf_func(mat)\n\nprint(\"Without @tf.function:\", timeit.timeit(lambda: non_tf_func(mat),\n\t  number=10000), \" seconds\")\nprint(\"With @tf.function:\", timeit.timeit(lambda: tf_func(mat), number=10000),\n\t  \"seconds\")\n```", "```py\n=====Output=====\nWithout @tf.function: 7.234016112051904 seconds\nWith @tf.function:    0.7510978290811181 seconds\n```", "```py\n$ bazel build -c opt --copt=-mavx2 --copt=-msse4.2\n//tensorflow/tools/pip_package:build_pip_package\n```", "```py\n$ lscpu | grep Flags\n\nFlags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36\nclflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm\nconstant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid\naperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16\nxtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt\ntsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch\ncpuid_fault epb cat_l3 cdp_l3 invpcid_single pti intel_ppin ssbd ibrs ibpb stibp\ntpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2\nerms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc\ncqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts md_clear\nflush_l1d\n```", "```py\n*# For Linux and Mac*\n$ conda install tensorflow\n\n*# For Windows*\n$ conda install tensorflow-mkl\n```", "```py\n*`# Example 1`*\nX = tf.multiply(A, B)\nY = tf.multiply(C, D)\n\n*`# Example 2`*\nX = tf.multiply(A, B)\nY = tf.multiply(`X`, C)\n```", "```py\ntf.config.threading.set_inter_op_parallelism_threads(num_threads)\n```", "```py\ntf.config.threading.set_intra_op_parallelism_threads(num_threads)\n```", "```py\nmirrored_strategy = tf.distribute.MirroredStrategy()\nwith mirrored_strategy.scope():\n  model = tf.keras.applications.ResNet50()\n  model.compile(loss=\"mse\", optimizer=\"sgd\")\n```", "```py\n$ horovodrun -np 16 -H\nserver1:4,server2:4,server3:4,server4:4 python\ntrain.py\n```", "```py\n$ nvidia-persistenced --user *`{YOUR_USERNAME}`*\n```"]