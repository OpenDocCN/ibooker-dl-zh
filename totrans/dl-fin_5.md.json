["```py\n`# This is a comment. Comments are ignored by the interpreter`\n\n`# Comments explain the code or give more details about its use`\n\n`# Comments are written in one line, otherwise, you have to re-write '#'`\n```", "```py\n'''\n\nPython was created in the late 1980s by Guido van Rossum.\n\nThe name \"Python\" was inspired by the comedy group Monty Python.\n\n'''\n\n```", "```py\n`# Defining a variable`\nx = 10\ny = 5\n\n`# Writing a constant`\n6\n\n```", "```py\n`# Declaring my_variable`\nmy_variable = 1\n\n`# Declaring My_variable`\nMy_variable = 2\n\n`# The variable my_variable is different from My_variable`\n```", "```py\n`# Returns a SyntaxError`\n1x = 5\n\n`# Valid declaration`\nx1 = 5\n\n`# Valid declaration`\nx1x = 5\n\n```", "```py\n`# Returns a SyntaxError`\nx-y = 5\n\n`# Valid declaration`\nx_y = 5\n\n```", "```py\n`# Recommended name`\nma_lookback = 10\n\n`# Not recommended name`\nthe_lookback_on_that_moving_average = 10\n\n```", "```py\n`# Creating a variable that holds an integer`\nmy_integer = 1\n\n`# Creating a variable that holds a float number`\nmy_float_number = 1.2\n\n`# Using the built-in Python function type() to verify the variables`\ntype(my_integer)\ntype(my_float_number)\n\n```", "```py\nint `# The output of type(my_integer)`\n\nfloat `# The output of type(my_float_number)`\n\n```", "```py\n`# Outputting the phrase \"Hello World\"`\nprint('Hello World')\n```", "```py\nHello World\n```", "```py\n`# Make a statement that the type of my_integer is integer`\ntype(my_integer) is int\n\n`# Make a statement that the type of my_float_number is float`\ntype(my_float_number) is float\n\n`# Make a statement that the type of my_integer is float`\ntype(my_integer) is float\n\n'''\nIntuitively, the two first statements will return True as they are \nindeed true. The third statement is False as the variable my_integer\nis an integer and not a float number\n\n'''\n\n```", "```py\nTrue\nTrue\nFalse\n\n```", "```py\n`# Arithmetic operator - Addition`\n1 + 1 `# The line outputs 2`\n\n`# Arithmetic operator - Subtraction`\n1 - 1 `# The line outputs 0`\n\n`# Arithmetic operator - Multiplication`\n2 * 2 `# The line outputs 4`\n\n`# Arithmetic operator - Division`\n4 / 2 `# The line outputs 2.0 as a float number`\n\n`# Arithmetic operator - Exponents`\n2 ** 4 `# The line outputs 16`\n\n```", "```py\n`# Comparison operator - Equality`\n2 == 2 `# The line outputs True`\n\n`# Comparison operator - Non equality`\n2 != 3 `# The line outputs True`\n\n`# Comparison operator - Greater than`\n2 > 3 `# The line outputs False`\n\n`# Comparison operator - Greater than or equal to`\n2 >= 2 `# The line outputs True`\n\n`# Comparison operator - Less than`\n2 < 3 `# The line outputs True`\n\n`# Comparison operator - Less than or equal to`\n2 <= 2 `# The line outputs True`\n\n```", "```py\n`# Logical operator - and`\n2 and 1 < 4 `# The line outputs True`\n2 and 5 < 4 `# The line outputs False`\n\n`# Logical operator - or`\n2 or 5 < 4 `# The line outputs 2 which is the integer less than 4`\n\n```", "```py\n`# Declaring two variables x and y and assigning them values`\nx = 10\ny = 2.5\n\n`# Checking the types of the variables`\ntype(x) `# Returns int`\ntype(y) `# Returns float`\n\n`# Taking x to the power of y and storing it in a variable z`\nz = x ** y `# Returns 316.22`\n\n`# Checking if the result is greater than or equal to 100`\nz >= 100 `# Returns True as 316.22 >= 100`\n```", "```py\n`# Declaring the variables`\na = 9\nb = 2\n\n`# First condition (specific)`\nif a > b:\n\n\u00a0 \u00a0 print('a is greater than b')\n\n`# Second condition (specific)\u00a0` \u00a0\u00a0\nelif a < b:\n\n\u00a0 \u00a0 print('a is lower than b')\n\n`# Third condition (general)` \u00a0\u00a0\nelse:\n\n\u00a0 \u00a0 print('a is equal to b')\n\n```", "```py\n`# Using a for loop`\nfor i in range(1, 5):\n\n\u00a0 \u00a0 print(i)\n\n`# Using a while loop\u00a0\u00a0`\ni = 1\u00a0 \u00a0\u00a0\nwhile i < 5:\n\n\u00a0 \u00a0 print(i)\n\u00a0 \u00a0 i = i + 1\n\n```", "```py\n`# Creating the time series`\ntime_series = [1, 3, 5, 2, 4, 1, 6, 4, 2, 4, 4, 4]\n\nfor i in range(len(time_series)):\n\n\u00a0 \u00a0 `# The condition where the current price rose`\n\u00a0 \u00a0 if time_series[i] > time_series[i - 1]:\n\n\u00a0 \u00a0 \u00a0 \u00a0 print(1)\n\n\u00a0 \u00a0 `# The condition where the current price fell`\n\u00a0 \u00a0 elif time_series[i] < time_series[i - 1]:\n\n\u00a0 \u00a0 \u00a0 \u00a0 print(-1)\u00a0\n\n\u00a0 \u00a0 `# The condition where the current price hasn't changed`\n\u00a0 \u00a0 else:\n\n\u00a0 \u00a0 \u00a0 \u00a0 print(0)\n\n```", "```py\n`# The import statement must be followed by the name of the library`\nimport numpy\n\n`# Optionally, you can give the library a shortcut for easier references`\nimport numpy as np\n\n```", "```py\n`# Importing one function from a library`\nfrom math import sqrt\n\n```", "```py\n`# Defining the function sum_operation and giving it two arguments`\ndef sum_operation(first_variable, second_variable):\n\n\u00a0   `# Outputing the sum of the two variables`\n\u00a0 \u00a0 print(first_variable + second_variable)\n\n`# Calling the function with 1 and 3 as arguments`\nsum_operation(1, 3) `# The output of this line is 4`\n\n```", "```py\n`# Importing the library` \u00a0\u00a0\nimport math\n\n`# Using the natural logarithm function`\nmath.log(10)\n\n`# Using the exponential function (e)`\nmath.exp(3)\n\n`# Using the factorial function`\nmath.factorial(50)\n\n```", "```py\npip install library_name\n```", "```py\n`# Importing the library`\nfrom minepy import MINE\n\n`# Calculating the MIC`\nmine = MINE(alpha = 0.6, c = 15)\nmine.compute_score(sine,cosine)\nMIC = mine.mic()\nprint('Correlation | MIC: ', round(MIC, 3))\n```", "```py\npip install minepy\n```", "```py\n`# Defining a function to sum two variables and return the result`\ndef sum_operation(first_variable, second_variable):\n\n\u00a0 `# The summing operation is stored in a variable called final_sum`\n\u00a0 \u00a0 final_sum = first_variable + second_variable\n\n\u00a0 \u00a0 `# The result is returned`\n\u00a0 \u00a0 return final_sum\n\n`# Create a new variable that holds the result of the function\u00a0 \u00a0\u00a0`\nsummed_value = sum_operation(1, 2)\n\n`# Use the new variable in a new mathematical operation and store the result` double_summed_value = summed_value * 2\n\n```", "```py\n`# Defining a function to square the result gotten from the sum_operation function`\ndef square_summed_value(first_variable, second_variable):\n\n\u00a0 `# Calling the nested sum_operation function and storing its result`\n\u00a0 \u00a0 final_sum = sum_operation(first_variable, second_variable)\n\n\u00a0 `# Creating a variable that stores the square of final_sum`\n\u00a0 \u00a0 squared_sum = final_sum ** 2\n\n\u00a0 \u00a0 `# The result is returned\u00a0 \u00a0`\u00a0\n\u00a0 \u00a0 return squared_sum\n\n`# Create a new variable that holds the result of the function` \u00a0\nsquared_summed_value = square_summed_value(1, 2)\n\n```", "```py\nmatplotlib `# For plotting and visualizing data`\nsklearn    `# For machine learning models`\nscipy      `# For scientific computing and optimization`\nkeras      `# For neural networks`\nmath       `# For using mathematical tools such as square roots`\nrandom     `# For generating random variables`\nrequests   `# For making HTTP requests used in web scraping`\n\n```", "```py\n`# Will not output a SyntaxError if executed`\nmy_range = range(1, 10)\n\n`# Will output a SyntaxError is executed`\nmy_range = range(1, 10\n\n```", "```py\nx + y\n```", "```py\n`# Defining variable x`\nx = 1\n\n`# Defining variable y`\ny = 'Hello\n\n`# Summing the two variables which will raise a TypeError`\nx + y\n\n```", "```py\n`# Importing the required library to create an array`\nimport numpy as np\n\n`# Creating a two-column list with 8 rows`\nmy_time_series = [(1, 3),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (1, 4),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (1, 4),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (1, 6),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (1, 4),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (0, 2),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (1, 1),\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (0, 6)]\n\n`# Transforming the list into an array`\nmy_time_series = np.array(my_time_series)\n\n```", "```py\n`# Defining the function`\ndef division(first_column, second_column):\n\n `# Looping through the length of the created array`\n\u00a0 \u00a0 for i in range(len(my_time_series)):\n\n\u00a0       `# Division operation and storing it in the variable x`\n\u00a0 \u00a0 \u00a0 \u00a0 x = my_time_series[i, first_column] / my_time_series[i + 1, second_column]\n\n        `# Outputting the result`\n\u00a0 \u00a0 \u00a0 \u00a0 print(x)\n\n`# Calling the function`\ndivision(0, 1)\n\n```", "```py\nIndexError: index 8 is out of bounds for axis 0 with size 8\n```", "```py\n`# Defining the function`\ndef division(first_column, second_column):\n\n\u00a0   `# Looping through the length of the created array` \u00a0\u00a0\n\u00a0 \u00a0 for i in range(len(my_time_series)):\n\n `# First part of the exception handling`\n\u00a0 \u00a0 \u00a0 \u00a0 try:\n\n            `# Division operation and storing it in the variable x`\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x = my_time_series[i, first_column] / my_time_series[i + 1, second_column]\n\n\u00a0 `# Outputting the result` \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(x)\n\n\u00a0       `# Exception handling of a specific error \u00a0` \u00a0\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 except IndexError:\n\n\u00a0           `# Ignoring (passing) the error`\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pass\n\n`# Calling the function`\ndivision(0, 1)\n\n```", "```py\n0.25\n0.25\n0.16666666666666666\n0.25\n0.5\n0.0\n0.16666666666666666\n```", "```py\nimport numpy as np\nimport pandas as pd\n\n```", "```py\n`# Creating a data frame`\nmy_data_frame = pd.DataFrame({'first_column' : [1, 2, 3], \n\u00a0                             'second_column' : [4, 5, 6]})\n\n`# Creating an array`\nmy_array = np.array([[1, 4], [2, 5], [3, 6]])\n\n```", "```py\n`# To transform my_data_frame into my_new_array`\nmy_new_array = np.array(my_data_frame)\n\n`# To transform my_array into my_new_data_frame`\nmy_new_data_frame = pd.DataFrame(my_array)\n\n```", "```py\nfirst_array  = np.array([ 1,  2,  3,  5,   8,  13])\nsecond_array = np.array([21, 34, 55, 89, 144, 233])\n\n```", "```py\n`# Reshaping the arrays so they become compatible in multidimensional manipulation` first_array  = np.reshape(first_array, (-1, 1))\nsecond_array = np.reshape(second_array, (-1, 1))\n\n`# Concatenating both arrays by columns`\ncombined_array = np.concatenate((first_array, second_array), axis = 1)\n\n`# Concatenating both arrays by rows`\ncombined_array = np.concatenate((first_array, second_array), axis = 0)\n\n```", "```py\nfirst_data_frame\u00a0 = pd.DataFrame({'first_column'  : [ 1,  2,  3], \n                                  'second_column' : [ 4,  5,  6]})\nsecond_data_frame = pd.DataFrame({'first_column'  : [ 7,  8,  9], \n                                  'second_column' : [10, 11, 12]})\n```", "```py\n`# Concatenating both data frames by columns`\ncombined_data_frame = pd.concat([first_data_frame, second_data_frame], axis = 1)\n\n`# Concatenating both data frames by rows`\ncombined_data_frame = pd.concat([first_data_frame, second_data_frame], axis = 0)\n\n```", "```py\n`# Defining a one-dimensional array`\nmy_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n`# Referring to the first value of the array`\nmy_array[0] `# Outputs 1`\n\n`# Referring to the last value of the array`\nmy_array[-1] `# Outputs 1\u200b0`\n\n`# Referring to the fifth value of the array`\nmy_array[6] `# Outputs 7`\n\n`# Referring to the first three values of the array`\nmy_array[0:3] `# Outputs array([1, 2, 3])`\nmy_array[:3]  `# Outputs array([1, 2, 3])`\n\n`# Referring to the last three values of the array`\nmy_array[-3:] `# Outputs array([8, 9, 10])`\n\n`# Referring to all the values as of the second value`\nmy_array[1:] `# Outputs array([2,\u00a03,\u00a04,\u00a05, 6, 7, 8, 9, 10])`\n\n`# Defining a multi-dimensional array`\nmy_array = np.array([[ 1,  2,  3,  4,  5], \n                     [ 6,  7,  8,  9, 10], \n\u00a0                    [11, 12, 13, 14, 15]])\n\n`# Referring to the first value and second column of the array`\nmy_array[0, 1] `# Outputs 2`\n\n`# Referring to the last value and last column of the array`\nmy_array[-1, -1] `# Outputs 15` \n`# Referring to the third value and second to last column of the array`\nmy_array[2, -2] `# Outputs 14`\n\n`# Referring to the first three and fourth column values of the array`\nmy_array[:, 2:4] `# Outputs array([[3,\u00a04], [8,\u00a09], [13, 14]])`\n\n`# Referring to the last two values and fifth column of the array`\nmy_array[-2:, 4] `# Outputs array([10, 15])`\n\n`# Referring to all the values and all the columns up until the second row`\nmy_array[:2, ] `# Outputs array([[ 1,\u00a02, 3,\u00a04, 5], [6, 7, 8,\u00a09, 10]])`\n\n# `Referring to the last row with all the columns`\nmy_array[-1:, :] `# Outputs array([[11, 12, 13, 14, 15]])`\n\n```", "```py\n`# Defining a one-dimensional data frame`\nmy_df= pd.DataFrame({'first_column': [1, 2, 3, 4, 5, \n\u00a0                                     6, 7, 8, 9, 10]})\n\n`# Referring to the first value of the data frame`\nmy_df.iloc[0]['first_column'] `# Outputs 1`\n\n`# Referring to the last value of the data frame`\nmy_df.iloc[-1]['first_column'] `# Outputs 10`\n\n`# Referring to the fifth value of the data frame`\nmy_df.iloc[6]['first_column'] `# Outputs 7`\n\n`# Referring to the first three values of the data frame`\nmy_df.iloc[0:3]['first_column'] `# Outputs ([1, 2, 3])`\n\n`# Referring to the last three values of the data frame`\nmy_df.iloc[-3:]['first_column'] `# Outputs` ([8, 9, 10])\n\n`# Referring to all the values as of the second value`\nmy_df.iloc[1:]['first_column'] `# Outputs` ([2,\u00a03,\u00a04,\u00a05, 6, 7, 8, 9, 10])\n\n`# Defining a multi-dimensional data frame`\nmy_df\u00a0 = pd.DataFrame({'first_column'\u00a0 : [ 1,\u00a0 6,\u00a0 11],\u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'second_column' : [ 2,\u00a0 7,\u00a0 12],\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'third_column'\u00a0 : [ 3,\u00a0 8,\u00a0 13],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'fourth_column' : [ 4,\u00a0 9,\u00a0 14],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'fifth_column'\u00a0 : [ 5,\u00a0 10, 15]})\n\n`# Referring to the first value and second column of the data frame`\nmy_df.iloc[0]['second_column'] `# Outputs 2`\n\n`# Referring to the last value and last column of the data frame`\nmy_df.iloc[-1]['fifth_column'] `# Outputs 15`\n\n`# Referring to the third value and second to last column of the data frame`\nmy_df.iloc[2]['fourth_column']\u200b `# Outputs 14` \n`# Referring to the first three and fourth column values of the data frame`\nmy_df.iloc[:][['third_column', 'fourth_column']]\n\n`# Referring to the last two values and fifth column of the data frame`\nmy_df.iloc[-2:]['fifth_column']\u200b `# Outputs` `([10, 15])`\n\n`# Referring to all the values and all the columns up until the second row`\nmy_df.iloc[:2,] `# Outputs ([[ 1,\u00a02, 3,\u00a04, 5], [6, 7, 8,\u00a09, 10]])`\n\n`# Referring to the last row with all the columns`\nmy_df.iloc[-1:,]  `# Outputs ([[11, 12, 13, 14, 15]])`\n\n```", "```py\npip install MetaTrader5\n```", "```py\nimport datetime `# Gives tools for manipulating dates and time`\nimport pytz `# Offers cross-platform time zone calculations`\nimport MetaTrader5 as mt5 `# Importing the software's library` import pandas as pd\nimport numpy as np\u00a0\n\n```", "```py\nframe_M15 = mt5.TIMEFRAME_M15      `# 15-minute time`\nframeframe_M30 = mt5.TIMEFRAME_M30 `# 30-minute time frame`\nframe_H1 = mt5.TIMEFRAME_H1        `# Hourly time frame`\nframe_H4 = mt5.TIMEFRAME_H4 `# 4-hour time frame`\nframe_D1 = mt5.TIMEFRAME_D1        `# Daily time frame`\nframe_W1 = mt5.TIMEFRAME_W1        `# Weekly time frame`\nframe_M1 = mt5.TIMEFRAME_MN1       `# Monthly time frame`\n\n```", "```py\nnow = datetime.datetime.now()\n```", "```py\nassets = ['EURUSD', 'USDCHF', 'GBPUSD', 'USDCAD']\n```", "```py\ndef get_quotes(time_frame, year = 2005, month = 1, day = 1, \n\u00a0              asset = \"EURUSD\"):\n\n\u00a0 \u00a0 if not mt5.initialize():\n\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"initialize() failed, error code =\", mt5.last_error())\n\n\u00a0 \u00a0 \u00a0 \u00a0 quit()\n\n\u00a0 \u00a0 timezone = pytz.timezone(\"Europe/Paris\")\n\n\u00a0 \u00a0 time_from = datetime.datetime(year, month, day, tzinfo = timezone)\n\n\u00a0 \u00a0 time_to = datetime.datetime.now(timezone) + datetime.timedelta(days=1)\n\n\u00a0 \u00a0 rates = mt5.copy_rates_range(asset, time_frame, time_from, time_to)\n\n\u00a0 \u00a0 rates_frame = pd.DataFrame(rates)\n\n\u00a0 \u00a0 return rates_frame\n\n```", "```py\nAmerica/New_York\nEurope/London\nEurope/Paris\nAsia/Tokyo\nAustralia/Sydney\n\n```", "```py\ndef mass_import(asset, time_frame):\n\n\u00a0 \u00a0 if time_frame == 'H1':\n\u00a0 \u00a0 \u00a0 \u00a0 data = get_quotes(frame_H1, 2013, 1, 1, asset = assets[asset])\n\u00a0 \u00a0 \u00a0 \u00a0 data = data.iloc[:, 1:5].values\n\u00a0 \u00a0 \u00a0 \u00a0 data = data.round(decimals = 5)\u00a0 \u00a0 \u00a0 \u00a0\u00a0\n\n\u00a0 \u00a0 return data\u00a0\n\n```", "```py\n`# Defining the universe of currency pairs`\nassets = ['EURUSD', 'USDCHF', 'GBPUSD', 'USDCAD']\n\n`# Re-defining the mass_import function to switch to a default 2014`\ndef mass_import(asset, time_frame):\n\n    if time_frame == 'H1':\n        data = get_quotes(frame_H1, 2014, 1, 1, asset = assets[asset])\n        data = data.iloc[:, 1:5].values\n        data = data.round(decimals = 5)  \n\n`# Calling the mass_import function and storing it into a variable`\neurusd_data = mass_import(0, 'H1')\n```", "```py\n`# Importing the excel file into the Python interpreter`\nmy_data = pd.read_excel('eurusd_data.xlsx')\n\n```"]