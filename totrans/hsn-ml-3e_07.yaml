- en: Chapter 6\. Decision Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 决策树
- en: '*Decision trees* are versatile machine learning algorithms that can perform
    both classification and regression tasks, and even multioutput tasks. They are
    powerful algorithms, capable of fitting complex datasets. For example, in [Chapter 2](ch02.html#project_chapter)
    you trained a `DecisionTreeRegressor` model on the California housing dataset,
    fitting it perfectly (actually, overfitting it).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*决策树*是多功能的机器学习算法，可以执行分类和回归任务，甚至多输出任务。它们是强大的算法，能够拟合复杂的数据集。例如，在[第2章](ch02.html#project_chapter)中，你在加利福尼亚住房数据集上训练了一个`DecisionTreeRegressor`模型，完美拟合了它（实际上，过度拟合了）。'
- en: Decision trees are also the fundamental components of random forests (see [Chapter 7](ch07.html#ensembles_chapter)),
    which are among the most powerful machine learning algorithms available today.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树也是随机森林（参见[第7章](ch07.html#ensembles_chapter)）的基本组件之一，随机森林是当今最强大的机器学习算法之一。
- en: In this chapter we will start by discussing how to train, visualize, and make
    predictions with decision trees. Then we will go through the CART training algorithm
    used by Scikit-Learn, and we will explore how to regularize trees and use them
    for regression tasks. Finally, we will discuss some of the limitations of decision
    trees.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先讨论如何训练、可视化和使用决策树进行预测。然后我们将介绍Scikit-Learn使用的CART训练算法，并探讨如何正则化树并将其用于回归任务。最后，我们将讨论决策树的一些局限性。
- en: Training and Visualizing a Decision Tree
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练和可视化决策树
- en: 'To understand decision trees, let’s build one and take a look at how it makes
    predictions. The following code trains a `DecisionTreeClassifier` on the iris
    dataset (see [Chapter 4](ch04.html#linear_models_chapter)):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解决策树，让我们构建一个并看看它如何进行预测。以下代码在鸢尾数据集上训练了一个`DecisionTreeClassifier`（参见[第4章](ch04.html#linear_models_chapter)）：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can visualize the trained decision tree by first using the `export_graphviz()`
    function to output a graph definition file called *iris_tree.dot*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过首先使用`export_graphviz()`函数输出一个名为*iris_tree.dot*的图形定义文件来可视化训练好的决策树：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then you can use `graphviz.Source.from_file()` to load and display the file
    in a Jupyter notebook:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用`graphviz.Source.from_file()`来加载并在Jupyter笔记本中显示文件：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Graphviz](https://graphviz.org) is an open source graph visualization software
    package. It also includes a `dot` command-line tool to convert *.dot* files to
    a variety of formats, such as PDF or PNG.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Graphviz](https://graphviz.org)是一个开源图形可视化软件包。它还包括一个`dot`命令行工具，可以将*.dot*文件转换为各种格式，如PDF或PNG。'
- en: Your first decision tree looks like [Figure 6-1](#iris_tree).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个决策树看起来像[图6-1](#iris_tree)。
- en: '![mls3 0601](assets/mls3_0601.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0601](assets/mls3_0601.png)'
- en: Figure 6-1\. Iris decision tree
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-1. 鸢尾决策树
- en: Making Predictions
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行预测
- en: 'Let’s see how the tree represented in [Figure 6-1](#iris_tree) makes predictions.
    Suppose you find an iris flower and you want to classify it based on its petals.
    You start at the *root node* (depth 0, at the top): this node asks whether the
    flower’s petal length is smaller than 2.45 cm. If it is, then you move down to
    the root’s left child node (depth 1, left). In this case, it is a *leaf node*
    (i.e., it does not have any child nodes), so it does not ask any questions: simply
    look at the predicted class for that node, and the decision tree predicts that
    your flower is an *Iris setosa* (`class=setosa`).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看[图6-1](#iris_tree)中表示的树如何进行预测。假设你找到一朵鸢尾花，想根据其花瓣对其进行分类。你从*根节点*（深度0，顶部）开始：这个节点询问花瓣长度是否小于2.45厘米。如果是，那么你向下移动到根节点的左子节点（深度1，左侧）。在这种情况下，它是一个*叶节点*（即，它没有任何子节点），所以它不会提出任何问题：只需查看该节点的预测类别，决策树预测你的花是*鸢尾山鸢尾*（`class=setosa`）。
- en: 'Now suppose you find another flower, and this time the petal length is greater
    than 2.45 cm. You again start at the root but now move down to its right child
    node (depth 1, right). This is not a leaf node, it’s a *split node*, so it asks
    another question: is the petal width smaller than 1.75 cm? If it is, then your
    flower is most likely an *Iris versicolor* (depth 2, left). If not, it is likely
    an *Iris virginica* (depth 2, right). It’s really that simple.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你找到另一朵花，这次花瓣长度大于2.45厘米。你再次从根节点开始，但现在向下移动到右侧子节点（深度1，右侧）。这不是一个叶节点，它是一个*分裂节点*，所以它提出另一个问题：花瓣宽度是否小于1.75厘米？如果是，那么你的花很可能是*鸢尾杂色*（深度2，左侧）。如果不是，它很可能是*鸢尾维吉尼亚*（深度2，右侧）。就是这么简单。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: One of the many qualities of decision trees is that they require very little
    data preparation. In fact, they don’t require feature scaling or centering at
    all.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树的许多优点之一是它们几乎不需要数据准备。事实上，它们根本不需要特征缩放或居中。
- en: 'A node’s `samples` attribute counts how many training instances it applies
    to. For example, 100 training instances have a petal length greater than 2.45
    cm (depth 1, right), and of those 100, 54 have a petal width smaller than 1.75
    cm (depth 2, left). A node’s `value` attribute tells you how many training instances
    of each class this node applies to: for example, the bottom-right node applies
    to 0 *Iris setosa*, 1 *Iris versicolor*, and 45 *Iris virginica*. Finally, a node’s
    `gini` attribute measures its *Gini impurity*: a node is “pure” (`gini=0`) if
    all training instances it applies to belong to the same class. For example, since
    the depth-1 left node applies only to *Iris setosa* training instances, it is
    pure and its Gini impurity is 0\. [Equation 6-1](#gini_impurity) shows how the
    training algorithm computes the Gini impurity *G*[*i*] of the *i*^(th) node. The
    depth-2 left node has a Gini impurity equal to 1 – (0/54)² – (49/54)² – (5/54)²
    ≈ 0.168.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 节点的`samples`属性计算它适用于多少训练实例。例如，有100个训练实例的花瓣长度大于2.45厘米（深度1，右侧），其中有100个训练实例的花瓣宽度小于1.75厘米（深度2，左侧）。节点的`value`属性告诉您此节点适用于每个类别的训练实例数量：例如，右下节点适用于0个*Iris
    setosa*，1个*Iris versicolor*和45个*Iris virginica*的训练实例。最后，节点的`gini`属性测量其*基尼不纯度*：如果所有适用于该节点的训练实例属于同一类，则节点是“纯净的”（`gini=0`）。例如，由于深度为1的左节点仅适用于*Iris
    setosa*训练实例，因此它是纯净的，其基尼不纯度为0。[方程6-1](#gini_impurity)显示了训练算法如何计算第*i*个节点的基尼不纯度*G*[*i*]。深度为2的左节点的基尼不纯度等于1
    - (0/54)² - (49/54)² - (5/54)² ≈ 0.168。
- en: Equation 6-1\. Gini impurity
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方程6-1\. 基尼不纯度
- en: <math display="block"><mrow><msub><mi>G</mi> <mi>i</mi></msub> <mo>=</mo> <mn>1</mn>
    <mo>-</mo> <munderover><mo>∑</mo> <mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow>
    <mi>n</mi></munderover> <msup><mrow><msub><mi>p</mi> <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub></mrow>
    <mn>2</mn></msup></mrow></math>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="block"><mrow><msub><mi>G</mi> <mi>i</mi></msub> <mo>=</mo> <mn>1</mn>
    <mo>-</mo> <munderover><mo>∑</mo> <mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow>
    <mi>n</mi></munderover> <msup><mrow><msub><mi>p</mi> <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub></mrow>
    <mn>2</mn></msup></mrow></math>
- en: 'In this equation:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方程中：
- en: '*G*[*i*] is the Gini impurity of the *i*^(th) node.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*G*[*i*]是第*i*个节点的基尼不纯度。'
- en: '*p*[*i*,*k*] is the ratio of class *k* instances among the training instances
    in the *i*^(th) node.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*p*[*i*,*k*]是第*i*个节点中训练实例中类*k*实例的比率。'
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Scikit-Learn uses the CART algorithm, which produces only *binary trees*, meaning
    trees where split nodes always have exactly two children (i.e., questions only
    have yes/no answers). However, other algorithms, such as ID3, can produce decision
    trees with nodes that have more than two children.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Learn使用CART算法，该算法仅生成*二叉树*，即分裂节点始终具有两个子节点（即问题只有是/否答案）。但是，其他算法（如ID3）可以生成具有多于两个子节点的决策树。
- en: '[Figure 6-2](#decision_tree_decision_boundaries_plot) shows this decision tree’s
    decision boundaries. The thick vertical line represents the decision boundary
    of the root node (depth 0): petal length = 2.45 cm. Since the lefthand area is
    pure (only *Iris setosa*), it cannot be split any further. However, the righthand
    area is impure, so the depth-1 right node splits it at petal width = 1.75 cm (represented
    by the dashed line). Since `max_depth` was set to 2, the decision tree stops right
    there. If you set `max_depth` to 3, then the two depth-2 nodes would each add
    another decision boundary (represented by the two vertical dotted lines).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-2](#decision_tree_decision_boundaries_plot)显示了此决策树的决策边界。粗垂直线代表根节点（深度0）的决策边界：花瓣长度=2.45厘米。由于左侧区域是纯净的（仅*Iris
    setosa*），因此无法进一步分裂。但是，右侧区域是不纯的，因此深度为1的右节点在花瓣宽度=1.75厘米处分裂（由虚线表示）。由于`max_depth`设置为2，决策树在那里停止。如果将`max_depth`设置为3，则两个深度为2的节点将分别添加另一个决策边界（由两个垂直虚线表示）。'
- en: '![mls3 0602](assets/mls3_0602.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0602](assets/mls3_0602.png)'
- en: Figure 6-2\. Decision tree decision boundaries
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-2\. 决策树决策边界
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The tree structure, including all the information shown in [Figure 6-1](#iris_tree),
    is available via the classifier’s `tree_` attribute. Type **`help(tree_clf.tree_)`**
    for details, and see the [this chapter’s notebook](https://homl.info/colab3) for
    an example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树结构，包括[图6-1](#iris_tree)中显示的所有信息，可以通过分类器的`tree_`属性获得。输入**`help(tree_clf.tree_)`**以获取详细信息，并查看[本章笔记本](https://homl.info/colab3)中的示例。
- en: Estimating Class Probabilities
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 估计类别概率
- en: 'A decision tree can also estimate the probability that an instance belongs
    to a particular class *k*. First it traverses the tree to find the leaf node for
    this instance, and then it returns the ratio of training instances of class *k*
    in this node. For example, suppose you have found a flower whose petals are 5
    cm long and 1.5 cm wide. The corresponding leaf node is the depth-2 left node,
    so the decision tree outputs the following probabilities: 0% for *Iris setosa*
    (0/54), 90.7% for *Iris versicolor* (49/54), and 9.3% for *Iris virginica* (5/54).
    And if you ask it to predict the class, it outputs *Iris versicolor* (class 1)
    because it has the highest probability. Let’s check this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树还可以估计一个实例属于特定类*k*的概率。首先，它遍历树以找到此实例的叶节点，然后返回该节点中类*k*的训练实例的比率。例如，假设您找到了一朵花，其花瓣长5厘米，宽1.5厘米。相应的叶节点是深度为2的左节点，因此决策树输出以下概率：*Iris
    setosa*为0%（0/54），*Iris versicolor*为90.7%（49/54），*Iris virginica*为9.3%（5/54）。如果要求它预测类别，则输出*Iris
    versicolor*（类别1），因为它具有最高概率。让我们来检查一下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Perfect! Notice that the estimated probabilities would be identical anywhere
    else in the bottom-right rectangle of [Figure 6-2](#decision_tree_decision_boundaries_plot)—for
    example, if the petals were 6 cm long and 1.5 cm wide (even though it seems obvious
    that it would most likely be an *Iris virginica* in this case).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！请注意，在[图6-2](#decision_tree_decision_boundaries_plot)的右下矩形中的任何其他位置，估计的概率将是相同的——例如，如果花瓣长6厘米，宽1.5厘米（即使在这种情况下，很明显它很可能是*Iris
    virginica*）。
- en: The CART Training Algorithm
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CART训练算法
- en: Scikit-Learn uses the *Classification and Regression Tree* (CART) algorithm
    to train decision trees (also called “growing” trees). The algorithm works by
    first splitting the training set into two subsets using a single feature *k* and
    a threshold *t*[*k*] (e.g., “petal length ≤ 2.45 cm”). How does it choose *k*
    and *t*[*k*]? It searches for the pair (*k*, *t*[*k*]) that produces the purest
    subsets, weighted by their size. [Equation 6-2](#classification_cart_cost_function)
    gives the cost function that the algorithm tries to minimize.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Learn使用*分类和回归树*（CART）算法来训练决策树（也称为“生长”树）。该算法首先通过使用单个特征*k*和阈值*t*[*k*]（例如，“花瓣长度≤2.45厘米”）将训练集分成两个子集。它如何选择*k*和*t*[*k*]？它搜索产生最纯净子集的配对（*k*，*t*[*k*]），并根据它们的大小加权。[方程6-2](#classification_cart_cost_function)给出了算法试图最小化的成本函数。
- en: Equation 6-2\. CART cost function for classification
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方程6-2\. 用于分类的CART成本函数
- en: <math display="block"><mtable displaystyle="true"><mtr><mtd columnalign="left"><mrow><mi>J</mi>
    <mrow><mo>(</mo> <mi>k</mi> <mo>,</mo> <msub><mi>t</mi> <mi>k</mi></msub> <mo>)</mo></mrow>
    <mo>=</mo> <mstyle scriptlevel="0" displaystyle="true"><mfrac><msub><mi>m</mi>
    <mtext>left</mtext></msub> <mi>m</mi></mfrac></mstyle> <msub><mi>G</mi> <mtext>left</mtext></msub>
    <mo>+</mo> <mstyle scriptlevel="0" displaystyle="true"><mfrac><msub><mi>m</mi>
    <mtext>right</mtext></msub> <mi>m</mi></mfrac></mstyle> <msub><mi>G</mi> <mtext>right</mtext></msub></mrow></mtd></mtr>
    <mtr><mtd columnalign="left"><mrow><mtext>where</mtext> <mfenced separators=""
    open="{" close=""><mtable><mtr><mtd columnalign="left"><mrow><msub><mi>G</mi>
    <mtext>left/right</mtext></msub> <mtext>measures</mtext> <mtext>the</mtext> <mtext>impurity</mtext>
    <mtext>of</mtext> <mtext>the</mtext> <mtext>left/right</mtext> <mtext>subset</mtext></mrow></mtd></mtr>
    <mtr><mtd columnalign="left"><mrow><msub><mi>m</mi> <mtext>left/right</mtext></msub>
    <mtext>is</mtext> <mtext>the</mtext> <mtext>number</mtext> <mtext>of</mtext> <mtext>instances</mtext>
    <mtext>in</mtext> <mtext>the</mtext> <mtext>left/right</mtext> <mtext>subset</mtext></mrow></mtd></mtr></mtable></mfenced></mrow></mtd></mtr></mtable></math>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="block"><mtable displaystyle="true"><mtr><mtd columnalign="left"><mrow><mi>J</mi>
    <mrow><mo>(</mo> <mi>k</mi> <mo>,</mo> <msub><mi>t</mi> <mi>k</mi></msub> <mo>)</mo></mrow>
    <mo>=</mo> <mstyle scriptlevel="0" displaystyle="true"><mfrac><msub><mi>m</mi>
    <mtext>left</mtext></msub> <mi>m</mi></mfrac></mstyle> <msub><mi>G</mi> <mtext>left</mtext></msub>
    <mo>+</mo> <mstyle scriptlevel="0" displaystyle="true"><mfrac><msub><mi>m</mi>
    <mtext>right</mtext></msub> <mi>m</mi></mfrac></mstyle> <msub><mi>G</mi> <mtext>right</mtext></msub></mrow></mtd></mtr>
    <mtr><mtd columnalign="left"><mrow><mtext>其中</mtext> <mfenced separators="" open="{"
    close=""><mtable><mtr><mtd columnalign="left"><mrow><msub><mi>G</mi> <mtext>left/right</mtext></msub>
    <mtext>衡量</mtext> <mtext>左/右</mtext> <mtext>子集的不纯度</mtext></mrow></mtd></mtr>
    <mtr><mtd columnalign="left"><mrow><msub><mi>m</mi> <mtext>left/right</mtext></msub>
    <mtext>是</mtext> <mtext>左/右</mtext> <mtext>子集中实例的数量</mtext></mrow></mtd></mtr></mtable></mfenced></mrow></mtd></mtr></mtable></math>
- en: 'Once the CART algorithm has successfully split the training set in two, it
    splits the subsets using the same logic, then the sub-subsets, and so on, recursively.
    It stops recursing once it reaches the maximum depth (defined by the `max_depth`
    hyperparameter), or if it cannot find a split that will reduce impurity. A few
    other hyperparameters (described in a moment) control additional stopping conditions:
    `min_samples_split`, `min_samples_leaf`, `min_weight_fraction_leaf`, and `max_leaf_nodes`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦CART算法成功将训练集分成两部分，它会使用相同的逻辑分割子集，然后是子子集，依此类推，递归地进行。一旦达到最大深度（由`max_depth`超参数定义），或者无法找到能够减少不纯度的分割时，递归停止。另外几个超参数（稍后描述）控制额外的停止条件：`min_samples_split`，`min_samples_leaf`，`min_weight_fraction_leaf`和`max_leaf_nodes`。
- en: Warning
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'As you can see, the CART algorithm is a *greedy algorithm*: it greedily searches
    for an optimum split at the top level, then repeats the process at each subsequent
    level. It does not check whether or not the split will lead to the lowest possible
    impurity several levels down. A greedy algorithm often produces a solution that’s
    reasonably good but not guaranteed to be optimal.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，CART算法是一种*贪婪算法*：它贪婪地在顶层搜索最佳分割，然后在每个后续级别重复该过程。它不检查分割是否会导致几个级别下可能的最低不纯度。贪婪算法通常会产生一个相当好但不能保证是最佳的解决方案。
- en: Unfortunately, finding the optimal tree is known to be an *NP-complete* problem.⁠^([1](ch06.html#idm45720212134528))
    It requires *O*(exp(*m*)) time, making the problem intractable even for small
    training sets. This is why we must settle for a “reasonably good” solution when
    training decision trees.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，找到最佳树被认为是一个*NP完全*问题。⁠^([1](ch06.html#idm45720212134528)) 它需要*O*(exp(*m*))的时间，使得即使对于小型训练集，问题也难以解决。这就是为什么在训练决策树时我们必须接受“相当好”的解决方案。
- en: Computational Complexity
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算复杂度
- en: Making predictions requires traversing the decision tree from the root to a
    leaf. Decision trees generally are approximately balanced, so traversing the decision
    tree requires going through roughly *O*(log[2](*m*)) nodes, where log[2](*m*)
    is the *binary logarithm* of *m*, equal to log(*m*) / log(2). Since each node
    only requires checking the value of one feature, the overall prediction complexity
    is *O*(log[2](*m*)), independent of the number of features. So predictions are
    very fast, even when dealing with large training sets.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 进行预测需要从根节点到叶节点遍历决策树。决策树通常大致平衡，因此遍历决策树需要经过大约*O*(log[2](*m*))个节点，其中log[2](*m*)是*m*的*二进制对数*，等于log(*m*)
    / log(2)。由于每个节点只需要检查一个特征的值，因此整体预测复杂度为*O*(log[2](*m*))，与特征数量无关。因此，即使处理大型训练集，预测也非常快速。
- en: The training algorithm compares all features (or less if `max_features` is set)
    on all samples at each node. Comparing all features on all samples at each node
    results in a training complexity of *O*(*n* × *m* log[2](*m*)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 训练算法在每个节点上比较所有特征（或少于`max_features`设置的特征）的所有样本。在每个节点上比较所有特征的所有样本会导致训练复杂度为*O*(*n*
    × *m* log[2](*m*)）。
- en: Gini Impurity or Entropy?
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基尼不纯度还是熵？
- en: 'By default, the `DecisionTreeClassifier` class uses the Gini impurity measure,
    but you can select the *entropy* impurity measure instead by setting the `criterion`
    hyperparameter to `"entropy"`. The concept of entropy originated in thermodynamics
    as a measure of molecular disorder: entropy approaches zero when molecules are
    still and well ordered. Entropy later spread to a wide variety of domains, including
    in Shannon’s information theory, where it measures the average information content
    of a message, as we saw in [Chapter 4](ch04.html#linear_models_chapter). Entropy
    is zero when all messages are identical. In machine learning, entropy is frequently
    used as an impurity measure: a set’s entropy is zero when it contains instances
    of only one class. [Equation 6-3](#entropy_function) shows the definition of the
    entropy of the *i*^(th) node. For example, the depth-2 left node in [Figure 6-1](#iris_tree)
    has an entropy equal to –(49/54) log[2] (49/54) – (5/54) log[2] (5/54) ≈ 0.445.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`DecisionTreeClassifier`类使用基尼不纯度度量，但您可以通过将`criterion`超参数设置为`"entropy"`来选择*熵*不纯度度量。熵的概念起源于热力学，作为分子无序性的度量：当分子静止且有序时，熵接近零。熵后来传播到各种领域，包括香农的信息论，在那里它衡量消息的平均信息内容，正如我们在[第4章](ch04.html#linear_models_chapter)中看到的那样。当所有消息相同时，熵为零。在机器学习中，熵经常用作不纯度度量：当集合中只包含一个类的实例时，其熵为零。[方程6-3](#entropy_function)显示了*i*^(th)节点熵的定义。例如，[图6-1](#iris_tree)中深度为2的左节点的熵等于-(49/54)
    log[2] (49/54) - (5/54) log[2] (5/54) ≈ 0.445。
- en: Equation 6-3\. Entropy
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方程6-3\. 熵
- en: <math display="block"><mrow><msub><mi>H</mi> <mi>i</mi></msub> <mo>=</mo> <mo>-</mo>
    <munderover><mo>∑</mo> <mfrac linethickness="0pt"><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow>
    <mrow><msub><mi>p</mi> <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub> <mo>≠</mo><mn>0</mn></mrow></mfrac>
    <mi>n</mi></munderover> <mrow><msub><mi>p</mi> <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub>
    <msub><mo form="prefix">log</mo> <mn>2</mn></msub> <mrow><mo>(</mo> <msub><mi>p</mi>
    <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub> <mo>)</mo></mrow></mrow></mrow></math>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="block"><mrow><msub><mi>H</mi> <mi>i</mi></msub> <mo>=</mo> <mo>-</mo>
    <munderover><mo>∑</mo> <mfrac linethickness="0pt"><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow>
    <mrow><msub><mi>p</mi> <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub> <mo>≠</mo><mn>0</mn></mrow></mfrac>
    <mi>n</mi></munderover> <mrow><msub><mi>p</mi> <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub>
    <msub><mo form="prefix">log</mo> <mn>2</mn></msub> <mrow><mo>(</mo> <msub><mi>p</mi>
    <mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub> <mo>)</mo></mrow></mrow></mrow></math>
- en: 'So, should you use Gini impurity or entropy? The truth is, most of the time
    it does not make a big difference: they lead to similar trees. Gini impurity is
    slightly faster to compute, so it is a good default. However, when they differ,
    Gini impurity tends to isolate the most frequent class in its own branch of the
    tree, while entropy tends to produce slightly more balanced trees.⁠^([2](ch06.html#idm45720212085360))'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您应该使用基尼不纯度还是熵？事实是，大多数情况下并没有太大的区别：它们导致类似的树。基尼不纯度计算速度稍快，因此是一个很好的默认选择。然而，当它们不同时，基尼不纯度倾向于将最频繁的类隔离在树的自己分支中，而熵倾向于产生稍微更平衡的树。
- en: Regularization Hyperparameters
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则化超参数
- en: Decision trees make very few assumptions about the training data (as opposed
    to linear models, which assume that the data is linear, for example). If left
    unconstrained, the tree structure will adapt itself to the training data, fitting
    it very closely—indeed, most likely overfitting it. Such a model is often called
    a *nonparametric model*, not because it does not have any parameters (it often
    has a lot) but because the number of parameters is not determined prior to training,
    so the model structure is free to stick closely to the data. In contrast, a *parametric
    model*, such as a linear model, has a predetermined number of parameters, so its
    degree of freedom is limited, reducing the risk of overfitting (but increasing
    the risk of underfitting).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树对训练数据做出很少的假设（与线性模型相反，线性模型假设数据是线性的，例如）。如果不加约束，树结构将自适应于训练数据，非常紧密地拟合它——事实上，很可能过度拟合。这样的模型通常被称为*非参数模型*，不是因为它没有任何参数（通常有很多），而是因为参数的数量在训练之前不确定，因此模型结构可以自由地紧密地贴近数据。相比之下，*参数模型*，如线性模型，具有预先确定的参数数量，因此其自由度受限，减少了过度拟合的风险（但增加了欠拟合的风险）。
- en: To avoid overfitting the training data, you need to restrict the decision tree’s
    freedom during training. As you know by now, this is called regularization. The
    regularization hyperparameters depend on the algorithm used, but generally you
    can at least restrict the maximum depth of the decision tree. In Scikit-Learn,
    this is controlled by the `max_depth` hyperparameter. The default value is `None`,
    which means unlimited. Reducing `max_depth` will regularize the model and thus
    reduce the risk of overfitting.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免过度拟合训练数据，您需要在训练期间限制决策树的自由度。正如您现在所知，这被称为正则化。正则化超参数取决于所使用的算法，但通常您至少可以限制决策树的最大深度。在Scikit-Learn中，这由`max_depth`超参数控制。默认值为`None`，表示无限制。减少`max_depth`将使模型正则化，从而减少过度拟合的风险。
- en: 'The `DecisionTreeClassifier` class has a few other parameters that similarly
    restrict the shape of the decision tree:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`DecisionTreeClassifier`类还有一些其他参数，类似地限制了决策树的形状：'
- en: '`max_features`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`max_features`'
- en: Maximum number of features that are evaluated for splitting at each node
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个节点评估用于分裂的最大特征数
- en: '`max_leaf_nodes`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`max_leaf_nodes`'
- en: Maximum number of leaf nodes
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点的最大数量
- en: '`min_samples_split`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_samples_split`'
- en: Minimum number of samples a node must have before it can be split
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 节点在可以分裂之前必须具有的最小样本数
- en: '`min_samples_leaf`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_samples_leaf`'
- en: Minimum number of samples a leaf node must have to be created
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点必须具有的最小样本数
- en: '`min_weight_fraction_leaf`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_weight_fraction_leaf`'
- en: Same as `min_samples_leaf` but expressed as a fraction of the total number of
    weighted instances
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与`min_samples_leaf`相同，但表示为加权实例总数的分数
- en: Increasing `min_*` hyperparameters or reducing `max_*` hyperparameters will
    regularize the model.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 增加`min_*`超参数或减少`max_*`超参数将使模型正则化。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Other algorithms work by first training the decision tree without restrictions,
    then *pruning* (deleting) unnecessary nodes. A node whose children are all leaf
    nodes is considered unnecessary if the purity improvement it provides is not statistically
    significant. Standard statistical tests, such as the *χ*² *test* (chi-squared
    test), are used to estimate the probability that the improvement is purely the
    result of chance (which is called the *null hypothesis*). If this probability,
    called the *p-value*, is higher than a given threshold (typically 5%, controlled
    by a hyperparameter), then the node is considered unnecessary and its children
    are deleted. The pruning continues until all unnecessary nodes have been pruned.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 其他算法首先训练没有限制的决策树，然后*修剪*（删除）不必要的节点。如果一个节点的子节点都是叶节点，并且它提供的纯度改进不具有统计显著性，则认为该节点是不必要的。标准统计检验，如*χ*²*检验*（卡方检验），用于估计改进纯粹是由于偶然性导致的概率（称为*零假设*）。如果这个概率，称为*p值*，高于给定阈值（通常为5%，由超参数控制），则认为该节点是不必要的，其子节点将被删除。修剪将继续进行，直到所有不必要的节点都被修剪。
- en: 'Let’s test regularization on the moons dataset, introduced in [Chapter 5](ch05.html#svm_chapter).
    We’ll train one decision tree without regularization, and another with `min_samples_leaf=5`.
    Here’s the code; [Figure 6-3](#min_samples_leaf_plot) shows the decision boundaries
    of each tree:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在moons数据集上测试正则化，该数据集在[第5章](ch05.html#svm_chapter)中介绍。我们将训练一个没有正则化的决策树，另一个使用`min_samples_leaf=5`。以下是代码；[图6-3](#min_samples_leaf_plot)显示了每棵树的决策边界：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![mls3 0603](assets/mls3_0603.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0603](assets/mls3_0603.png)'
- en: Figure 6-3\. Decision boundaries of an unregularized tree (left) and a regularized
    tree (right)
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-3\. 未正则化树的决策边界（左）和正则化树（右）
- en: 'The unregularized model on the left is clearly overfitting, and the regularized
    model on the right will probably generalize better. We can verify this by evaluating
    both trees on a test set generated using a different random seed:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 左边的未正则化模型明显过拟合，右边的正则化模型可能会更好地泛化。我们可以通过在使用不同随机种子生成的测试集上评估这两棵树来验证这一点：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Indeed, the second tree has a better accuracy on the test set.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，第二棵树在测试集上有更好的准确性。
- en: Regression
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归
- en: 'Decision trees are also capable of performing regression tasks. Let’s build
    a regression tree using Scikit-Learn’s `DecisionTreeRegressor` class, training
    it on a noisy quadratic dataset with `max_depth=2`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树也能够执行回归任务。让我们使用Scikit-Learn的`DecisionTreeRegressor`类构建一个回归树，对一个带有`max_depth=2`的嘈杂二次数据集进行训练：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The resulting tree is represented in [Figure 6-4](#regression_tree).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的树在[图6-4](#regression_tree)中表示。
- en: '![mls3 0604](assets/mls3_0604.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0604](assets/mls3_0604.png)'
- en: Figure 6-4\. A decision tree for regression
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-4\. 用于回归的决策树
- en: This tree looks very similar to the classification tree you built earlier. The
    main difference is that instead of predicting a class in each node, it predicts
    a value. For example, suppose you want to make a prediction for a new instance
    with *x*[1] = 0.2\. The root node asks whether *x*[1] ≤ 0.197\. Since it is not,
    the algorithm goes to the right child node, which asks whether *x*[1] ≤ 0.772\.
    Since it is, the algorithm goes to the left child node. This is a leaf node, and
    it predicts `value=0.111`. This prediction is the average target value of the
    110 training instances associated with this leaf node, and it results in a mean
    squared error equal to 0.015 over these 110 instances.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这棵树看起来与您之前构建的分类树非常相似。主要区别在于，每个节点不是预测一个类别，而是预测一个值。例如，假设您想对一个新实例进行预测，其中*x*[1]
    = 0.2。根节点询问*x*[1] ≤ 0.197。由于不是，算法转到右子节点，询问*x*[1] ≤ 0.772。由于是，算法转到左子节点。这是一个叶节点，它预测`value=0.111`。这个预测是与该叶节点关联的110个训练实例的目标值的平均值，导致这110个实例的均方误差等于0.015。
- en: This model’s predictions are represented on the left in [Figure 6-5](#tree_regression_plot).
    If you set `max_depth=3`, you get the predictions represented on the right. Notice
    how the predicted value for each region is always the average target value of
    the instances in that region. The algorithm splits each region in a way that makes
    most training instances as close as possible to that predicted value.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型的预测在左边的[图6-5](#tree_regression_plot)中表示。如果设置`max_depth=3`，则得到右边的预测。请注意，每个区域的预测值始终是该区域实例的目标值的平均值。该算法分割每个区域的方式是使大多数训练实例尽可能接近该预测值。
- en: '![mls3 0605](assets/mls3_0605.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0605](assets/mls3_0605.png)'
- en: Figure 6-5\. Predictions of two decision tree regression models
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-5\. 两个决策树回归模型的预测
- en: The CART algorithm works as described earlier, except that instead of trying
    to split the training set in a way that minimizes impurity, it now tries to split
    the training set in a way that minimizes the MSE. [Equation 6-4](#regression_cart_cost_function)
    shows the cost function that the algorithm tries to minimize.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: CART算法的工作方式与之前描述的相同，只是现在它试图以最小化MSE的方式分割训练集，而不是试图最小化不纯度。[方程6-4](#regression_cart_cost_function)显示了算法试图最小化的成本函数。
- en: Equation 6-4\. CART cost function for regression
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方程6-4\. CART回归的成本函数
- en: <math display="block"><mi>J</mi><mrow><mo>(</mo><mi>k</mi><mo>,</mo><msub><mi>t</mi><mi>k</mi></msub><mo>)</mo></mrow><mo>=</mo><mfrac><msub><mi>m</mi><mtext>left</mtext></msub><mi>m</mi></mfrac><msub><mtext>MSE</mtext><mtext>left</mtext></msub><mo>+</mo><mfrac><msub><mi>m</mi><mtext>right</mtext></msub><mi>m</mi></mfrac><msub><mtext>MSE</mtext><mtext>right</mtext></msub><mtext>where</mtext><mfenced
    open="{" close="" separators=""><mtable><mtr><mtd><msub><mtext>MSE</mtext><mtext>node</mtext></msub><mo>=</mo><mfrac><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mtext>node</mtext></mrow></munder><msup><mrow><mo>(</mo><msub><mover><mi>y</mi><mo>^</mo></mover><mtext>node</mtext></msub><mo>-</mo><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo></mrow><mn>2</mn></msup></mrow><msub><mi>m</mi><mi>node</mi></msub></mfrac></mtd></mtr><mtr><mtd><msub><mover><mi>y</mi><mo>^</mo></mover><mtext>node</mtext></msub><mo>=</mo><mfrac><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mtext>node</mtext></mrow></munder><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup></mrow><msub><mi>m</mi><mi>node</mi></msub></mfrac></mtd></mtr></mtable></mfenced></math>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="block"><mi>J</mi><mrow><mo>(</mo><mi>k</mi><mo>,</mo><msub><mi>t</mi><mi>k</mi></msub><mo>)</mo></mrow><mo>=</mo><mfrac><msub><mi>m</mi><mtext>left</mtext></msub><mi>m</mi></mfrac><msub><mtext>MSE</mtext><mtext>left</mtext></msub><mo>+</mo><mfrac><msub><mi>m</mi><mtext>right</mtext></msub><mi>m</mi></mfrac><msub><mtext>MSE</mtext><mtext>right</mtext></msub><mtext>where</mtext><mfenced
    open="{" close="" separators=""><mtable><mtr><mtd><msub><mtext>MSE</mtext><mtext>node</mtext></msub><mo>=</mo><mfrac><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mtext>node</mtext></mrow></munder><msup><mrow><mo>(</mo><msub><mover><mi>y</mi><mo>^</mo></mover><mtext>node</mtext></msub><mo>-</mo><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo></mrow><mn>2</mn></msup></mrow><msub><mi>m</mi><mi>node</mi></msub></mfrac></mtd></mtr><mtr><mtd><msub><mover><mi>y</mi><mo>^</mo></mover><mtext>node</mtext></msub><mo>=</mo><mfrac><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mtext>node</mtext></mrow></munder><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup></mrow><msub><mi>m</mi><mi>node</mi></msub></mfrac></mtd></mtr></mtable></mfenced></math>
- en: Just like for classification tasks, decision trees are prone to overfitting
    when dealing with regression tasks. Without any regularization (i.e., using the
    default hyperparameters), you get the predictions on the left in [Figure 6-6](#tree_regression_regularization_plot).
    These predictions are obviously overfitting the training set very badly. Just
    setting `min_samples_leaf=10` results in a much more reasonable model, represented
    on the right in [Figure 6-6](#tree_regression_regularization_plot).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就像分类任务一样，决策树在处理回归任务时容易过拟合。没有任何正则化（即使用默认超参数），您会得到[图6-6](#tree_regression_regularization_plot)左侧的预测结果。这些预测显然严重过拟合了训练集。只需设置`min_samples_leaf=10`就会得到一个更合理的模型，如[图6-6](#tree_regression_regularization_plot)右侧所示。
- en: '![mls3 0606](assets/mls3_0606.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0606](assets/mls3_0606.png)'
- en: Figure 6-6\. Predictions of an unregularized regression tree (left) and a regularized
    tree (right)
  id: totrans-92
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-6。未正则化回归树的预测（左）和正则化树（右）
- en: Sensitivity to Axis Orientation
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对轴方向的敏感性
- en: 'Hopefully by now you are convinced that decision trees have a lot going for
    them: they are relatively easy to understand and interpret, simple to use, versatile,
    and powerful. However, they do have a few limitations. First, as you may have
    noticed, decision trees love orthogonal decision boundaries (all splits are perpendicular
    to an axis), which makes them sensitive to the data’s orientation. For example,
    [Figure 6-7](#sensitivity_to_rotation_plot) shows a simple linearly separable
    dataset: on the left, a decision tree can split it easily, while on the right,
    after the dataset is rotated by 45°, the decision boundary looks unnecessarily
    convoluted. Although both decision trees fit the training set perfectly, it is
    very likely that the model on the right will not generalize well.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到目前为止您已经相信决策树有很多优点：它们相对容易理解和解释，简单易用，多功能且强大。然而，它们也有一些局限性。首先，正如您可能已经注意到的，决策树喜欢正交的决策边界（所有分割都垂直于一个轴），这使它们对数据的方向敏感。例如，[图6-7](#sensitivity_to_rotation_plot)显示了一个简单的线性可分数据集：在左侧，决策树可以轻松分割它，而在右侧，数据集旋转了45°后，决策边界看起来过于复杂。尽管两个决策树都完美拟合了训练集，但右侧的模型很可能泛化效果不佳。
- en: '![mls3 0607](assets/mls3_0607.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0607](assets/mls3_0607.png)'
- en: Figure 6-7\. Sensitivity to training set rotation
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-7。对训练集旋转的敏感性
- en: One way to limit this problem is to scale the data, then apply a principal component
    analysis transformation. We will look at PCA in detail in [Chapter 8](ch08.html#dimensionality_chapter),
    but for now you only need to know that it rotates the data in a way that reduces
    the correlation between the features, which often (not always) makes things easier
    for trees.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 限制这个问题的一种方法是对数据进行缩放，然后应用主成分分析转换。我们将在[第8章](ch08.html#dimensionality_chapter)中详细讨论PCA，但现在您只需要知道它以一种减少特征之间相关性的方式旋转数据，这通常（不总是）使决策树更容易处理。
- en: 'Let’s create a small pipeline that scales the data and rotates it using PCA,
    then train a `DecisionTreeClassifier` on that data. [Figure 6-8](#pca_preprocessing_plot)
    shows the decision boundaries of that tree: as you can see, the rotation makes
    it possible to fit the dataset pretty well using only one feature, *z*[1], which
    is a linear function of the original petal length and width. Here’s the code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个小型流水线，对数据进行缩放并使用PCA进行旋转，然后在该数据上训练`DecisionTreeClassifier`。[图6-8](#pca_preprocessing_plot)显示了该树的决策边界：正如您所看到的，旋转使得只使用一个特征*z*[1]就可以很好地拟合数据集，该特征是原始花瓣长度和宽度的线性函数。以下是代码：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![mls3 0608](assets/mls3_0608.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0608](assets/mls3_0608.png)'
- en: Figure 6-8\. A tree’s decision boundaries on the scaled and PCA-rotated iris
    dataset
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-8。树在经过缩放和PCA旋转的鸢尾花数据集上的决策边界
- en: Decision Trees Have a High Variance
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决策树具有高方差
- en: 'More generally, the main issue with decision trees is that they have quite
    a high variance: small changes to the hyperparameters or to the data may produce
    very different models. In fact, since the training algorithm used by Scikit-Learn
    is stochastic—it randomly selects the set of features to evaluate at each node—even
    retraining the same decision tree on the exact same data may produce a very different
    model, such as the one represented in [Figure 6-9](#decision_tree_high_variance_plot)
    (unless you set the `random_state` hyperparameter). As you can see, it looks very
    different from the previous decision tree ([Figure 6-2](#decision_tree_decision_boundaries_plot)).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，决策树的主要问题是它们具有相当高的方差：对超参数或数据进行微小更改可能会产生非常不同的模型。实际上，由于Scikit-Learn使用的训练算法是随机的——它在每个节点随机选择要评估的特征集，即使在完全相同的数据上重新训练相同的决策树也可能产生非常不同的模型，例如[图6-9](#decision_tree_high_variance_plot)中所示的模型（除非您设置`random_state`超参数）。如您所见，它看起来与先前的决策树非常不同（[图6-2](#decision_tree_decision_boundaries_plot)）。
- en: '![mls3 0609](assets/mls3_0609.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![mls3 0609](assets/mls3_0609.png)'
- en: Figure 6-9\. Retraining the same model on the same data may produce a very different
    model
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-9\. 在相同数据上重新训练相同模型可能会产生非常不同的模型
- en: Luckily, by averaging predictions over many trees, it’s possible to reduce variance
    significantly. Such an *ensemble* of trees is called a *random forest*, and it’s
    one of the most powerful types of models available today, as you will see in the
    next chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，通过对许多树的预测进行平均，可以显著减少方差。这样的树*集成*称为*随机森林*，它是当今最强大的模型之一，您将在下一章中看到。
- en: Exercises
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: What is the approximate depth of a decision tree trained (without restrictions)
    on a training set with one million instances?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个包含一百万实例的训练集上训练（无限制）的决策树的大致深度是多少？
- en: Is a node’s Gini impurity generally lower or higher than its parent’s? Is it
    *generally* lower/higher, or *always* lower/higher?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点的基尼不纯度通常低于还是高于其父节点的？它*通常*低于/高于，还是*总是*低于/高于？
- en: If a decision tree is overfitting the training set, is it a good idea to try
    decreasing `max_depth`?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个决策树对训练集过拟合，尝试减小`max_depth`是一个好主意吗？
- en: If a decision tree is underfitting the training set, is it a good idea to try
    scaling the input features?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个决策树对训练集欠拟合，尝试对输入特征进行缩放是一个好主意吗？
- en: 'If it takes one hour to train a decision tree on a training set containing
    one million instances, roughly how much time will it take to train another decision
    tree on a training set containing ten million instances? Hint: consider the CART
    algorithm’s computational complexity.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含一百万实例的训练集上训练一个决策树需要一个小时，那么在包含一千万实例的训练集上训练另一个决策树大约需要多长时间？提示：考虑CART算法的计算复杂度。
- en: If it takes one hour to train a decision tree on a given training set, roughly
    how much time will it take if you double the number of features?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在给定训练集上训练一个决策树需要一个小时，如果您增加特征数量会需要多长时间？
- en: 'Train and fine-tune a decision tree for the moons dataset by following these
    steps:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤为moons数据集训练和微调决策树：
- en: Use `make_moons(n_samples=10000, noise=0.4)` to generate a moons dataset.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`make_moons(n_samples=10000, noise=0.4)`生成一个moons数据集。
- en: Use `train_test_split()` to split the dataset into a training set and a test
    set.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`train_test_split()`将数据集分割为训练集和测试集。
- en: 'Use grid search with cross-validation (with the help of the `GridSearchCV`
    class) to find good hyperparameter values for a `DecisionTreeClassifier`. Hint:
    try various values for `max_leaf_nodes`.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网格搜索结合交叉验证（借助`GridSearchCV`类）来找到`DecisionTreeClassifier`的良好超参数值。提示：尝试不同的`max_leaf_nodes`值。
- en: Train it on the full training set using these hyperparameters, and measure your
    model’s performance on the test set. You should get roughly 85% to 87% accuracy.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些超参数在完整的训练集上训练模型，并在测试集上评估模型的性能。您应该获得大约85%到87%的准确率。
- en: 'Grow a forest by following these steps:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤生成一个森林：
- en: 'Continuing the previous exercise, generate 1,000 subsets of the training set,
    each containing 100 instances selected randomly. Hint: you can use Scikit-Learn’s
    `ShuffleSplit` class for this.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续上一个练习，生成1,000个训练集的子集，每个子集包含随机选择的100个实例。提示：您可以使用Scikit-Learn的`ShuffleSplit`类来实现。
- en: Train one decision tree on each subset, using the best hyperparameter values
    found in the previous exercise. Evaluate these 1,000 decision trees on the test
    set. Since they were trained on smaller sets, these decision trees will likely
    perform worse than the first decision tree, achieving only about 80% accuracy.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个子集上训练一个决策树，使用在前一个练习中找到的最佳超参数值。在测试集上评估这1,000个决策树。由于它们是在较小的数据集上训练的，这些决策树可能表现得比第一个决策树更差，仅获得大约80%的准确率。
- en: Now comes the magic. For each test set instance, generate the predictions of
    the 1,000 decision trees, and keep only the most frequent prediction (you can
    use SciPy’s `mode()` function for this). This approach gives you *majority-vote
    predictions* over the test set.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是魔法时刻。对于每个测试集实例，生成1,000个决策树的预测，并仅保留最频繁的预测（您可以使用SciPy的`mode()`函数）。这种方法为您提供了测试集上的*多数投票预测*。
- en: 'Evaluate these predictions on the test set: you should obtain a slightly higher
    accuracy than your first model (about 0.5 to 1.5% higher). Congratulations, you
    have trained a random forest classifier!'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试集上评估这些预测：您应该获得比第一个模型稍高的准确率（大约高0.5%到1.5%）。恭喜，您已经训练了一个随机森林分类器！
- en: Solutions to these exercises are available at the end of this chapter’s notebook,
    at [*https://homl.info/colab3*](https://homl.info/colab3).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可在本章笔记本的末尾找到，网址为[*https://homl.info/colab3*](https://homl.info/colab3)。
- en: ^([1](ch06.html#idm45720212134528-marker)) P is the set of problems that can
    be solved in *polynomial time* (i.e., a polynomial of the dataset size). NP is
    the set of problems whose solutions can be verified in polynomial time. An NP-hard
    problem is a problem that can be reduced to a known NP-hard problem in polynomial
    time. An NP-complete problem is both NP and NP-hard. A major open mathematical
    question is whether or not P = NP. If P ≠ NP (which seems likely), then no polynomial
    algorithm will ever be found for any NP-complete problem (except perhaps one day
    on a quantum computer).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.html#idm45720212134528-marker)) P是可以在*多项式时间*内解决的问题集（即数据集大小的多项式）。NP是可以在多项式时间内验证解决方案的问题集。NP-hard问题是可以在多项式时间内减少到已知NP-hard问题的问题。NP-complete问题既是NP又是NP-hard。一个重要的数学问题是P是否等于NP。如果P
    ≠ NP（这似乎是可能的），那么任何NP-complete问题都不会找到多项式算法（除非有一天在量子计算机上）。
- en: ^([2](ch06.html#idm45720212085360-marker)) See Sebastian Raschka’s [interesting
    analysis](https://homl.info/19) for more details.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch06.html#idm45720212085360-marker)) 有关更多细节，请参阅Sebastian Raschka的[有趣分析](https://homl.info/19)。
