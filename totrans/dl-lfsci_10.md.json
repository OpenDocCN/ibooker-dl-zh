["```py\nimport deepchem as dc\nimport numpy as np\nfrom model import DRModel\nfrom data import load_images_DR\n\ntrain, valid, test = load_images_DR(split='random', seed=123)\nmodel = DRModel(n_init_kernel=32, augment=False, model_dir='test_model')\nmodel.restore()\n\n```", "```py\nX = test.X\ny = test.y\nfor i in range(10):\n prediction = np.argmax(model.predict_on_batch([X[i]]))\n print('True class: %d, Predicted class: %d' % (y[i], prediction))\n\n```", "```py\nTrue class: 0, Predicted class: 0\nTrue class: 2, Predicted class: 2\nTrue class: 0, Predicted class: 0\nTrue class: 0, Predicted class: 0\nTrue class: 3, Predicted class: 0\nTrue class: 2, Predicted class: 2\nTrue class: 0, Predicted class: 0\nTrue class: 0, Predicted class: 0\nTrue class: 0, Predicted class: 0\nTrue class: 2, Predicted class: 2\n\n```", "```py\nsaliency = model.compute_saliency(X[0])\n\n```", "```py\nprint(saliency.shape)\n\n```", "```py\nsal_map = np.sum(np.abs(saliency), axis=(0,3))\nsal_map -= np.min(sal_map)\nsal_map /= np.max(sal_map)\n\n```", "```py\nbest_sequence = np.random.randint(4, size=101)\nbest_score = \n    float(model.predict_on_batch([dc.metrics.to_one_hot(best_sequence, 4)]))\n\n```", "```py\nfor step in range(1000):\n  index = np.random.randint(101)\n  base = np.random.randint(4)\n  if best_sequence[index] != base:\n    sequence = best_sequence.copy()\n    sequence[index] = base\n    score = float(model.predict_on_batch([dc.metrics.to_one_hot(sequence, 4)]))\n    if score > best_score:\n      best_sequence = sequence\n      best_score = score\n\n```", "```py\ntasks, datasets, transformers = dc.molnet.load_delaney(featurizer='GraphConv')\ntrain_dataset, valid_dataset, test_dataset = datasets\nmodel = GraphConvModel(n_tasks=1, mode='regression', dropout=0.2)\nmodel.fit(train_dataset, nb_epoch=100)\n\n```", "```py\ny_pred = model.predict(test_dataset)\nprint(np.sqrt(np.mean((test_dataset.y-y_pred)**2)))\n\n```", "```py\nmodel = GraphConvModel(n_tasks=1, mode='regression',\n                       dropout=0.2, uncertainty=True)\n\n```", "```py\ny_pred, y_std = model.predict_uncertainty(test_dataset)\n\n```"]