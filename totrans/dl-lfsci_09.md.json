["```py\nimport deepchem as dc\ntasks, datasets, transformers = dc.molnet.load_muv()\ntrain_dataset, valid_dataset, test_dataset = datasets\ntrain_smiles = train_dataset.ids\n\n```", "```py\ntokens = set()\nfor s in train_smiles:\n  tokens = tokens.union(set(s))\ntokens = sorted(list(tokens))\nmax_length = max(len(s) for s in train_smiles)\n\n```", "```py\nfrom deepchem.models.tensorgraph.optimizers import Adam, ExponentialDecay\nfrom deepchem.models.tensorgraph.models.seqtoseq import AspuruGuzikAutoEncoder\nmodel = AspuruGuzikAutoEncoder(tokens, max_length, model_dir='vae')\nbatches_per_epoch = len(train_smiles)/model.batch_size\nlearning_rate = ExponentialDecay(0.001, 0.95, batches_per_epoch)\nmodel.set_optimizer(Adam(learning_rate=learning_rate))\n\n```", "```py\ndef generate_sequences(epochs):\n  for i in range(epochs):\n    for s in train_smiles:\n      yield (s, s)\n\nmodel.fit_sequences(generate_sequences(50))\n\n```", "```py\nimport numpy as np\nfrom rdkit import Chem\npredictions = model.predict_from_embeddings(np.random.normal(size=(1000,196)))\nmolecules = []\nfor p in predictions:\n  smiles = ''.join(p)\n  if Chem.MolFromSmiles(smiles) is not None:\n    molecules.append(smiles)\nfor m in molecules:\n  print(m)\n\n```", "```py\nsmiles_list = ['CCCCCCNNNCCOCC',\n'O=C(O)C(=O)ON/C=N/CO',\n'C/C=N/COCCNSCNCCNN',\n'CCCNC(C(=O)O)c1cc(OC(OC)[SH](=O)=O)ccc1N',\n'CC1=C2C=CCC(=CC(Br)=CC=C1)C2',\n'CCN=NNNC(C)OOCOOOOOCOOO',\n'N#CNCCCCCOCCOC1COCNN1CCCCCCCCCCCCCCCCCCCOOOOOSNNCCCCCSCSCCCCCCCCCOCOOOSS',\n'CCCC(=O)NC1=C(N)C=COO1',\n'CCCSc1cc2nc(C)cnn2c1NC',\n'CONCN1N=NN=CC=C1CC1SSS1',\n'CCCOc1ccccc1OSNNOCCNCSNCCN',\n'C[SH]1CCCN2CCN2C=C1N',\n'CC1=C(C#N)N1NCCC1=COOO1',\n'CN(NCNNNN)C(=O)CCSCc1ccco1',\n'CCCN1CCC1CC=CC1=CC=S1CC=O',\n'C/N=C/c1ccccc1',\n'Nc1cccooo1',\n'CCOc1ccccc1CCCNC(C)c1nccs1',\n'CNNNNNNc1nocc1CCNNC(C)C',\n'COC1=C(CON)C=C2C1=C(C)c1ccccc12',\n'CCOCCCCNN(C)C',\n'CCCN1C(=O)CNC1C',\n'CCN',\n'NCCNCc1cccc2c1C=CC=CC=C2',\n'CCCCCN(NNNCNCCCCCCCCCCSCCCCCCCCCCCCCCNCCNCCCCSSCSSSSSSCCCCCCCCCCCCCSCCCCCSC)\\\nC(O)OCCN',\n'CCCS1=CC=C(C)N(CN)C2NCC2=C1',\n'CCNCCCCCCOc1cccc(F)c1',\n'NN1O[SH](CCCCO)C12C=C2',\n'Cc1cc2cccc3c(CO)cc-3ccc-2c1']\n\n```", "```py\nmolecules = [Chem.MolFromSmiles(x) for x in smiles_list]\u200b  \n\n```", "```py\nprint(sorted([x.GetNumAtoms() for x in molecules]))\n\n```", "```py\n[3, 8, 9, 10, 11, 11, 12, 12, 13, 14, 14, 14, 15, \n16, 16, 16, 17, 17, 17, 17, 18, 19, 19, 20, 20, 22, 24, 69, 80]\n\n```", "```py\ngood_mol_list = [x for x in molecules if x.GetNumAtoms() > 10\n        and x.GetNumAtoms() < 50]\nprint(len(good_mol_list))\n23\n\n```", "```py\nqed_list = [QED.qed(x) for x in good_mol_list]\nfinal_mol_list = [(a,b) for a,b in\n         zip(good_mol_list,qed_list) if b > 0.5]\n\n```", "```py\nMolsToGridImage([x[0] for x in final_mol_list],\nmolsPerRow=3,useSVG=True,\nsubImgSize=(250, 250),\nlegends=[f\"{x[1]:.2f}\" for x in final_mol_list])\n\n```"]