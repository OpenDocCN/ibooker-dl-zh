- en: Chapter 7\. Model-Making Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “By seeking and blundering we learn.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Johann Wolfgang von Goethe
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You’re not limited to the models from TensorFlow Hub. Every day there are new
    and exciting models being tweeted, published, and highlighted in the community
    spotlight. These models and ideas are shared outside the Google-approved hubs,
    and sometimes they are even outside the realm of TensorFlow.js.
  prefs: []
  type: TYPE_NORMAL
- en: You’re starting to advance beyond the garden walls and work with models and
    data in the wild. This chapter is specifically geared toward arming you with new
    ways to make models from existing models, as well as charge you with the challenges
    of gathering and understanding data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduce model conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce Teachable Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train a computer vision model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review where training data comes from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cover some key concepts of training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you finish this chapter, you’ll be armed with a few ways of making a model
    and a better understanding of the process of using data to make a machine learning
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Out-of-Network Model Shopping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow.js hasn’t been around for long. Consequently, the number of models
    available is limited, or at least there are fewer than other frameworks. That
    doesn’t mean you’re out of luck. You can often convert models that were trained
    on other frameworks to TensorFlow.js. Converting existing models to make new models
    that work in a new environment is a great way to find recently developed resources
    and create exciting and contemporary models.
  prefs: []
  type: TYPE_NORMAL
- en: Model Zoos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One somewhat endearing term that has emerged from the machine learning world
    is that a collection of models is sometimes called a *zoo*. These model zoos are
    a treasure trove of models that do a wide variety of tasks for a given framework,
    much like TensorFlow Hub.
  prefs: []
  type: TYPE_NORMAL
- en: The model zoos are a fantastic place to find unique models that could inspire
    or fit your needs. Zoos often link you to published works that explain the choices
    that were made for both the model architecture and the data that was used to create
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The real benefit comes from the principle that once you’ve learned how to convert
    one of these models to TensorFlow.js, you could likely convert a lot of them.
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth taking a moment to review converting models so you can comprehend
    how accessible each model zoo or published model might be to TensorFlow.js.
  prefs: []
  type: TYPE_NORMAL
- en: Converting Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lots of Python-programmed TensorFlow models are saved in a format called Keras
    HDF5\. HDF5 stands for Hierarchical Data Format v5, but is most commonly referred
    to as Keras or merely an h5 file. This file format is portable as one file with
    an h5 extension. The Keras file format has lots of data inside:'
  prefs: []
  type: TYPE_NORMAL
- en: An architecture that specifies the layers of the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of weight values, analogous to the bin files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optimizer and the loss metric for the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is one of the more popular model formats, and more importantly, they are
    easy to convert to TensorFlow.js even though they were trained in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With the knowledge of being able to convert TensorFlow Keras models, it means
    that any TensorFlow tutorial that you find can be read as a tutorial where the
    final product can likely be used in TensorFlow.js.
  prefs: []
  type: TYPE_NORMAL
- en: Running conversion commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To convert from h5 to TensorFlow.js *model.json* and bin files, you’ll need
    [`tfjs-converter`](https://oreil.ly/g46CE). The `tfjs-converter` can also convert
    TensorFlow model types other than just HDF5, so it’s a great tool for handling
    any TensorFlow to TensorFlow.js format.
  prefs: []
  type: TYPE_NORMAL
- en: The converter requires that your computer is set up with Python. Install the
    converter with `pip`. The `pip` command is the package installer for Python, similar
    to `npm` in JavaScript. There are multitudes of tutorials on installing Python
    and `pip` if your computer is not ready. You can run `tfjs-converter` once you
    have `pip` and Python installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the install command for the converter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This installs two things: a no-nonsense converter that you can use in automation
    (`tensorflowjs_converter`) and a walk-through converter that you can run by typing
    **`tensorflowjs_wizard`**. For our purposes, I suggest using the wizard interface
    for conversion so you can take advantage of new capabilities as they become available.'
  prefs: []
  type: TYPE_NORMAL
- en: You run the wizard by calling your newly installed `tensorflowjs_wizard` command
    from the command line, and you’ll be prompted with questions like you see in [Figure 7-1](#tfjs_convert_wizard).
  prefs: []
  type: TYPE_NORMAL
- en: '![Example conversion wizard](assets/ltjs_0701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1\. The wizard starts asking questions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This wizard will ask you for your input model format and your desired output
    model format. It will also ask quite a few questions depending on your answers.
    While the wizard will continue to be updated, here are some concepts you should
    keep in mind while selecting your desired settings:'
  prefs: []
  type: TYPE_NORMAL
- en: When choosing between Graph/Layers models
  prefs: []
  type: TYPE_NORMAL
- en: Remember, Graph models are faster but lack some of the introspective and customization
    properties that Layers models provide.
  prefs: []
  type: TYPE_NORMAL
- en: Compression (via quantization)
  prefs: []
  type: TYPE_NORMAL
- en: This moves your model from storing 32-bit accuracy weights down to 16- or even
    8-bit accuracy weight values. Using fewer bits means your model is substantially
    smaller in a possible sacrifice for accuracy. You should retest your model after
    quantization. Most of the time, this compression is worth it for client-side models.
  prefs: []
  type: TYPE_NORMAL
- en: Shard size
  prefs: []
  type: TYPE_NORMAL
- en: The suggested shard size is to optimize your model for client-side browser caching.
    This should stay the recommended size unless you’re not using the model in the
    client browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The quantization affects the model size on disk only. This provides significant
    network transfer benefits for websites, but when the model is loaded into RAM,
    the values are returned to 32-bit variables in the current TensorFlow.js.
  prefs: []
  type: TYPE_NORMAL
- en: Features continue to show up in the wizard interface. If a new feature shows
    up that confuses you, keep in mind documentation for converting models will be
    available in the [tfjs-converter README source code](https://oreil.ly/ldAPf).
    Your experience will be similar to [Figure 7-2](#tfjs_convert).
  prefs: []
  type: TYPE_NORMAL
- en: '![Example conversion](assets/ltjs_0702.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-2\. An example wizard walk-through on Windows
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The resulting folder contains a converted TensorFlow.js model, ready for use.
    The h5 file is now a *model.json* and the cachable bin files in chunks. You can
    see the resulting conversion in [Figure 7-3](#resulting_conversion).
  prefs: []
  type: TYPE_NORMAL
- en: '![Example conversion](assets/ltjs_0703.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-3\. The TensorFlow.js model result
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Intermediate models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you find a model you’d like to convert to TensorFlow.js, you can now check
    if there’s a converter to move that model to the format Keras HDF5, and then you
    know you can convert it to TensorFlow.js. It’s worth noting that there’s a significant
    effort to standardize models converting to and from a format called [Open Neural
    Network Exchange (ONNX)](https://onnx.ai). Currently, Microsoft and many other
    partners are working on the proper conversion of models in and out of ONNX format,
    which will allow for a framework-independent model format.
  prefs: []
  type: TYPE_NORMAL
- en: If you find a published model that you’d like to utilize in TensorFlow.js, but
    it wasn’t trained in TensorFlow, don’t give up hope. You should check if there’s
    ONNX support for that model type.
  prefs: []
  type: TYPE_NORMAL
- en: Some models do not have a direct conversion to TensorFlow, and because of that,
    you might need a more circuitous route through other conversion services. Outside
    of TensorFlow, the other popular framework library most machine learning enthusiasts
    use is called PyTorch. While ONNX is getting closer every day, currently the best
    way to convert from PyTorch to TensorFlow.js is to convert through a chain of
    tools, as shown in [Figure 7-4](#conversion_path).
  prefs: []
  type: TYPE_NORMAL
- en: '![The flow diagram for converting models](assets/ltjs_0704.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-4\. Converting models
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While it might seem like a good bit of work to do a model conversion, converting
    models from existing formats to TensorFlow.js can save you days or even weeks
    of re-creating and retraining a model on the published data.
  prefs: []
  type: TYPE_NORMAL
- en: Your First Customized Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If downloading existing models was all you needed to do, you’d be done. But
    we can’t all wait for Google to release models that classify what we need. You
    might have an idea that requires an AI to have an intimate knowledge of pastries.
    Even Google’s Inception v3 might not be strong enough if you need to know the
    difference between a variety of items in a single domain.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for you, there’s a trick that allows us to ride the coattails of
    existing models. Some models can be slightly adjusted so they classify new things!
    Rather than retraining the entire model, we train the last few layers to look
    for different features. This allows us to take an advanced model like Inception
    or MobileNet and turn it into a model that identifies things we want. As a bonus,
    this method allows us to retrain a model with a minuscule amount of data. This
    is called *transfer learning*, and it’s one of the most common methods for (re)training
    models on new classes.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll cover the code for transfer learning in [Chapter 11](ch11.html#the_chapter_11),
    but there’s no reason you can’t experience it right now. Google has an entire
    transfer learning UI built for people to try training models.
  prefs: []
  type: TYPE_NORMAL
- en: Meet Teachable Machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start things off, you’ll use a tool provided by Google called Teachable Machine.
    This tool is a simple website that is powered by TensorFlow.js, and it lets you
    upload images, upload audio, or even use your webcam for training, capturing data,
    and creating TensorFlow.js models. The models are trained directly in your browser
    and then hosted for you to try your code immediately. Your resulting model is
    a transfer learning version of MobileNet, PoseNet, or some other practical model
    that fits your needs. Because it uses transfer learning, you don’t need much data
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Models created with a small amount of data will appear to work wonders but have
    a significant bias. That means they will work well with the conditions they were
    trained in, but they will error with background, lighting, or positional changes.
  prefs: []
  type: TYPE_NORMAL
- en: The website for training a model is located at [*teachablemachine.withgoogle.com*](https://oreil.ly/CAy4H).
    When you access the site, you can get started with various projects, like audio,
    image, and even body poses. While you can and should experiment with each of these,
    this book will cover the Image Project option. This is the first option shown
    in [Figure 7-5](#teachable_image).
  prefs: []
  type: TYPE_NORMAL
- en: '![Teachable Machine UI](assets/ltjs_0705.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-5\. Awesome Teachable Machine options
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On the resulting page, you’re given the option to either upload or use your
    webcam to collect sample images for each class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few ideas you can use to create your first classifier:'
  prefs: []
  type: TYPE_NORMAL
- en: Thumbs up or thumbs down?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Am I drinking water?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which cat is this?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secret hand signal to unlock something?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Book or banana!?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use your creativity! Whatever model you create could be something easy to show
    off to friends and social media or something that could be turned into a web page
    to help you. For instance, the “Am I drinking water?” classifier could be hooked
    up to a timer for your self-hydration project. You can come up with all kinds
    of fun projects as long as you train the model with a few samples.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I’ll be training a “Is Daddy working?” classifier. Many of you might
    have experienced difficulty with family in a remote work environment. If I’m sitting
    at my desk and the door is closed, you’d think that would tell people I’m working,
    right? But if the door is open, “come on in!” I’ll ask Teachable Machine to use
    my webcam to classify what I look like when I’m working and what I look like when
    I’m not working.
  prefs: []
  type: TYPE_NORMAL
- en: The cool part is that since the detector will be tied to a website, “Is Daddy
    working?” could be expanded to do all kinds of awesome things. It could send text
    messages, turn on an “unavailable” light, or even tell my Amazon Echo devices
    to answer “yes” when asked if I am working. There’s a whole world of opportunity
    as long as I can make a quick AI image classifier that is dependable.
  prefs: []
  type: TYPE_NORMAL
- en: Training from scratch is a scalable solution, but the task at hand is to train
    my presence in my office, and for that, we’ll use Teachable Machine.
  prefs: []
  type: TYPE_NORMAL
- en: Use Teachable Machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a quick tour through the UI for creating a model with Teachable Machine.
    The UI is set up like a network graph where information is filled in top-down
    from left to right. Utilizing the site is easy. Follow along as we review [Figure 7-6](#teachable_tour).
  prefs: []
  type: TYPE_NORMAL
- en: '![Teachable Machine UI Tour](assets/ltjs_0706.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-6\. Image project UI tour
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This upper header is meant to be small and stay out of the way on larger monitors.
    From the header, you can use Google Drive to manage your data and your results,
    so you can pick up where you left off or share the training of your model with
    others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The top item is called “Class 1” and indicates one of the classes for your classification.
    Of course, you can rename it! I’ve renamed mine to “Working.” Inside this workflow
    card, you can provide access to your webcam or upload image files that would fit
    this classification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This second workflow card is any second class. This could be “Free” or “Not
    Working” in the case of my example I’m trying to build. Here you provide the data
    that fits your secondary classification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All classes feed into the training workflow. When you have examples of what
    you want to build, you can click the Train Model button and actively train the
    model. We’ll dig deeper into what this is doing with the Advanced tab when we
    get to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Preview section immediately displays the model’s real-time classifications
    in action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gathering Data and Training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can hold down the webcam’s “Hold to Record” button and instantly provide
    hundreds of images for example data. It’s crucial that you evaluate and include
    variation as much as possible in your dataset. For example, if you’re doing “Thumbs
    up or thumbs down,” it’s important that you move your hands around the screen,
    catch different angles, and put your hands in front of your face, shirt, and any
    other complex background.
  prefs: []
  type: TYPE_NORMAL
- en: For me, I adjusted my lighting, as sometimes I have a camera keylight, and sometimes
    I have backlights. Within a few seconds, I had hundreds of various conditions
    with my office door open and closed. I even did some photos where my door is closed
    but I’m not sitting at my desk.
  prefs: []
  type: TYPE_NORMAL
- en: One of the great things about Teachable Machine is that it gives you the results
    quickly in your browser, so if the model needs more data, you can always come
    back and add more right away.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a few hundred photos, you can click the Train Model button, and
    you’ll see a “Training…” progress graph (see [Figure 7-7](#training_tm)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Training in action screenshot](assets/ltjs_0707.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-7\. Teachable Machine active training
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: So what’s happening now? Succinctly put, Teachable Machine is using your images
    to perform transfer learning to retrain the MobileNet model. A random 85% of your
    data has been used to train the model, and the other 15% is reserved for testing
    the model’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Advanced tab to view the details of this particular configuration.
    This will expose some of what are often called the *hyperparameters* for machine
    learning training (see [Figure 7-8](#advanced_training_card)). These hyperparameters
    are parameters tunable to the model training.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tunable parameters to the training](assets/ltjs_0708.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-8\. Teachable Machine hyperparameters
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In here, you’ll see some new terminology. While it’s not critical for you to
    learn these terms now, you’ll need to learn them eventually, so we’ll go over
    them quickly. Each of these concepts will show up when you get into coding your
    own models in [Chapter 8](ch08.html#the_chapter_8).
  prefs: []
  type: TYPE_NORMAL
- en: Epochs
  prefs: []
  type: TYPE_NORMAL
- en: If you’re coming from coding, especially JavaScript coding, the epoch was January
    1, 1970\. That is *not* what epoch means in this domain. An epoch in machine learning
    training is one full pass through the training data. At the end of an epoch, the
    AI has seen all the training data at least once. Fifty epochs means the model
    will have to see the data 50 times. A good analogy is flashcards. This number
    is how many times you’re going through the entire deck of flashcards with the
    model for it to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Batch size
  prefs: []
  type: TYPE_NORMAL
- en: The model is trained in batches that are loaded into memory. With a few hundred
    photos, you can easily handle all of the images in memory at the same time, but
    it’s nicer to batch in reasonable increments.
  prefs: []
  type: TYPE_NORMAL
- en: Learning rate
  prefs: []
  type: TYPE_NORMAL
- en: The learning rate affects how much the machine learning model should adapt with
    each prediction. You might assume higher learning rates are always better, but
    you’d be wrong. Sometimes, especially when fine-tuning a transfer learning model,
    it’s about the details (as covered in [Chapter 11](ch11.html#the_chapter_11)).
  prefs: []
  type: TYPE_NORMAL
- en: There’s also a button at the bottom of the card with the text “Under the hood,”
    which will give you lots of detailed information on the progress of the trained
    model. Feel free to look at the reports. You’ll implement metrics like these later.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once Teachable Machine is done, it immediately hooks the model up to your webcam
    and shows you what the model predicts. This is a great opportunity for you to
    test the results of the model.
  prefs: []
  type: TYPE_NORMAL
- en: For me, when I’m at my desk and my door is closed, the model predicted I was
    working. Hurray! I have a usable model ready to go. Both classes were performing
    impressively well, as illustrated in [Figure 7-9](#success_tm).
  prefs: []
  type: TYPE_NORMAL
- en: '![The preview section showing the model working](assets/ltjs_0709.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-9\. The model works
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Ideally, your training went just as well. Now it’s essential to retrieve the
    trained model so it can be implemented in your more extensive project. If you’d
    like to share your model with your friends, you can click the Export Model button
    in the preview, where you’re given a variety of options. The new modal window
    provides paths for applying your model in TensorFlow, TensorFlow Lite, and TensorFlow.js.
    There’s even an option for hosting your trained model for free, rather than downloading
    and hosting your model yourself. We get all these friendly options and some nifty
    copy-and-paste code for you to quickly implement these models. The export code
    screen should be similar to [Figure 7-10](#tm_code).
  prefs: []
  type: TYPE_NORMAL
- en: '![The Teachable Machine export dialogue.](assets/ltjs_0710.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-10\. Teachable Machine export options
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When your model is downloaded or published, your data is not published with
    it. To save the dataset, you’ll have to save your project in Google Drive. Keep
    this in mind if you plan on advancing your model or growing your dataset over
    time. Identifying and handling edge cases is part of the data science process.
  prefs: []
  type: TYPE_NORMAL
- en: The code provided for free in the copy-and-paste section of Teachable Machine
    hides the nitty-gritty of webcams and tensors with an NPM package called [@teachablemachine/image](https://oreil.ly/kY7YJ).
    While this is great for people who don’t understand webcams and tensors, it’s
    pretty useless for a finalized product. Your advanced UI skills from [Chapter 6](ch06.html#the_chapter_6)
    make your creative potential far superior to the copy-and-paste code option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Each Teachable Machine model will be different; the visual model you just trained
    is built on top of our old friend MobileNet classifier. So when you implement
    the model, resize the input to 224 x 224.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just trained your first model. However, we cut as many corners as we
    could. Training models with a UI is going to be a large part of machine learning,
    and it helps everyone new to machine learning to get a fantastic start. But a
    tensor wizard like yourself can train a much more dynamic model. You’re obviously
    looking to command your machines with explicit instructions like code. So let’s
    get started on training a model by writing some JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Machine Learning Gotchas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When coding, there are a wide variety of issues any developer might have to
    face. Even as programming languages vary, there’s a core set of potholes that
    carries over to every infrastructure. Machine learning is no different. While
    there are issues that might be specific to any chosen genre and problem, it’s
    important to identify these early so you can spot some of the most common complications
    with data-driven algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll quickly elaborate on a few concepts now, but each of these will be revisited
    when they apply to the work in the rest of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Small amounts of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data bias
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overfitting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underfitting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s review these so we can look out for them in upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Small Amounts of Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve had people come to me with an excellent idea for a machine learning solution,
    and they have three labeled samples. Few things in this world could benefit from
    such a small training set. When data is how you train an algorithm, you’ll need
    a fair amount of data. How much? There’s never an answer that fits every problem,
    but you should lean toward more data over less.
  prefs: []
  type: TYPE_NORMAL
- en: Poor Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some people have clean, situated, and organized lives, but in the real world,
    data doesn’t end up that way by accident. If your data has missing, mislabeled,
    or downright outrageous data, it can cause problems in your training. Lots of
    times, data needs to be scrubbed, and outliers need to be removed. Just getting
    the data ready is a big and critical step.
  prefs: []
  type: TYPE_NORMAL
- en: Data Bias
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your data can be clearly labeled, with every detail in the correct place, but
    it might be missing information that would make it work in a real-world case.
    In some cases, this can cause severe ethical issues, and in other cases, this
    can cause your model to perform poorly in various conditions. For instance, my
    “Is Daddy working?” model that I trained earlier ([Figure 7-9](#success_tm)) probably
    won’t work for other people’s office configurations because the data was only
    for my office.
  prefs: []
  type: TYPE_NORMAL
- en: Overfitting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes a model is trained to the point where it only works well on the training
    set data. In some cases, a more straightforward but lower-scoring accuracy would
    generalize better to fit new data points.
  prefs: []
  type: TYPE_NORMAL
- en: See how this separation graph in [Figure 7-11](#overfitting) is overfitting
    the data? While it solves the given problem perfectly, it’s likely to be slower
    and fail as new points it’s never seen get added.
  prefs: []
  type: TYPE_NORMAL
- en: '![Overfitting Graph](assets/ltjs_0711.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-11\. Overfitting data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Sometimes you’ll hear overfitting called *high variance*, which means the fluctuations
    you have in your training data cause the model to randomly fail on new data.
  prefs: []
  type: TYPE_NORMAL
- en: If your goal is to have your model work on new, never-before-seen data, overfitting
    can be a real concern. Fortunately, we have the test and validation sets to help.
  prefs: []
  type: TYPE_NORMAL
- en: Underfitting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your model wasn’t trained enough or it’s structured in a way that’s incapable
    of adapting to the data, the solution might fail or even completely diverge from
    any extrapolated or additional data. This is the opposite of overfitting, but
    in the same sense, it creates a poor model.
  prefs: []
  type: TYPE_NORMAL
- en: See how the separation graph in [Figure 7-12](#underfitting) underfits the subtle
    curve of the data?
  prefs: []
  type: TYPE_NORMAL
- en: '![Underfitting Graph](assets/ltjs_0712.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-12\. Underfitting data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When a model underfits, it is said that the model has *high bias* because of
    grand assumptions on data that are effectively wrong. While similar, do not confuse
    this term with *data bias*, covered earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Datasets Shopping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you understand why having diverse data is essential. While the Teachable
    Machine “Is Daddy working?” model is useful for me, it’s far from diverse enough
    to be used with other offices. Happily, one of the most impressive aspects of
    the machine learning community is how generous everyone is with their hard-earned
    datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Before collecting your data, it’s helpful to research if others have published
    usable and labeled data. It’s also beneficial to see how expert machine learning
    datasets are organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Datasets are like JavaScript libraries: they can seem quite unique at first,
    but after a while, you start to see the same ones referenced time and again. Universities
    around the world have excellent [catalogs of useful datasets](https://oreil.ly/lbvkW),
    and even [Google has a dataset-hosting service](https://oreil.ly/BnddO) similar
    to TensorFlow Hub, but none comes close to the dataset residence known as Kaggle.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Kaggle](https://www.kaggle.com) has a significant collection of datasets for
    all types of data. From bird songs to IMDb reviews, you can train all kinds of
    models with a wide variety of data from Kaggle. [Figure 7-13](#kaggle) shows a
    friendly and searchable interface for datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Your chapter challenge](assets/ltjs_0713.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-13\. Kaggle provides more than 60,000 free datasets
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Whether you’re researching data for training your model or you’re looking for
    ideas of what kind of crazy new thing you can make with machine learning, Kaggle
    has you covered.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Kaggle does more than just provide datasets. It’s also a community for sharing,
    competing, and winning prizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re not interested in the extracurricular aspect of Kaggle, you can generally
    use Google’s dataset search site and most likely find your Kaggle datasets and
    others: [*https://datasetsearch.research.google.com*](https://datasetsearch.research.google.com).'
  prefs: []
  type: TYPE_NORMAL
- en: The Popular Datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the list of datasets grows every day, for a long time, there weren’t
    many to choose from. Published datasets were rare, so a few became the fundamentals
    of training examples. Other datasets were published as the first of their kind
    and unwittingly became the brand ambassador for a type of machine learning. Like
    secret passphrases, these popular datasets get used casually in talks and documentation.
    It’s good to know some of the most common and famous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ImageNet](https://oreil.ly/Et6TH)'
  prefs: []
  type: TYPE_NORMAL
- en: ImageNet was used to train some of the most popular computer vision models.
    This large dataset of images is consistently used by academic researchers to benchmark
    models.
  prefs: []
  type: TYPE_NORMAL
- en: '[MNIST](https://oreil.ly/Rb9Ru)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a collection of 28 x 28 grayscale handwritten digits to train a model
    on reading numbers. It is often the “Hello World” of computer vision models. The
    name comes from its source, a modified dataset from the National Institute of
    Standards and Technology.
  prefs: []
  type: TYPE_NORMAL
- en: '[Iris](https://oreil.ly/EWvgs)'
  prefs: []
  type: TYPE_NORMAL
- en: In 1936, Ronald Fisher figured out you can identify the genus and species of
    iris flowers with three physical measurements. The dataset is a classic for nonvisual
    classification.
  prefs: []
  type: TYPE_NORMAL
- en: '[Boston Housing Prices](https://oreil.ly/RHD65)'
  prefs: []
  type: TYPE_NORMAL
- en: This dataset contains median home values with their associated attributes for
    solving a line of best fit (linear regression) model.
  prefs: []
  type: TYPE_NORMAL
- en: '[The *Titanic*](https://oreil.ly/RtzuS)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the collected passenger log from the “unsinkable” RMS *Titanic* that
    sank on April 15, 1912\. We will use this dataset to create a model in [Chapter 9](ch09.html#the_chapter_9).
  prefs: []
  type: TYPE_NORMAL
- en: '[Wine Quality](https://oreil.ly/K1ekn)'
  prefs: []
  type: TYPE_NORMAL
- en: For brewers and crafters, the idea of using machine learning to identify what
    makes a tasty drink is exhilarating. This dataset contains the physicochemical
    properties of each wine and its score.
  prefs: []
  type: TYPE_NORMAL
- en: '[Pima Indians Diabetics](https://oreil.ly/AZh6O)'
  prefs: []
  type: TYPE_NORMAL
- en: Quite a few datasets are available for health care. This is a small and approachable
    diabetes dataset based on patient history.
  prefs: []
  type: TYPE_NORMAL
- en: '[CIFAR](https://oreil.ly/JgIsD)'
  prefs: []
  type: TYPE_NORMAL
- en: While ImageNet is a gold standard, it’s a bit unapproachable and complicated.
    The CIFAR dataset is a low-resolution and friendly collection of images for classification.
  prefs: []
  type: TYPE_NORMAL
- en: '[Amazon Reviews](https://oreil.ly/cM80L)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a collection of product reviews from Amazon.com over many years. The
    dataset has been used to train the emotional sentiment of text, as you have the
    user’s comments and their ratings. A close second to this would be the IMDb review
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[COCO](https://oreil.ly/qSn9z)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a large-scale object detection, segmentation, and captioning dataset.
  prefs: []
  type: TYPE_NORMAL
- en: These 10 are a good start for standard reference datasets. Machine learning
    enthusiasts will cite these in tweets, talks, and blog posts at will.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, you don’t have a diverse collection of photos of volcanoes on Venus.
    How would you? That doesn’t mean you can’t take a model trained for it and move
    it to your new browser game. Just download the dataset off Kaggle and upload the
    images to Teachable Machine to create a decent “Volcano or Not” astronomy model.
    The same way TensorFlow.js launches you into machine learning orbit, these existing
    models and datasets build a foundation for your application mastery.
  prefs: []
  type: TYPE_NORMAL
- en: Like web development, machine learning contains a variety of specializations.
    Machine learning relies on a variety of skills across data, models, training,
    and tensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter Challenge: R.I.P. You Will Be MNIST'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s your turn to take a model from Keras HDF5 to TensorFlow.js. In the code
    associated with this book, you’ll find a *mnist.h5* file, which contains the model
    for identifying handwritten digits.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Graph TensorFlow.js model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quantize the model with `uint8` to make it small.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the wild card to access all weights in the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the shard size to 12,000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save to a folder *./minist* (*min* because it was quantized, get it!?).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How many bin files and groups were generated?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What was the final output size?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you used the default shard size, how many bin files would have been made?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the answer to this challenge in [Appendix B](app02.html#appendix_b).
  prefs: []
  type: TYPE_NORMAL
- en: Review Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s review the lessons you’ve learned from the code you’ve written in this
    chapter. Take a moment to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re given gigs of data for a specific task, what are some concerns and
    thoughts you would have before training?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a model is trained and gets 99% accuracy, but then when you use it in the
    field, it does terribly, what would you say happened?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the website Google created to help you train your own model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the drawback to using Google’s website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the image dataset used to train MobileNet and other popular machine
    learning models?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solutions to these exercises are available in [Appendix A](app01.html#book_appendix).
  prefs: []
  type: TYPE_NORMAL
