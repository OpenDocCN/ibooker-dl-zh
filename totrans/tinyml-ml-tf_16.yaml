- en: Chapter 16\. Optimizing Energy Usage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章。优化能量使用
- en: The most important advantage that embedded devices have over desktop or mobile
    systems is that they consume very little energy. A server CPU might consume tens
    or hundreds of watts, requiring a cooling system and main power supply to run.
    Even a phone can consume several watts and require daily charging. Microcontrollers
    can run at less than a milliwatt, more than a thousand times less than a phone’s
    CPU, and so run on a coin battery or energy harvesting for weeks, months, or years.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式设备相对于台式机或移动系统最重要的优势是它们消耗的能量非常少。服务器CPU可能消耗几十甚至几百瓦，需要冷却系统和主电源供应才能运行。即使手机也可能消耗几瓦，并需要每天充电。微控制器可以以不到一毫瓦的功率运行，比手机CPU少一千倍以上，因此可以在硬币电池或能量收集上运行数周、数月或数年。
- en: If you’re developing a TinyML product, it’s likely that the most challenging
    constraint you’ll have to deal with is battery life. Requiring human intervention
    to change or recharge batteries is often not feasible, so the useful lifetime
    of your device (how long it will continue working) will be defined by how much
    energy it uses, and how much it can store. The battery capacity is typically limited
    by the physical size of your product (for example, a peel-and-stick sensor is
    unlikely to be able to accommodate anything more than a coin battery), and even
    if you’re able to use energy harvesting, there are sharp limits on how much power
    that can supply. This means that the main area you can control to influence the
    lifetime of your device is how much energy your system uses. In this chapter we
    talk about how you can investigate what your power usage is and how to improve
    it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发TinyML产品，最具挑战性的限制可能是电池寿命。需要人为干预更换或充电电池通常是不可行的，因此您设备的有用寿命（它将继续工作多长时间）将由其使用的能量量和存储量来定义。电池容量通常受产品的物理尺寸限制（例如，一个剥离式传感器不太可能能够容纳超过一个硬币电池），即使您能够使用能量收集，对其供应的功率也有严格限制。这意味着您可以控制的主要领域是影响设备寿命的能量系统使用量。在本章中，我们将讨论如何调查您的功耗以及如何改进它。
- en: Developing Intuition
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 培养直觉
- en: Most desktop engineers have a rough feel for how long different kinds of operations
    take, and they know that a network request is likely to be slower than reading
    some data from RAM, and that it will usually be faster to access a file from a
    solid-state drive (SSD) than a spinning-disk drive. It’s much less common to have
    to think about how much energy different functionality needs, but in order to
    build a mental model and plan for power efficiency, you’ll need to have some rules
    of thumb for what magnitude of energy your operations require.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数台式工程师对不同类型操作所需时间有一个大致的了解，他们知道网络请求可能比从RAM读取数据慢，通常更快地从固态硬盘（SSD）访问文件比从旋转磁盘驱动器访问文件快。但是很少有人需要考虑不同功能需要多少能量，但为了建立心理模型并计划功率效率，您需要一些经验法则来了解您的操作需要多少能量。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We switch back and forth in this chapter between measures of energy and power
    measurements. Power is energy over time, so for example a CPU that uses one joule
    (J) of energy every second would be using one watt of power. Since what we care
    most about is the lifetime of our device, it’s often most helpful to focus on
    average power usage as a metric, because that’s directly proportional to the length
    of time a device can run on a fixed amount of energy stored in a battery. This
    means that we can easily predict that a system that uses an average of 1 mW of
    power will last twice as long as one that uses 2 mW. We will sometimes still refer
    to energy usage for one-off operations that aren’t sustained for long periods
    of time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在能量和功率测量之间来回切换。功率是能量随时间的变化，因此例如，每秒使用1焦耳（J）能量的CPU将使用1瓦特的功率。由于我们最关心的是设备的寿命，因此通常最有帮助的是专注于平均功率使用量作为度量标准，因为这与设备在电池中存储的固定能量量上运行的时间长度成正比。这意味着我们可以轻松预测，一个平均功率使用量为1毫瓦的系统将持续时间是一个使用2毫瓦的系统的两倍。我们有时仍会提到一次性操作的能量使用，这些操作不会持续很长时间。
- en: Typical Component Power Usage
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 典型组件功率使用
- en: 'If you want a deep dive into how much energy system components use, [*Smartphone
    Energy Consumption* by Sasu Tarkoma et al. (Cambridge University Press)](https://oreil.ly/Z3_TQ)
    is a great book to start with. Here are some numbers we’ve derived from their
    calculations:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想深入了解系统组件使用多少能量，[*Sasu Tarkoma等人的《智能手机能量消耗》（剑桥大学出版社）*](https://oreil.ly/Z3_TQ)是一个很好的开始。以下是我们从他们的计算中得出的一些数字：
- en: An Arm Cortex-A9 CPU can use between 500 and 2,000 mW.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arm Cortex-A9 CPU的功耗在500到2000毫瓦之间。
- en: A display might use 400 mW.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示器可能使用400毫瓦。
- en: Active cell radio might use 800 mW.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动蜂窝无线电可能使用800毫瓦。
- en: Bluetooth might use 100 mW.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙可能使用100毫瓦。
- en: 'Going beyond smartphones, here are the best measurements we’ve observed for
    embedded components:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 超越智能手机，以下是我们观察到的嵌入式组件的最佳测量值：
- en: A microphone sensor might use 300 microwatts (µW).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个麦克风传感器可能使用300微瓦（µW）。
- en: Bluetooth Low Energy might use 40 mW.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙低功耗可能使用40毫瓦。
- en: A 320 × 320-pixel monochrome image sensor (like the Himax HM01B0) could use
    1 mW at 30 FPS.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个320×320像素的单色图像传感器（如Himax HM01B0）可能在30 FPS时使用1毫瓦。
- en: An Ambiq Cortex-M4F microcontroller might use 1 mW at 48 MHz clock rate.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ambiq Cortex-M4F微控制器可能在48 MHz时钟频率下使用1毫瓦。
- en: An accelerometer might use 1 mW.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个加速度计可能使用1毫瓦。
- en: These numbers will vary a lot depending on the exact components you use, but
    they’re useful to remember so that you at least know the rough proportions of
    different operations. One top-level summary is that radio uses a lot more power
    than other functionality you might need in an embedded product. Additionally,
    it seems like sensor and processor energy requirements are dropping much faster
    than communications power, so it’s likely that the gap will increase even more
    in the future.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字将根据您使用的确切组件而有很大变化，但它们对于您至少了解不同操作的大致比例是有用的。一个顶层摘要是，无线电使用的功率比您在嵌入式产品中可能需要的其他功能要多得多。此外，传感器和处理器的能量需求下降速度比通信功率快得多，因此未来这种差距可能会进一步增加。
- en: 'Once you have an idea of what the active components in your system are likely
    to use, you’ll need to think about how much energy you can store or harvest to
    power them. Here are some rough figures (thanks to [James Meyers](https://oreil.ly/DLf4t)
    for the energy harvesting estimates):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解了系统中活动组件可能使用的能量，您需要考虑您可以存储或收集多少能量来为它们供电。以下是一些大致数字（感谢[James Meyers](https://oreil.ly/DLf4t)提供的能量收集估算）：
- en: A CR2032 coin battery might hold 2,500 J. This means that if your system is
    using one mW of power on average, you could hope to get roughly a month of use.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个CR2032纽扣电池可能容纳2,500焦耳。这意味着如果您的系统平均使用1毫瓦的功率，您可以希望获得大约一个月的使用时间。
- en: An AA battery might have 15,000 J, giving a six-month lifetime for a 1 mW system.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AA电池可能有15,000焦耳，为1毫瓦系统提供六个月的使用寿命。
- en: Harvesting temperature differences from an industrial machine could yield 1
    to 10 mW per square centimeter.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从工业机器中收集温差可能会产生每平方厘米1至10毫瓦的能量。
- en: Power from indoor light could give 10 µW per square centimeter.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 室内光源可能每平方厘米提供10微瓦的能量。
- en: Outdoor light might enable you to harvest 10 mW for each square centimeter.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 室外光照可能使您能够每平方厘米收集10毫瓦的能量。
- en: As you can see, only industrial temperature differentials or outdoor lighting
    is currently practical for self-powering devices, but as the energy requirements
    of processors and sensors drop, we hope using other methods will start to be possible.
    You can follow commercial suppliers like [Matrix](https://www.matrixindustries.com/en/energy-harvesting)
    or [e-peas](https://e-peas.com) to see some of the latest energy harvesting devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，目前只有工业温差或室外光照对于自供电设备是实际可行的，但随着处理器和传感器的能量需求降低，我们希望使用其他方法将开始变得可能。您可以关注商业供应商如[Matrix](https://www.matrixindustries.com/en/energy-harvesting)或[e-peas](https://e-peas.com)以了解一些最新的能量收集设备。
- en: Hopefully these ballpark numbers will help you sketch out what kind of system
    might be practical for your combination of lifetime, cost, and size requirements.
    They should be enough for at least an initial feasibility check, and if you can
    internalize them as intuitions, you’ll be able to quickly think through a lot
    of different potential trade-offs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些大致数字能帮助您勾勒出对于您的寿命、成本和尺寸要求组合可能实用的系统类型。它们应该足够至少进行初步可行性检查，如果您能将它们内化为直觉，您将能够快速思考许多不同的潜在权衡。
- en: Hardware Choice
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件选择
- en: When you have a rough idea of what kinds of components you might use in your
    product, you’ll need to look at real parts you can purchase. If you’re looking
    for something that’s well documented and accessible to hobbyists, it’s good to
    start by browsing sites like [SparkFun’s](https://www.sparkfun.com), [Arduino’s](https://www.arduino.cc),
    or [AdaFruit’s](https://www.adafruit.com). These offer components that come with
    tutorials, drivers, and advice on connecting to other parts. They are also the
    best place to start prototyping, because you might well be able to get a complete
    system with everything you need already populated. The biggest downsides are that
    you will have a more limited selection, the integrated systems might not be optimized
    for overall power usage, and you will be paying a premium for the extra resources.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您大致了解您的产品可能使用的组件类型时，您需要查看您可以购买的实际零件。如果您正在寻找一些对爱好者来说文档完备且易于获取的东西，最好从浏览像[SparkFun](https://www.sparkfun.com)、[Arduino](https://www.arduino.cc)或[AdaFruit](https://www.adafruit.com)这样的网站开始。这些网站提供的组件配有教程、驱动程序和有关连接到其他部件的建议。它们也是开始原型设计的最佳地点，因为您很可能能够获得已经配置好您所需的一切的完整系统。最大的缺点是您的选择会更有限，集成系统可能不会针对整体功耗进行优化，而且您将为额外资源支付溢价。
- en: 'For more choice and lower prices, but without the valuable support, you can
    try electronics suppliers like [Digi-Key](https://www.digikey.com), [Mouser Electronics](https://www.mouser.com),
    or even [Alibaba](https://oreil.ly/Td-0l). What all of these sites have in common
    is that they should supply datasheets for all of their products. These contain
    a wealth of detail about each part: everything from how to supply clock signals
    to mechanical data on the size of the chip and its pins. The first thing you’ll
    probably want to understand, though, is the power usage, and this can be surprisingly
    difficult to find. As an example, look at [the datasheet for an STMicroelectronics
    Cortex-M0 MCU](https://oreil.ly/fOuLf). There are almost a hundred pages, and
    it’s not obvious from glancing at the table of contents how to find the power
    usage. One trick we’ve found helpful is to search for “milliamps” or “ma” (with
    the spaces) within these documents, because they’re often the units that are used
    to express power usage. In this datasheet that search leads to a table on page
    47, shown in [Figure 16-1](#current_datasheet), which provides values for current
    consumption.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更多选择和更低价格，但没有宝贵的支持，您可以尝试像[Digi-Key](https://www.digikey.com)、[Mouser Electronics](https://www.mouser.com)或甚至[Alibaba](https://oreil.ly/Td-0l)这样的电子供应商。所有这些网站的共同之处是它们应该为其所有产品提供数据表。这些数据表包含有关每个部件的丰富细节：从如何提供时钟信号到有关芯片大小及其引脚的机械数据。然而，您可能最想了解的第一件事是功耗，而这可能会令人惊讶地难以找到。例如，看看[STMicroelectronics
    Cortex-M0 MCU的数据表](https://oreil.ly/fOuLf)。这本书有近百页，从目录中一眼看去并不明显如何找到功耗。我们发现的一个有用技巧是在这些文档中搜索“毫安”或“ma”（带有空格），因为这些通常是用来表示功耗的单位。在这份数据表中，这种搜索导致了第47页上的一个表，如[图16-1](#current_datasheet)所示，提供了电流消耗的值。
- en: '![Typical and maximum current consumption from VDD supply at VDD = 3.6 V](Images/timl_1601.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![VDD供电时的典型和最大电流消耗](Images/timl_1601.png)'
- en: Figure 16-1\. Current consumption table from STMicroelectronics
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图16-1. STMicroelectronics的电流消耗表
- en: This still can be tough to interpret, but what we’re generally interested in
    is how many watts (or milliwatts) this chip might use. To get that, we need to
    multiply the amps shown by the voltage, which is listed as 3.6 volts here (we’ve
    highlighted this at the top of the table). If we do that, we can see that the
    typical power used ranges from nearly a 100 mW down to only 10 when it’s in sleep
    mode. This gives us an idea that the MCU is comparatively power-hungry, though
    its price at 55 cents might compensate for that, depending on your trade-offs.
    You should be able to perform similar kinds of detective work for the datasheets
    of all the components you’re interested in using, and assemble a picture of the
    likely overall power usage based on the sum of all these parts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然可能很难解释，但我们通常感兴趣的是这个芯片可能使用多少瓦特（或毫瓦）。为了得到这个值，我们需要将表中显示的安培数乘以电压，这里列出的电压为3.6伏特（我们已经在表的顶部突出显示了这一点）。如果我们这样做，我们可以看到典型功耗范围从接近100毫瓦到只有在睡眠模式下的10毫瓦。这让我们知道这个微控制器在功耗方面相对较高，尽管其价格为55美分，可能会在您的权衡中得到补偿。您应该能够对您有兴趣使用的所有组件的数据表执行类似的侦探工作，并根据所有这些部分的总和来组装一个关于可能整体功耗的图像。
- en: Measuring Real Power Usage
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量实际功耗
- en: Once you have a set of components, you’ll need to assemble them into a complete
    system. That process is beyond the scope of this book, but we do recommend that
    you try to get something completed as early as possible in the process so that
    you can try out the product in the real world and learn more about its requirements.
    Even if you aren’t using quite the components you want to or don’t have all the
    software ready, getting early feedback is invaluable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了一组组件，您将需要将它们组装成一个完整的系统。这个过程超出了本书的范围，但我们建议您尽早完成一些工作，以便在实际世界中尝试产品并了解更多关于其需求的信息。即使您没有使用您想要的组件或者没有准备好所有软件，获得早期反馈也是非常宝贵的。
- en: Another benefit of having a complete system is that you can test the actual
    power usage. Datasheets and estimates are helpful for planning, but there’s always
    something that doesn’t fit into a simple model, and integration testing will often
    show much higher power consumption than you expect.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个完整的系统的另一个好处是您可以测试实际的功耗。数据表和估算对于规划是有帮助的，但总有一些东西无法适应简单模型，集成测试通常会显示比您预期的更高的功耗。
- en: There are a lot of tools that you can use to measure the power consumption of
    a system, and knowing how to use a multimeter (a device for measuring various
    electrical properties) can be very helpful, but the most reliable method is to
    place a battery with a known capacity in the device and then see how long it lasts.
    This is what you actually care about, after all, and although you might be aiming
    for a lifetime of months or years, most likely your first attempts will run for
    only hours or days. The advantage of this experimental approach is that it captures
    all the effects you care about, including things like failures when the voltage
    drops too low, which probably won’t show up in simple modeling calculations. It
    is also so simple that even a software engineer can manage it!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多工具可以用来测量系统的功耗，了解如何使用万用表（一种用于测量各种电气特性的设备）可能非常有帮助，但最可靠的方法是在设备中放置一个已知容量的电池，然后看它能持续多久。毕竟，这才是您真正关心的，尽管您可能希望它的寿命为几个月或几年，但最有可能的是，您的第一次尝试只能运行几个小时或几天。这种实验方法的优势在于它捕捉了您关心的所有效果，包括当电压下降太低时可能出现的故障，这可能不会在简单的建模计算中显示出来。这种方法也非常简单，即使是软件工程师也可以做到！
- en: Estimating Power Usage for a Model
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为模型估算功耗
- en: The simplest way to estimate how much power a model will use on a particular
    device is to measure the latency for running one inference, and then multiply
    the average power usage of the system for that time period to get the energy usage.
    At the start of a project you’re not likely to have hard figures for the latency
    and power usage, but you can come up with ballpark figures. If you know how many
    arithmetic operations a model requires, and roughly how many operations per second
    a processor can perform, you can roughly estimate the time that model will take
    to execute. Datasheets will usually give you numbers for the power usage of a
    device at a particular frequency and voltage, though beware that they probably
    won’t include common parts of the whole system like memory or peripherals. It’s
    worth taking these early estimates with a big pinch of salt and using them as
    an upper bound on what you might achieve, but at least you can get some idea of
    the feasibility of your approach.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 估计模型在特定设备上使用多少功率的最简单方法是测量运行一个推理所需的延迟，然后将系统的平均功耗乘以该时间段的能量使用量。在项目开始阶段，你可能不太可能有延迟和功耗的确切数字，但你可以得出大致的数字。如果你知道一个模型需要多少算术运算，以及处理器每秒大约可以执行多少运算，你可以大致估计该模型执行所需的时间。数据表通常会给出设备在特定频率和电压下的功耗数据，尽管要注意的是它们可能不包括整个系统的常见部分，比如内存或外设。值得对这些早期估计持怀疑态度，并将它们用作你可能实现的上限，但至少你可以对你的方法的可行性有一些想法。
- en: As an example, if you have a model that takes 60 million operations to execute,
    like the person detector, and you have a chip like an Arm Cortex-M4 running at
    48 MHz, and you believe it can perform two 8-bit multiply/adds per cycle using
    its DSP extensions, you might guess the maximum latency would be 48,000,000/60,000,000
    = 800 ms. If your chip uses 2 mW, that would work out to 1.6 (mJ) per inference.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果你有一个像人体检测器一样需要执行6000万次操作的模型，而你有一个像Arm Cortex-M4这样以48 MHz运行的芯片，并且你相信它可以使用其DSP扩展每个周期执行两次8位乘加运算，你可能会猜测最大延迟为48,000,000/60,000,000
    = 800毫秒。如果你的芯片使用2毫瓦，那么每次推理的能量消耗将为1.6（毫焦）。
- en: Improving Power Usage
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进功耗
- en: Now that you know the approximate lifetime of your system, you’ll probably be
    looking at ways to improve it. You might be able to find hardware modifications
    that help, including turning off modules that you don’t need or replacing components,
    but those are beyond what this book will cover. Luckily, there are some common
    techniques that don’t require electrical engineering knowledge but can help a
    lot. Because these approaches are software-focused, they do assume that the microcontroller
    itself is taking the bulk of the power. If sensors or other components in your
    device are power hogs, you will need to do a hardware investigation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了系统的大致寿命，你可能会寻找改进的方法。你可能会找到一些硬件修改的方法，比如关闭你不需要的模块或更换组件，但这些超出了本书的范围。幸运的是，有一些常见的技术不需要电气工程知识，但可以帮助很多。因为这些方法是以软件为重点的，它们假设微控制器本身占据了大部分功耗。如果你的设备中的传感器或其他组件是耗电量大的，你将需要进行硬件调查。
- en: Duty Cycling
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 占空比
- en: Almost all embedded processors have the ability to put themselves into a sleep
    mode in which they don’t perform any computation and use very little power, but
    are able to wake up either after an interval or when a signal comes in from outside.
    This means that one of the simplest ways of reducing power is to insert sleeps
    between inference calls, so that the processor spends more time in a low-power
    mode. This is commonly known as *duty cycling* in the embedded world. You might
    worry that this excludes continuous sensor data gathering, but many modern microcontrollers
    have direct memory access (DMA) capabilities that are able to sample analog-to-digital
    converters (ADCs) continuously and store the results in memory without any involvement
    from the main processor.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有嵌入式处理器都有能力将自己置于睡眠模式中，在这种模式下它们不执行任何计算，功耗很低，但能够在一段时间后或外部信号进入时唤醒。这意味着减少功耗的最简单方法之一是在推理调用之间插入睡眠，以便处理器在低功耗模式下花费更多时间。这在嵌入式世界中通常被称为*占空比*。你可能会担心这会排除连续传感器数据采集，但许多现代微控制器具有直接内存访问（DMA）功能，能够连续采样模拟数字转换器（ADC）并将结果存储在内存中，而无需主处理器的参与。
- en: In a similar way, you might be able to reduce the frequency at which the processor
    executes instructions so that in effect it runs more slowly, dramatically reducing
    the power it uses. The datasheet example shown earlier demonstrates how the energy
    required drops as the clock frequency decreases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可能能够降低处理器执行指令的频率，使其实际上运行得更慢，从而大幅减少其功耗。之前展示的数据表示例演示了随着时钟频率降低所需能量的减少。
- en: What duty cycling and frequency reduction offer is the ability to trade computation
    for power usage. What this means in practice is that if you can reduce the latency
    of your software, you can trade that for a lower power budget. Even if you are
    able to run within your allotted time, look at ways to optimize latency if you
    want a reduction in power usage.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 占空比和频率降低提供的是通过计算来交换功耗的能力。这在实践中意味着，如果你能减少软件的延迟，你可以用更低的功耗预算来交换。即使你能够在规定的时间内运行，也要寻找优化延迟的方法，如果你想要减少功耗。
- en: Cascading Design
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级联设计
- en: One of the big advantages of machine learning over traditional procedural programming
    is that it makes it easy to scale up or down the amount of compute and storage
    resources required, and the accuracy will usually degrade gracefully. It’s more
    difficult to achieve this with manually coded algorithms, since there aren’t usually
    obvious parameters that you can tweak to affect these properties. What this means
    is that you can create what’s known as a *cascade of models*. Sensor data can
    be fed into a very small model with minimal compute requirements, and even though
    it’s not particularly accurate, it can be tuned so that it has a high likelihood
    of triggering when a particular condition is present (even if it also produces
    a lot of false positives). If the result indicates that something interesting
    has just happened, the same inputs can be fed into a more complex model to produce
    a more accurate result. This process can potentially be repeated for several more
    stages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习相对于传统的过程式编程的一个重要优势是，它可以轻松地扩展或缩减所需的计算和存储资源量，而准确性通常会逐渐降低。手动编码的算法很难实现这一点，因为通常没有明显的参数可以调整以影响这些属性。这意味着您可以创建所谓的*模型级联*。传感器数据可以输入到一个计算要求很小的模型中，即使它不是特别准确，也可以调整它，使其在特定条件存在时有很高的触发概率（即使它也会产生很多误报）。如果结果表明刚刚发生了有趣的事情，相同的输入可以被输入到一个更复杂的模型中，以产生更准确的结果。这个过程可以在几个更多的阶段中重复。
- en: The reason this is useful is that the inaccurate but tiny model can fit into
    a very power-efficient embedded device, and running it continuously won’t drain
    much energy. When a potential event is spotted, a more powerful system can be
    woken up and a larger model run, and so on down the cascade. Because the more
    powerful systems are operating for only a small fraction of the time, their power
    usage doesn’t break the budget. This is how always-on voice interfaces work on
    phones. A DSP is constantly monitoring the microphone, with a model listening
    for “Alexa,” “Siri,” “Hey Google,” or a similar wake word. The main CPU can be
    left in a sleep mode, but when the DSP thinks it might have heard the right phrase,
    it will signal to wake it up. The CPU can then run a much larger and more accurate
    model to confirm whether it really was the right phrase, and perhaps send the
    following speech to an even more powerful processor in the cloud if it was.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处在于，虽然不准确但微小的模型可以适应非常节能的嵌入式设备，并且持续运行它不会消耗太多能量。当发现潜在事件时，可以唤醒一个更强大的系统并运行一个更大的模型，依此类推。因为更强大的系统仅在很短的时间内运行，它们的功耗不会超出预算。这就是手机上始终开启的语音接口是如何工作的。DSP不断监视麦克风，一个模型在监听“Alexa”、“Siri”、“Hey
    Google”或类似的唤醒词。主CPU可以保持在睡眠模式，但当DSP认为可能听到正确的短语时，它会发出信号唤醒它。然后CPU可以运行一个更大更准确的模型来确认是否确实是正确的短语，并且如果是的话，可能将随后的语音发送到云中更强大的处理器。
- en: This means that an embedded product might be able to achieve its goals even
    if it can’t host a model that’s accurate enough to be actionable by itself. If
    you are able to train a network that’s able to spot most true positives, and the
    false positives occur at a low enough frequency, you might be able offload the
    remaining work to the cloud. Radio is very power-hungry, but if you’re able to
    limit its use to rare occasions and for short periods, it might fit in your energy
    budget.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着嵌入式产品即使不能承载一个足够准确以便自行采取行动的模型，也可能实现其目标。如果您能够训练一个能够发现大多数真正阳性的网络，并且假阳性发生的频率足够低，您可能可以将剩余的工作转移到云端。无线电非常耗电，但如果您能够将其使用限制在罕见的情况和短时间内，它可能符合您的能源预算。
- en: Wrapping Up
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: For many of us (your authors included), optimizing for energy consumption is
    an unfamiliar process. Luckily, a lot of the skills we covered for latency optimization
    also apply here, just with different metrics to monitor. It’s generally a good
    idea to focus on latency optimizations before energy, because you’ll often need
    to validate that your product works using a version that gives the short-term
    user experience you want, even if its lifetime isn’t long enough to be useful
    in the real world. In the same way, it often makes sense to tackle the subject
    of [Chapter 17](ch17.xhtml#chapter_17), space optimization, after latency and
    energy. In practice you’re likely to iterate back and forth between all the different
    trade-offs to meet your constraints, but size is often easiest to work on after
    the other aspects are fairly stable.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们许多人（包括您的作者在内），优化能源消耗是一个陌生的过程。幸运的是，我们在优化延迟方面涵盖的许多技能在这里也适用，只是要监控不同的指标。通常最好先专注于延迟优化，因为您通常需要验证您的产品是否能够提供您想要的短期用户体验，即使其寿命不足以在现实世界中有用。同样，通常在延迟和能源之后处理[第17章](ch17.xhtml#chapter_17)的主题，空间优化，是有意义的。在实践中，您可能会在所有不同的权衡之间来回迭代，以满足您的约束条件，但在其他方面相对稳定之后，尺寸通常是最容易处理的。
