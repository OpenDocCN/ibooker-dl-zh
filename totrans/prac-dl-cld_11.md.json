["```py\nimport CoreML\nimport Vision\n\n// load the model\nlet model = try? VNCoreMLModel(for: Resnet50().model)!\n// create a request with a callback\nlet classificationRequest = VNCoreMLRequest(model: model) { \n    (request, error) in\n    // print the results once the request is complete\n    if let observations = request.results as? [VNClassificationObservation] {\n        let results = observations\n                      .map{\"\\($0.identifier) - \\($0.confidence)\"}\n                      .joined(separator: \"\\n\")\n        print(results)\n    }\n}\n// create a request handler taking an image as an argument\nlet requestHandler = VNImageRequestHandler(cgImage: cgImage)\n// execute the request\ntry? requestHandler.perform([classificationRequest])\n```", "```py\nclassificationRequest.imageCropAndScaleOption = .scaleFill\n```", "```py\n    $ cd code/chapter-11/CameraApp\n    ```", "```py\n    $ ./download-coreml-models.sh\n    ```", "```py\n    $ open CameraApp.xcodeproj\n    ```", "```py\n$ pip install --upgrade coremltools\n```", "```py\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nmodel = ResNet50()\n\nimport coremltools\ncoreml_model = coremltools.converters.keras.convert(model)\ncoreml_model.save(\"resnet50.mlmodel\")\n```", "```py\n$ pip install tfcoreml --user --upgrade\n```", "```py\nimport tfcoreml as tf_converter\ntf_converter.convert(tf_model_path = \"input_model.pb\",\n     mlmodel_path = \"output_model.mlmodel\",\n     output_feature_names = [\"MobilenetV1/Predictions/Reshape_1:0\"])\n```", "```py\nlet compiledModelUrl = try MLModel.compileModel(at: downloadedModelUrl)\nlet model = try MLModel(contentsOf: compiledModelUrl)\n```", "```py\nlet modelUrl = bundle.url(forResource: \"MyClassifier\",\n                          withExtension: \"mlmodelc\")!\nlet updatedModelUrl = bundle.url(forResource: \"MyClassifierUpdated\",\n                                 withExtension: \"mlmodelc\")!\n\nlet task = try MLUpdateTask(\n    forModelAt: modelUrl,\n    trainingData: trainData,\n    configuration: nil,\n    completionHandler: { [weak self] (updateContext) in\n          self.model = updateContext.model\n          updateContext.model.write(to: updatedModelUrl)\n    })\n\ntask.resume()\n```", "```py\nimport coremltools\n\nmodel_spec = coremltools.utils.load_spec(\"MyModel.mlmodel\")\n\n*`# 16-bit conversion`*\nmodel_fp16_spec =\ncoremltools.utils.convert_neural_network_spec_weights_to_fp16(model_spec)\ncoremltools.utils.save_spec(model_fp16_spec, \"MyModel_FP16.mlmodel\")\n\n*`# 8-bit or lower quantization`*\nnum_bits = 8\nmodel_quant_spec =\ncoremltools.models.neural_network.quantization_utils.quantize_weights(model_spec,\nnum_bits, \"linear\")\ncoremltools.utils.save_spec(model_quant_spec, \"MyModel_Quant.mlmodel\")\n```"]