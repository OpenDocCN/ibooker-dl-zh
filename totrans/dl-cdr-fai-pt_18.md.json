["```py\ndef get_data(url, presize, resize):\n    path = untar_data(url)\n    return DataBlock(\n        blocks=(ImageBlock, CategoryBlock), get_items=get_image_files,\n        splitter=GrandparentSplitter(valid_name='val'),\n        get_y=parent_label, item_tfms=Resize(presize),\n        batch_tfms=[*aug_transforms(min_scale=0.5, size=resize),\n                    Normalize.from_stats(*imagenet_stats)],\n    ).dataloaders(path, bs=128)\n```", "```py\ndls = get_data(URLs.IMAGENETTE_160, 160, 128)\n```", "```py\ndls.show_batch(max_n=4)\n```", "```py\ndef avg_pool(x): return x.mean((2,3))\n```", "```py\ndef block(ni, nf): return ConvLayer(ni, nf, stride=2)\ndef get_model():\n    return nn.Sequential(\n        block(3, 16),\n        block(16, 32),\n        block(32, 64),\n        block(64, 128),\n        block(128, 256),\n        nn.AdaptiveAvgPool2d(1),\n        Flatten(),\n        nn.Linear(256, dls.c))\n```", "```py\ndef get_learner(m):\n    return Learner(dls, m, loss_func=nn.CrossEntropyLoss(), metrics=accuracy\n                  ).to_fp16()\n\nlearn = get_learner(get_model())\n```", "```py\nlearn.lr_find()\n```", "```py\n(0.47863011360168456, 3.981071710586548)\n```", "```py\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\nclass ResBlock(Module):\n    def __init__(self, ni, nf):\n        self.convs = nn.Sequential(\n            ConvLayer(ni,nf),\n            ConvLayer(nf,nf, norm_type=NormType.BatchZero))\n\n    def forward(self, x): return x + self.convs(x)\n```", "```py\ndef _conv_block(ni,nf,stride):\n    return nn.Sequential(\n        ConvLayer(ni, nf, stride=stride),\n        ConvLayer(nf, nf, act_cls=None, norm_type=NormType.BatchZero))\n```", "```py\nclass ResBlock(Module):\n    def __init__(self, ni, nf, stride=1):\n        self.convs = _conv_block(ni,nf,stride)\n        self.idconv = noop if ni==nf else ConvLayer(ni, nf, 1, act_cls=None)\n        self.pool = noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)\n\n    def forward(self, x):\n        return F.relu(self.convs(x) + self.idconv(self.pool(x)))\n```", "```py\ndef block(ni,nf): return ResBlock(ni, nf, stride=2)\nlearn = get_learner(get_model())\n```", "```py\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\ndef block(ni, nf):\n    return nn.Sequential(ResBlock(ni, nf, stride=2), ResBlock(nf, nf))\n```", "```py\nlearn = get_learner(get_model())\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\ndef _resnet_stem(*sizes):\n    return [\n        ConvLayer(sizes[i], sizes[i+1], 3, stride = 2 if i==0 else 1)\n            for i in range(len(sizes)-1)\n    ] + [nn.MaxPool2d(kernel_size=3, stride=2, padding=1)]\n```", "```py\n_resnet_stem(3,32,32,64)\n```", "```py\n[ConvLayer(\n   (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n   (1): BatchNorm2d(32, eps=1e-05, momentum=0.1)\n   (2): ReLU()\n ), ConvLayer(\n   (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n   (1): BatchNorm2d(32, eps=1e-05, momentum=0.1)\n   (2): ReLU()\n ), ConvLayer(\n   (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1)\n   (2): ReLU()\n ), MaxPool2d(kernel_size=3, stride=2, padding=1, ceil_mode=False)]\n```", "```py\nclass ResNet(nn.Sequential):\n    def __init__(self, n_out, layers, expansion=1):\n        stem = _resnet_stem(3,32,32,64)\n        self.block_szs = [64, 64, 128, 256, 512]\n        for i in range(1,5): self.block_szs[i] *= expansion\n        blocks = [self._make_layer(*o) for o in enumerate(layers)]\n        super().__init__(*stem, *blocks,\n                         nn.AdaptiveAvgPool2d(1), Flatten(),\n                         nn.Linear(self.block_szs[-1], n_out))\n\n    def _make_layer(self, idx, n_layers):\n        stride = 1 if idx==0 else 2\n        ch_in,ch_out = self.block_szs[idx:idx+2]\n        return nn.Sequential(*[\n            ResBlock(ch_in if i==0 else ch_out, ch_out, stride if i==0 else 1)\n            for i in range(n_layers)\n        ])\n```", "```py\nrn = ResNet(dls.c, [2,2,2,2])\n```", "```py\nlearn = get_learner(rn)\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\ndef _conv_block(ni,nf,stride):\n    return nn.Sequential(\n        ConvLayer(ni, nf//4, 1),\n        ConvLayer(nf//4, nf//4, stride=stride),\n        ConvLayer(nf//4, nf, 1, act_cls=None, norm_type=NormType.BatchZero))\n```", "```py\ndls = get_data(URLs.IMAGENETTE_320, presize=320, resize=224)\n```", "```py\nrn = ResNet(dls.c, [3,4,6,3], 4)\n```", "```py\nlearn = get_learner(rn)\nlearn.fit_one_cycle(20, 3e-3)\n```"]