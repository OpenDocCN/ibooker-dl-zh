["```py\nfrom sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier\n\niris = load_iris(as_frame=True)\nX_iris = iris.data[[\"petal length (cm)\", \"petal width (cm)\"]].values\ny_iris = iris.target\n\ntree_clf = DecisionTreeClassifier(max_depth=2, random_state=42)\ntree_clf.fit(X_iris, y_iris)\n```", "```py\nfrom sklearn.tree import export_graphviz\n\nexport_graphviz(\n        tree_clf,\n        out_file=\"iris_tree.dot\",\n        feature_names=[\"petal length (cm)\", \"petal width (cm)\"],\n        class_names=iris.target_names,\n        rounded=True,\n        filled=True\n    )\n```", "```py\nfrom graphviz import Source\n\nSource.from_file(\"iris_tree.dot\")\n```", "```py\n>>> tree_clf.predict_proba([[5, 1.5]]).round(3)\narray([[0\\.   , 0.907, 0.093]])\n>>> tree_clf.predict([[5, 1.5]])\narray([1])\n```", "```py\nfrom sklearn.datasets import make_moons\n\nX_moons, y_moons = make_moons(n_samples=150, noise=0.2, random_state=42)\n\ntree_clf1 = DecisionTreeClassifier(random_state=42)\ntree_clf2 = DecisionTreeClassifier(min_samples_leaf=5, random_state=42)\ntree_clf1.fit(X_moons, y_moons)\ntree_clf2.fit(X_moons, y_moons)\n```", "```py\n>>> X_moons_test, y_moons_test = make_moons(n_samples=1000, noise=0.2,\n...                                         random_state=43)\n...\n>>> tree_clf1.score(X_moons_test, y_moons_test)\n0.898\n>>> tree_clf2.score(X_moons_test, y_moons_test)\n0.92\n```", "```py\nimport numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\n\nnp.random.seed(42)\nX_quad = np.random.rand(200, 1) - 0.5  # a single random input feature\ny_quad = X_quad ** 2 + 0.025 * np.random.randn(200, 1)\n\ntree_reg = DecisionTreeRegressor(max_depth=2, random_state=42)\ntree_reg.fit(X_quad, y_quad)\n```", "```py\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\npca_pipeline = make_pipeline(StandardScaler(), PCA())\nX_iris_rotated = pca_pipeline.fit_transform(X_iris)\ntree_clf_pca = DecisionTreeClassifier(max_depth=2, random_state=42)\ntree_clf_pca.fit(X_iris_rotated, y_iris)\n```"]