["```py\nkey = 'XXX'\n```", "```py\nexport AZURE_SEARCH_KEY=*your_key_here*\n```", "```py\nkey = os.environ['AZURE_SEARCH_KEY']\n```", "```py\nsearch_images_bing\n```", "```py\n<function utils.search_images_bing(key, term, min_sz=128)>\n```", "```py\nresults = search_images_bing(key, 'grizzly bear')\nims = results.attrgot('content_url')\nlen(ims)\n```", "```py\n150\n```", "```py\ndest = 'images/grizzly.jpg'\ndownload_url(ims[0], dest)\n```", "```py\nim = Image.open(dest)\nim.to_thumb(128,128)\n```", "```py\nbear_types = 'grizzly','black','teddy'\npath = Path('bears')\n```", "```py\nif not path.exists():\n    path.mkdir()\n    for o in bear_types:\n        dest = (path/o)\n        dest.mkdir(exist_ok=True)\n        results = search_images_bing(key, f'{o} bear')\n        download_images(dest, urls=results.attrgot('content_url'))\n```", "```py\nfns = get_image_files(path)\nfns\n```", "```py\n(#421) [Path('bears/black/00000095.jpg'),Path('bears/black/00000133.jpg'),Path('\n > bears/black/00000062.jpg'),Path('bears/black/00000023.jpg'),Path('bears/black\n > /00000029.jpg'),Path('bears/black/00000094.jpg'),Path('bears/black/00000124.j\n > pg'),Path('bears/black/00000056.jpeg'),Path('bears/black/00000046.jpg'),Path(\n > 'bears/black/00000045.jpg')...]\n```", "```py\nfailed = verify_images(fns)\nfailed\n```", "```py\n(#0) []\n```", "```py\nfailed.map(Path.unlink);\n```", "```py\nclass DataLoaders(GetAttr):\n    def __init__(self, *loaders): self.loaders = loaders\n    def __getitem__(self, i): return self.loaders[i]\n    train,valid = add_props(lambda i,self: self[i])\n```", "```py\nbears = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=Resize(128))\n```", "```py\nblocks=(ImageBlock, CategoryBlock)\n```", "```py\nget_items=get_image_files\n```", "```py\nsplitter=RandomSplitter(valid_pct=0.2, seed=42)\n```", "```py\nget_y=parent_label\n```", "```py\nitem_tfms=Resize(128)\n```", "```py\ndls = bears.dataloaders(path)\n```", "```py\ndls.valid.show_batch(max_n=4, nrows=1)\n```", "```py\nbears = bears.new(item_tfms=Resize(128, ResizeMethod.Squish))\ndls = bears.dataloaders(path)\ndls.valid.show_batch(max_n=4, nrows=1)\n```", "```py\nbears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode='zeros'))\ndls = bears.dataloaders(path)\ndls.valid.show_batch(max_n=4, nrows=1)\n```", "```py\nbears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3))\ndls = bears.dataloaders(path)\ndls.train.show_batch(max_n=4, nrows=1, unique=True)\n```", "```py\nbears = bears.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))\ndls = bears.dataloaders(path)\ndls.train.show_batch(max_n=8, nrows=2, unique=True)\n```", "```py\nbears = bears.new(\n    item_tfms=RandomResizedCrop(224, min_scale=0.5),\n    batch_tfms=aug_transforms())\ndls = bears.dataloaders(path)\n```", "```py\nlearn = cnn_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(4)\n```", "```py\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n```", "```py\ninterp.plot_top_losses(5, nrows=1)\n```", "```py\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n```", "```py\nfor idx in cleaner.delete(): cleaner.fns[idx].unlink()\n```", "```py\nfor idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)\n```", "```py\nlearn.export()\n```", "```py\npath = Path()\npath.ls(file_exts='.pkl')\n```", "```py\n(#1) [Path('export.pkl')]\n```", "```py\nlearn_inf = load_learner(path/'export.pkl')\n```", "```py\nlearn_inf.predict('images/grizzly.jpg')\n```", "```py\n('grizzly', tensor(1), tensor([9.0767e-06, 9.9999e-01, 1.5748e-07]))\n```", "```py\nlearn_inf.dls.vocab\n```", "```py\n(#3) ['black','grizzly','teddy']\n```", "```py\nbtn_upload = widgets.FileUpload()\nbtn_upload\n```", "```py\nimg = PILImage.create(btn_upload.data[-1])\n```", "```py\nout_pl = widgets.Output()\nout_pl.clear_output()\nwith out_pl: display(img.to_thumb(128,128))\nout_pl\n```", "```py\npred,pred_idx,probs = learn_inf.predict(img)\n```", "```py\nlbl_pred = widgets.Label()\nlbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'\nlbl_pred\n```", "```py\nbtn_run = widgets.Button(description='Classify')\nbtn_run\n```", "```py\ndef on_click_classify(change):\n    img = PILImage.create(btn_upload.data[-1])\n    out_pl.clear_output()\n    with out_pl: display(img.to_thumb(128,128))\n    pred,pred_idx,probs = learn_inf.predict(img)\n    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'\n\nbtn_run.on_click(on_click_classify)\n```", "```py\nVBox([widgets.Label('Select your bear!'),\n      btn_upload, btn_run, out_pl, lbl_pred])\n```", "```py\n!pip install voila\n!jupyter serverextension enable voila --sys-prefix\n```"]