["```py\ndata/\n\u251c\u2500\u2500 slope\n\u2502   \u251c\u2500\u2500 output_slope_dengyl.txt\n\u2502   \u251c\u2500\u2500 output_slope_hyw.txt\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 ring\n\u2502   \u251c\u2500\u2500 output_ring_dengyl.txt\n\u2502   \u251c\u2500\u2500 output_ring_hyw.txt\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 negative\n\u2502   \u251c\u2500\u2500 output_negative_1.txt\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 wing\n    \u251c\u2500\u2500 output_wing_dengyl.txt\n    \u251c\u2500\u2500 output_wing_hyw.txt\n    \u2514\u2500\u2500 ...\n```", "```py\n -,-,-\n-766.0,132.0,709.0\n-751.0,249.0,659.0\n-714.0,314.0,630.0\n-709.0,244.0,623.0\n-707.0,230.0,659.0\n```", "```py\n# Prepare the data\n!python data_prepare.py\n```", "```py\n# Split the data by person\n!python data_split_person.py\n```", "```py\ntrain_names = [\n    \"hyw\", \"shiyun\", \"tangsy\", \"dengyl\", \"jiangyh\", \"xunkai\", \"negative3\",\n    \"negative4\", \"negative5\", \"negative6\"\n]\nvalid_names = [\"lsj\", \"pengxl\", \"negative2\", \"negative7\"]\ntest_names = [\"liucx\", \"zhangxy\", \"negative1\", \"negative8\"]\n```", "```py\n# Load TensorBoard\n%load_ext tensorboard\n%tensorboard --logdir logs/scalars\n```", "```py\n!python train.py --model CNN --person true\n```", "```py\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\nconv2d (Conv2D)              (None, 128, 3, 8)         104\n_________________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, 42, 1, 8)          0\n_________________________________________________________________\ndropout (Dropout)            (None, 42, 1, 8)          0\n_________________________________________________________________\nconv2d_1 (Conv2D)            (None, 42, 1, 16)         528\n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 14, 1, 16)         0\n_________________________________________________________________\ndropout_1 (Dropout)          (None, 14, 1, 16)         0\n_________________________________________________________________\nflatten (Flatten)            (None, 224)               0\n_________________________________________________________________\ndense (Dense)                (None, 16)                3600\n_________________________________________________________________\ndropout_2 (Dropout)          (None, 16)                0\n_________________________________________________________________\ndense_1 (Dense)              (None, 4)                 68\n=================================================================\n```", "```py\nModel size: 16.796875 KB\n```", "```py\n1000/1000 [==============================] - 12s 12ms/step - loss: 7.6510 - accuracy: 0.5207 - val_loss: 4.5836 - val_accuracy: 0.7206\n```", "```py\nEpoch 50/50\n1000/1000 [==============================] - 7s 7ms/step - loss: 0.0568 -\n\naccuracy: 0.9835 - val_loss: 0.1185 - val_accuracy: 0.9743\n```", "```py\n6/6 [==============================] - 0s 6ms/step - loss: 0.2888 - accuracy: 0.9323\n```", "```py\ntf.Tensor(\n[[ 75   3   0   4]\n [  0  69   0  15]\n [  0   0  85   3]\n [  0   0   1 129]], shape=(4, 4), dtype=int32)\n```", "```py\nBasic model is 19544 bytes\nQuantized model is 8824 bytes\nDifference is 10720 bytes\n```", "```py\n# Install xxd if it is not available\n!apt-get -qq install xxd\n# Save the file as a C source file\n!xxd -i model_quantized.tflite > /content/model_quantized.cc\n# Print the source file\n!cat /content/model_quantized.cc\n```", "```py\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Conv2D( # input_shape=(batch, 128, 3)\n        8, (4, 3),\n        padding=\"same\",\n        activation=\"relu\",\n        input_shape=(seq_length, 3, 1)),  # output_shape=(batch, 128, 3, 8)\n    tf.keras.layers.MaxPool2D((3, 3)),  # (batch, 42, 1, 8)\n    tf.keras.layers.Dropout(0.1),  # (batch, 42, 1, 8)\n    tf.keras.layers.Conv2D(16, (4, 1), padding=\"same\",\n                            activation=\"relu\"),  # (batch, 42, 1, 16)\n    tf.keras.layers.MaxPool2D((3, 1), padding=\"same\"),  # (batch, 14, 1, 16)\n    tf.keras.layers.Dropout(0.1),  # (batch, 14, 1, 16)\n    tf.keras.layers.Flatten(),  # (batch, 224)\n    tf.keras.layers.Dense(16, activation=\"relu\"),  # (batch, 16)\n    tf.keras.layers.Dropout(0.1),  # (batch, 16)\n    tf.keras.layers.Dense(4, activation=\"softmax\")  # (batch, 4)\n])\n```", "```py\ntf.keras.layers.Conv2D(\n    8, (4, 3),\n    padding=\"same\",\n    activation=\"relu\",\n    input_shape=(seq_length, 3, 1)),  # output_shape=(batch, 128, 3, 8)\n```", "```py\ntf.keras.layers.MaxPool2D((3, 3)),  # (batch, 42, 1, 8)\n```", "```py\ntf.keras.layers.Dropout(0.1),  # (batch, 42, 1, 8)\n```", "```py\ntf.keras.layers.Conv2D(16, (4, 1), padding=\"same\",\n                        activation=\"relu\"),  # (batch, 42, 1, 16)\n```", "```py\ntf.keras.layers.MaxPool2D((3, 1), padding=\"same\"),  # (batch, 14, 1, 16)\ntf.keras.layers.Dropout(0.1),  # (batch, 14, 1, 16)\n```", "```py\ntf.keras.layers.Flatten(),  # (batch, 224)\ntf.keras.layers.Dense(16, activation=\"relu\"),  # (batch, 16)\n```", "```py\ntf.keras.layers.Dropout(0.1),  # (batch, 16)\ntf.keras.layers.Dense(4, activation=\"softmax\")  # (batch, 4)\n```", "```py\nif (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,\n                                                     NULL,\n                                                     &ui32NumSamples,\n                                                     &Sample))\n```", "```py\nif (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,\n                                                     true,\n                                                     &ui32NumSamples,\n                                                     &Sample))\n```", "```py\n/*\n* Read samples in polling mode (no int)\n*/\nwhile(1)\n{\n    // Use Button 14 to break the loop and shut down\n    uint32_t pin14Val = 1;\n    am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);\n```", "```py\n/*\n* Read samples in polling mode (no int)\n*/\nwhile(1)\n{\n    am_util_stdio_printf(\"-,-,-\\r\\n\");\n    // Use Button 14 to break the loop and shut down\n    uint32_t pin14Val = 1;\n    am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);\n```", "```py\nam_util_stdio_printf(\"Acc [mg] %04.2f x, %04.2f y, %04.2f z,\n                     Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\\r\\n\",\n        acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],\n        temperature_degC, (audioSample) );\n```", "```py\nam_util_stdio_printf(\"%04.2f,%04.2f,%04.2f\\r\\n\", acceleration_mg[0],\n                     acceleration_mg[1], acceleration_mg[2]);\n```", "```py\nscript output.txt\n```", "```py\nscreen ${DEVICENAME} 115200\n```", "```py\nexit\n```", "```py\noutput_<*gesture_name*>_<*person_name*>.txt\n\n```", "```py\noutput_triangle_Daniel.txt\n```", "```py\ndata/\n\u251c\u2500\u2500 triangle\n\u2502   \u251c\u2500\u2500 output_triangle_Daniel.txt\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 square\n\u2502   \u251c\u2500\u2500 output_square_Daniel.txt\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 star\n    \u251c\u2500\u2500 output_star_Daniel.txt\n    \u2514\u2500\u2500 ...\n```"]