["```py\nfrom fastai.vision.all import *\npath = untar_data(URLs.IMAGENETTE)\n```", "```py\ndblock = DataBlock(blocks=(ImageBlock(), CategoryBlock()),\n                   get_items=get_image_files,\n                   get_y=parent_label,\n                   item_tfms=Resize(460),\n                   batch_tfms=aug_transforms(size=224, min_scale=0.75))\ndls = dblock.dataloaders(path, bs=64)\n```", "```py\nmodel = xresnet50()\nlearn = Learner(dls, model, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\nx,y = dls.one_batch()\nx.mean(dim=[0,2,3]),x.std(dim=[0,2,3])\n```", "```py\n(TensorImage([0.4842, 0.4711, 0.4511], device='cuda:5'),\n TensorImage([0.2873, 0.2893, 0.3110], device='cuda:5'))\n```", "```py\ndef get_dls(bs, size):\n    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                   get_items=get_image_files,\n                   get_y=parent_label,\n                   item_tfms=Resize(460),\n                   batch_tfms=[*aug_transforms(size=size, min_scale=0.75),\n                               Normalize.from_stats(*imagenet_stats)])\n    return dblock.dataloaders(path, bs=bs)\n```", "```py\ndls = get_dls(64, 224)\n```", "```py\nx,y = dls.one_batch()\nx.mean(dim=[0,2,3]),x.std(dim=[0,2,3])\n```", "```py\n(TensorImage([-0.0787,  0.0525,  0.2136], device='cuda:5'),\n TensorImage([1.2330, 1.2112, 1.3031], device='cuda:5'))\n```", "```py\nmodel = xresnet50()\nlearn = Learner(dls, model, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\ndls = get_dls(128, 128)\nlearn = Learner(dls, xresnet50(), loss_func=CrossEntropyLossFlat(),\n                metrics=accuracy)\nlearn.fit_one_cycle(4, 3e-3)\n```", "```py\nlearn.dls = get_dls(64, 224)\nlearn.fine_tune(5, 1e-3)\n```", "```py\npreds,targs = learn.tta()\naccuracy(preds, targs).item()\n```", "```py\n0.8737863898277283\n```", "```py\nimage2,target2 = dataset[randint(0,len(dataset)]\nt = random_float(0.5,1.0)\nnew_image = t * image1 + (1-t) * image2\nnew_target = t * target1 + (1-t) * target2\n```", "```py\n[0, 0, 1, 0, 0, 0, 0, 0, 0, 0] and [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\n```", "```py\n[0, 0, 0.3, 0, 0, 0, 0, 0.7, 0, 0]\n```", "```py\nmodel = xresnet50()\nlearn = Learner(dls, model, loss_func=CrossEntropyLossFlat(),\n                metrics=accuracy, cbs=Mixup)\nlearn.fit_one_cycle(5, 3e-3)\n```", "```py\n[0.01, 0.01, 0.01, 0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\n```", "```py\nmodel = xresnet50()\nlearn = Learner(dls, model, loss_func=LabelSmoothingCrossEntropy(),\n                metrics=accuracy)\nlearn.fit_one_cycle(5, 3e-3)\n```"]