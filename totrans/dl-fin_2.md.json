["```py\n`# Importing the required library`\nimport pandas_datareader as pdr\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2023-01-23'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source`\ncpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n`# Printing the latest five observations of the dataframe`\nprint(cpi.tail())\n\n`# Importing the required library`\nimport pandas as pd\n\n`# Checking if there are NaN values in the CPI dataframe previously defined`\ncount_nan = cpi['CPIAUCSL'].isnull().sum()\n\n`# Printing the result`\nprint('Number of NaN values in the CPI dataframe: ' + str(count_nan))\n\n`# Dropping the NaN values from the rows`\ncpi = cpi.dropna()\n\n`# Transforming the CPI into a year-on-year measure` cpi = cpi.pct_change(periods = 12, axis = 0) * 100\ncpi = cpi.dropna()\n\n```", "```py\n`# Calculating the mean of the CPI over the last 10 years`\ncpi_last_ten_years = cpi.iloc[-240:]\nmean = cpi_last_ten_years[\"CPIAUCSL\"].mean()\n\n`# Printing the result`\nprint('The mean of the dataset: ' + str(mean), '%')\n\n`# Importing the required library`\nimport matplotlib.pyplot as plt\n\n`# Plotting the latest observations in black with a label`\nplt.plot(cpi_last_ten_years[:], color = 'black', linewidth = 1.5, label = 'Change in CPI Year-on-Year')\n\n`# Plotting horizontal lines that represent the mean and the zero threshold`\nplt.axhline(y = mean, color = 'red', linestyle = 'dashed', label = '10-Year Mean')\nplt.axhline(y = 0, color = 'blue', linestyle = 'dashed', linewidth = 1)\n\n`# Calling a grid to facilitate the visual component`\nplt.grid()\n\n`# Calling the legend function so it appears with the chart`\nplt.legend()\n\n```", "```py\nThe mean of the dataset: 2.4794 %\n```", "```py\n`# Calculating the median of the dataset`\nmedian = cpi_last_ten_years[\"CPIAUCSL\"].median()\u00a0\n\n`# Printing the result`\nprint('The median of the dataset: ' + str(median), '%')\n\n`# Plotting the latest observations in black with a label`\nplt.plot(cpi_last_ten_years[:], color = 'black', linewidth = 1.5, label = 'Change in CPI Year-on-Year')\n\nplt.axhline(y = median, color = 'red', linestyle = 'dashed', label = '10-Year Median')\nplt.axhline(y = 0, color = 'blue', linestyle = 'dashed', linewidth = 1)\n\n`# Calling a grid to facilitate the visual component`\nplt.grid()\n\n`# Calling the legend function so it appears with the chart`\nplt.legend()\n\n```", "```py\nThe median of the dataset: 2.1143 %\n```", "```py\n`# Calculating the variance of the dataset`\nvariance = cpi_last_ten_years[\"CPIAUCSL\"].var()\u00a0\n\n`# Printing the result`\nprint('The variance of the dataset: ' + str(variance), '%')\n```", "```py\nThe variance of the dataset: 3.6248 %\n```", "```py\n`# Calculating the standard deviation of the dataset`\nstandard_deviation = cpi_last_ten_years[\"CPIAUCSL\"].std()\u00a0\n\n`# Printing the result`\nprint('The standard deviation of the dataset: ' + str(standard_deviation), '%')\n```", "```py\nThe standard deviation of the dataset: 1.9039 %\n```", "```py\n`# Calculating the range of the dataset`\nrange_metric = max(cpi[\"CPIAUCSL\"]) - min(cpi[\"CPIAUCSL\"])\n\n`# Printing the result`\nprint('The range of the dataset: ' + str(range_metric), '%')\n\n```", "```py\nThe range of the dataset: 16.5510 %\n```", "```py\n`# Importing libraries`\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n\n`# Generate data for the plot`\ndata = np.linspace(-3, 3, num = 1000)\n\n`# Define the mean and standard deviation of the normal distribution`\nmean = 0\nstd = 1\n\n`# Generate the function of the normal distribution`\npdf = stats.norm.pdf(data, mean, std)\n\n`# Plot the normal distribution plot`\nplt.plot(data, pdf, '-', color = 'black', lw = 2)\nplt.axvline(mean, color = 'black', linestyle = '--')\n\n`# Calling a grid to facilitate the visual component`\nplt.grid()\n\n`# Show the plot`\nplt.show()\n```", "```py\n`# Calculating the skew of the dataset`\nskew = cpi[\"CPIAUCSL\"].skew()\u00a0\n\n`# Printing the result`\nprint('The skew of the dataset: ' + str(skew))\n\n```", "```py\nThe skew of the dataset: 1.4639\n```", "```py\n`# Plotting the histogram of the data`\nfig, ax = plt.subplots()\nax.hist(cpi['CPIAUCSL'], bins = 30, edgecolor = 'black', color = 'white')\n\n`# Add vertical lines for better interpretation`\nax.axvline(mean, color='black', linestyle='--', label='Mean', linewidth = 2)\nax.axvline(median, color='grey', linestyle='-.', label='Median', linewidth = 2)\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n`# Calculating the excess kurtosis of the dataset`\nexcess_kurtosis = cpi[\"CPIAUCSL\"].kurtosis()\u00a0\n\n`# Printing the result`\nprint('The excess kurtosis of the dataset: ' + str(excess_kurtosis))\n\n```", "```py\nThe excess kurtosis of the dataset: 2.2338\n```", "```py\n`# Importing the required library`\nimport pandas_datareader as pdr\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source`\ncpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n`# Transforming the CPI into a year-on-year measure`\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\n\n`# Dropping the NaN values`\ncpi = cpi.dropna()\n\n`# Resetting the index`\ncpi = cpi.reset_index()\n\n`# Creating the chart`\nfig, ax = plt.subplots()\nax.scatter(cpi['DATE'], cpi['CPIAUCSL'], color = 'black', s = 8,\u00a0 label = 'Change in CPI Year-on-Year')\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n`# Setting the beginning and end of the historical data`\nstart_date = '1995-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source`\ncpi_us = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\ncpi_uk = pdr.DataReader('GBRCPIALLMINMEI', 'fred', start_date, end_date)\n\n`# Dropping the NaN values from the rows`\ncpi_us = cpi_us.dropna()\ncpi_uk = cpi_uk.dropna()\n\n`# Transforming the CPI into a year-on-year measure`\ncpi_us = cpi_us.pct_change(periods = 12, axis = 0) * 100\ncpi_us = cpi_us.dropna()\n\ncpi_uk = cpi_uk.pct_change(periods = 12, axis = 0) * 100\ncpi_uk = cpi_uk.dropna()\n\n`# Creating the chart`\nfig, ax = plt.subplots()\nax.scatter(cpi_us['CPIAUCSL'], cpi_uk['GBRCPIALLMINMEI'], color = 'black', s = 8, label = 'Change in CPI Year-on-Year')\n\n`# Adding a few aesthetic elements to the chart`\nax.set_xlabel('US CPI')\nax.set_ylabel('UK CPI')\nax.axvline(x = 0, color='black', linestyle = 'dashed', linewidth = 1)\u00a0 # vertical line\nax.axhline(y = 0, color='black', linestyle = 'dashed', linewidth = 1)\u00a0 # horizontal line\nax.set_ylim(-2,)\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source`\ncpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n`# Transforming the CPI into a year-on-year measure`\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\n\n`# Dropping the NaN values`\ncpi = cpi.dropna()\n\n`# Resetting the index`\ncpi = cpi.reset_index()\n\n`# Creating the chart`\nplt.plot(cpi['DATE'], cpi['CPIAUCSL'], color = 'black', label = 'Change in CPI Year-on-Year')\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n`# Taking the values of the previous twelve months`\ncpi_one_year = cpi.iloc[-12:]\n\n`# Creating the chart`\nplt.bar(cpi_one_year['DATE'], cpi_one_year['CPIAUCSL'], color = 'black', label = 'Change in CPI Year-on-Year', width = 7)\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n# Creating the chart\nfig, ax = plt.subplots()\nax.hist(cpi['CPIAUCSL'], bins = 30, edgecolor = 'black', color = 'white', label = 'Change in CPI Year-on-Year',)\n\n# Add vertical lines for better interpretation\nax.axvline(0, color='black')\n\n# Calling the grid function for better interpretability\nplt.grid()\n\n# Calling the legend function to show the labels\nplt.legend()\n\n# Showing the plot\nplt.show()\n\n```", "```py\n`# Taking the values of the last twenty years`\ncpi_last_ten_years = cpi.iloc[-240:]\n\n`# Creating the chart`\nfig, ax = plt.subplots()\nax.boxplot(cpi_last_ten_years['CPIAUCSL'])\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n`# Replace the corresponding code line with the following`\nax.boxplot(cpi_last_ten_years['CPIAUCSL'], showfliers = False)\n```", "```py\n`# Importing the required libraries`\nimport pandas_datareader as pdr\nimport pandas as pd\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1995-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source`\ncpi_us = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\ncpi_uk = pdr.DataReader('GBRCPIALLMINMEI', 'fred', start_date, end_date)\n\n`# Dropping the NaN values from the rows`\ncpi_us = cpi_us.dropna()\ncpi_uk = cpi_uk.dropna()\n\n`# Transforming the US CPI into a year-on-year measure`\ncpi_us = cpi_us.pct_change(periods = 12, axis = 0) * 100\ncpi_us = cpi_us.dropna()\n\n`# Transforming the UK CPI into a year-on-year measure`\ncpi_uk = cpi_uk.pct_change(periods = 12, axis = 0) * 100\ncpi_uk = cpi_uk.dropna()\n\n`# Joining both CPI data into one dataframe`\ncombined_cpi_data = pd.concat([cpi_us['CPIAUCSL'], cpi_uk['GBRCPIALLMINMEI']], axis = 1)\n\n`# Using pandas' correlation function to calculate the measure`\ncombined_cpi_data.corr(method = 'pearson')\n\n```", "```py\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0CPIAUCSL\u00a0 GBRCPIALLMINMEI\nCPIAUCSL\u00a0 \u00a0 \u00a0 \u00a0 \u00a01.000000\u00a0 \u00a0 \u00a0 \u00a0 \u00a00.732164\nGBRCPIALLMINMEI\u00a0 0.732164\u00a0 \u00a0 \u00a0 \u00a0 \u00a01.000000\n```", "```py\n`# Importing the required libraries`\nimport pandas_datareader as pdr\nimport pandas as pd\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1995-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source` cpi_us = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\ncpi_uk = pdr.DataReader('GBRCPIALLMINMEI', 'fred', start_date, end_date)\n\n`# Dropping the NaN values from the rows`\ncpi_us = cpi_us.dropna()\ncpi_uk = cpi_uk.dropna()\n\n`# Transforming the US CPI into a year-on-year measure`\ncpi_us = cpi_us.pct_change(periods = 12, axis = 0) * 100\ncpi_us = cpi_us.dropna()\n\n`# Transforming the UK CPI into a year-on-year measure`\ncpi_uk = cpi_uk.pct_change(periods = 12, axis = 0) * 100\ncpi_uk = cpi_uk.dropna()\n\n`# Joining both CPI data into one dataframe`\ncombined_cpi_data = pd.concat([cpi_us['CPIAUCSL'], cpi_uk['GBRCPIALLMINMEI']], axis = 1)\n\n`# Using pandas' correlation function to calculate the measure`\ncombined_cpi_data.corr(method = 'spearman')\n\n```", "```py\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0CPIAUCSL\u00a0 GBRCPIALLMINMEI\nCPIAUCSL\u00a0 \u00a0 \u00a0 \u00a0 \u00a01.000000\u00a0 \u00a0 \u00a0 \u00a0 \u00a00.472526\nGBRCPIALLMINMEI\u00a0 0.472526\u00a0 \u00a0 \u00a0 \u00a0 \u00a01.000000\n```", "```py\n`# Importing the required libraries`\nimport pandas_datareader as pdr\nimport pandas as pd\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source` cpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n`# Dropping the NaN values from the rows`\ncpi = cpi.dropna()\n\n`# Transforming the US CPI into a year-on-year measure`\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\ncpi = cpi.dropna()\n\n`# Transforming the data frame to a series structure`\ncpi = cpi.iloc[:,0]\n\n`# Calculating autocorrelation with a lag of 1`\nprint('Correlation with a lag of 1 = ', round(cpi.autocorr(lag = 1), 2))\n\n`# Calculating autocorrelation with a lag of 6`\nprint('Correlation with a lag of 6 = ', round(cpi.autocorr(lag = 6), 2))\n\n`# Calculating autocorrelation with a lag of 12`\nprint('Correlation with a lag of 12 = ', round(cpi.autocorr(lag = 12), 2))\n\n```", "```py\nCorrelation with a lag of 1 =\u00a0 0.99\nCorrelation with a lag of 6 =\u00a0 0.89\nCorrelation with a lag of 12 =\u00a0 0.73\n```", "```py\n`# Importing the required libraries`\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n`# Setting the range of the data`\ndata_range = np.arange(0, 30, 0.1)\n\n`# Creating the sine and the cosine waves`\nsine = np.sin(data_range)\ncosine = np.cos(data_range)\n\n`# Plotting`\nplt.plot(sine, color = 'black', label = 'Sine Function')\nplt.plot(cosine, color = 'grey', linestyle = 'dashed', label = 'Cosine Function')\nplt.grid()\nplt.legend()\n\n```", "```py\n`# Importing the libraries`\nfrom scipy.stats import pearsonr\nfrom scipy.stats import spearmanr\nfrom minepy import MINE\n\n`# Calculating the linear correlation measures`\nprint('Correlation | Pearson: ', round(pearsonr(sine, cosine)[0], 3))\nprint('Correlation | Spearman: ', round(spearmanr(sine, cosine)[0], 3))\n\n`# Calculating the MIC`\nmine = MINE(alpha = 0.6, c = 15)\nmine.compute_score(sine,cosine)\nMIC = mine.mic()\nprint('Correlation | MIC: ', round(MIC, 3))\n\n```", "```py\nCorrelation | Pearson:\u00a0\u00a00.035\nCorrelation | Spearman:\u00a0\u00a00.027\nCorrelation | MIC: 0.602\n```", "```py\n`# Importing the required libraries`\nfrom statsmodels.tsa.stattools import adfuller\nimport pandas_datareader as pdr\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source` cpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n`# Dropping the NaN values from the rows`\ncpi = cpi.dropna()\n\n`# Transforming the US CPI into a year-on-year measure`\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\ncpi = cpi.dropna()\n\n`# Applying the ADF test on the CPI data`\nadfuller(cpi)\u00a0\nprint('p-value: %f' % adfuller(cpi)[1])\n\n```", "```py\np-value: 0.0152\n```", "```py\n`# Importing the required libraries`\nfrom statsmodels.tsa.stattools import adfuller\nimport pandas_datareader as pdr\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source` cpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n`# Dropping the NaN values from the rows`\ncpi = cpi.dropna()\n\n`# Applying the ADF test on the CPI data`\nadfuller(cpi)\u00a0\nprint('p-value: %f' % adfuller(cpi)[1])\n\n```", "```py\np-value: 0.999\n\n```", "```py\n`# Importing the required libraries`\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n`# Creating the first time series using sine waves`\nlength = np.pi * 2 * 5\nsinewave = np.sin(np.arange(0, length, length / 1000))\n\n`# Creating the second time series using trending sine waves`\nsinewave_ascending = np.sin(np.arange(0, length, length / 1000))\n\n`# Defining the trend variable`\na = 0.01\n\n`# Looping to add a trend factor`\nfor i in range(len(sinewave_ascending)):\n\n\u00a0 \u00a0 sinewave_ascending[i] = a + sinewave_ascending[i]\n\n\u00a0 \u00a0 a = 0.01 + a\n\n```", "```py\n`# Plotting the series`\nplt.plot(sinewave, label = 'Sine Wave', color = 'black')\nplt.plot(sinewave_ascending, label = 'Ascending Sine Wave', color = 'grey')\n\n`# Calling the grid function for better interpretability`\nplt.grid()\n\n`# Calling the legend function to show the labels`\nplt.legend()\n\n`# Showing the plot`\nplt.show()\n\n```", "```py\n`# ADF testing | Normal sine wave`\nadfuller(sinewave)\u00a0\nprint('p-value: %f' % adfuller(sinewave)[1])\n\n`# ADF testing | Ascending sine wave`\nadfuller(sinewave_ascending)\u00a0\nprint('p-value: %f' % adfuller(sinewave_ascending)[1])\n\n```", "```py\np-value: 0.000000 `# For the sine wave`\np-value: 0.898635 `# For the ascending sine wave`\n\n```", "```py\n`# Importing the KPSS library`\nfrom statsmodels.tsa.stattools import kpss\n\n`# KPSS testing | Normal sine wave`\nkpss(sinewave)\u00a0\nprint('p-value: %f' % kpss(sinewave)[1])\n\n`# KPSS testing | Ascending sine wave`\nkpss(sinewave_ascending)\u00a0\nprint('p-value: %f' % kpss(sinewave_ascending)[1])\n\n`# KPSS testing while taking into account the trend | Ascending sine wave`\nkpss(sinewave_ascending, regression = 'ct')\u00a0\nprint('p-value: %f' % kpss(sinewave_ascending, regression = 'ct')[1])\n\n`'''\nThe 'ct' argument is used to check if the dataset is stationary \naround a trend. By default, the argument is 'c' which is is used\nto check if the data is stationary around a constant.\n'''`\n\n```", "```py\np-value: 0.10 `# For the sine wave`\np-value: 0.01 `# For the ascending sine wave without trend consideration`\np-value: 0.10 `# For the ascending sine wave with trend consideration`\n\n```", "```py\n`# Importing the required libraries`\nfrom statsmodels.tsa.stattools import kpss\nimport pandas_datareader as pdr\n\n`# Setting the beginning and end of the historical data`\nstart_date = '1950-01-01'\nend_date\u00a0 \u00a0= '2022-12-01'\n\n`# Creating a dataframe and downloading the CPI data using its code name and its source` cpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n\n# Dropping the NaN values from the rows\ncpi = cpi.dropna()\n\n`# Transforming the US CPI into a year-on-year measure`\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\ncpi = cpi.dropna()\n\n`# Applying the KPSS (no trend consideration) test on the CPI data`\nkpss(cpi)\u00a0\nprint('p-value: %f' % kpss(cpi)[1])\n\n`# Applying the KPSS (with trend consideration) test on the CPI data`\nkpss(cpi, regression = 'ct')\u00a0\nprint('p-value: %f' % kpss(cpi, regression = 'ct')[1])\n\n```", "```py\np-value: 0.036323 `# without trend consideration`\np-value: 0.010000 `# with trend consideration`\n\n```"]