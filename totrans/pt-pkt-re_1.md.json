["```py\nimport torch\nprint(torch.__version__)\nprint(torch.cuda.is_available())\n```", "```py\nimport urllib.request\n\nurl = url = 'https://pytorch.tips/coffee'\nfpath = 'coffee.jpg'\nurllib.request.urlretrieve(url, fpath)\n```", "```py\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nimg = Image.open('coffee.jpg')\nplt.imshow(img)\n```", "```py\nimport torch\nfrom torchvision import transforms\n\ntransform = transforms.Compose([\n  transforms.Resize(256),\n  transforms.CenterCrop(224),\n  transforms.ToTensor(),\n  transforms.Normalize(\n      mean=[0.485, 0.456, 0.406],\n      std=[0.229, 0.224, 0.225])])\n\nimg_tensor = transform(img)\nprint(type(img_tensor), img_tensor.shape)\n# out:\n# <class 'torch.tensor'> torch.Size([3, 224, 224])\n```", "```py\nbatch = img_tensor.unsqueeze(0)\nprint(batch.shape)\n# out: torch.Size([1, 3, 224, 224])\n```", "```py\nfrom torchvision import models\n\nmodel = models.alexnet(pretrained=True)\n```", "```py\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(device)\n# out(results will vary): cpu\n\nmodel.eval()\nmodel.to(device)\ny = model(batch.to(device))\nprint(y.shape)\n# out: torch.Size([1, 1000])\n```", "```py\ny_max, index = torch.max(y,1)\nprint(index, y_max)\n# out: tensor([967]) tensor([22.3059],\n#    grad_fn=<MaxBackward0>)\n```", "```py\nurl = 'https://pytorch.tips/imagenet-labels'\n\nfpath = 'imagenet_class_labels.txt'\nurllib.request.urlretrieve(url, fpath)\n\nwith open('imagenet_class_labels.txt') as f:\n  classes = [line.strip() for line in f.readlines()]\n\nprint(classes[967])\n# out: 967: 'espresso',\n```", "```py\nprob = torch.nn.functional.softmax(y, dim=1)[0] * 100\nprint(classes[index[0]], prob[index[0]].item())\n#967: 'espresso', 87.85208892822266\n```", "```py\n_, indices = torch.sort(y, descending=True)\n\nfor idx in indices[0][:5]:\n  print(classes[idx], prob[idx].item())\n# out:\n# 967: 'espresso', 87.85208892822266\n# 968: 'cup', 7.28359317779541\n# 504: 'coffee mug', 4.33521032333374\n# 925: 'consomme', 0.36686763167381287\n# 960: 'chocolate sauce, chocolate syrup',\n#    0.09037172049283981\n```", "```py\nimport torch\nfrom torchvision import transforms, models\n\ntransform = transforms.Compose([\n  transforms.Resize(256),\n  transforms.CenterCrop(224),\n  transforms.ToTensor(),\n  transforms.Normalize(\n      mean=[0.485, 0.456, 0.406],\n      std=[0.229, 0.224, 0.225])])\n\nimg_tensor = transform(img)\nbatch = img_tensor.unsqueeze(0)\nmodel = models.alexnet(pretrained=True)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel.eval()\nmodel.to(device)\ny = model(batch.to(device))\n\nprob = torch.nn.functional.softmax(y, dim=1)[0] * 100\n_, indices = torch.sort(y, descending=True)\nfor idx in indices[0][:5]:\n  print(classes[idx], prob[idx].item())\n```"]