["```py\nconst checky = tf.tensor([\n  [\n    [1, 1, 1],\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n  [\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0],\n    [1, 1, 1]\n  ],\n  [\n    [1, 1, 1],\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 0, 0]\n  ],\n])\n```", "```py\nconst checkySmalls = tf.tensor([\n  [[1],[0],[1],[0]],\n  [[0],[1],[0],[1]],\n  [[1],[0],[1],[0]]\n])\n```", "```py\n// 2 x 2 checker pattern\nconstlil=tf.tensor([![1](assets/1.png)[[1],[0]],[[0],[1]]]);// tile it\nconstbig=lil.tile([100,100,1])![2](assets/2.png)\n```", "```py\n<canvas id=\"randomness\"></canvas>\n```", "```py\nconstbigMess=tf.randomUniform([400,400,3]);![1](assets/1.png)constmyCanvas=document.getElementById(\"randomness\");![2](assets/2.png)tf.browser.toPixels(bigMess,myCanvas).then(()=>{![3](assets/3.png)// It's not bad practice to clean up and make sure we got everything\nbigMess.dispose();console.log(\"Make sure we cleaned up\",tf.memory().numTensors);});\n```", "```py\n<img id=\"gant\" src=\"/gant.jpg\" />\n```", "```py\n// Simply read from the DOM constgantImage=document.getElementById('gant')![1](assets/1.png)constgantTensor=tf.browser.fromPixels(gantImage)![2](assets/2.png)console.log(![3](assets/3.png)`Successful conversion from DOM to a ${gantTensor.shape} tensor`)\n```", "```py\nSuccessful conversion from DOM to a 372,500,3 tensor\n```", "```py\n// Now load an image object in JavaScript constcake=newImage()![1](assets/1.png)cake.crossOrigin='anonymous'![2](assets/2.png)cake.src='/cake.jpg'![3](assets/3.png)cake.onload=()=>{![4](assets/4.png)constcakeTensor=tf.browser.fromPixels(cake)![5](assets/5.png)console.log(![6](assets/6.png)`Successful conversion from Image() to a ${cakeTensor.shape} tensor`)}\n```", "```py\nconstbigMess=tf.randomUniform([400,400,3],0,255);![1](assets/1.png)tf.node.encodeJpeg(bigMess).then((f)=>{![2](assets/2.png)fs.writeFileSync(\"simple.jpg\",f);![3](assets/3.png)console.log(\"Basic JPG 'simple.jpg' written\");});\n```", "```py\nconstbigMess=tf.randomUniform([400,400,3],0,255);tf.node.encodeJpeg(bigMess,\"rgb\",![1](assets/1.png)90,![2](assets/2.png)true,![3](assets/3.png)true,![4](assets/4.png)true,![5](assets/5.png)\"cm\",![6](assets/6.png)250,![7](assets/7.png)250,![8](assets/8.png)\"Generated by TFJS Node!\"![9](assets/9.png)).then((f)=>{fs.writeFileSync(\"advanced.jpg\",f);console.log(\"Full featured JPG 'advanced.jpg' written\");});\n```", "```py\nconst bigMess = tf.randomUniform([400, 400, 3], 0, 255);\ntf.node.encodePng(bigMess).then((f) => {\n  fs.writeFileSync(\"simple.png\", f);\n  console.log(\"Basic PNG 'simple.png' written\");\n});\n```", "```py\ntf.node.encodePng(bigMess, 9).then((f) => {\n  fs.writeFileSync(\"advanced.png\", f);\n  console.log(\"Full featured PNG 'advanced.png' written\");\n});\n```", "```py\nimport*astffrom'@tensorflow/tfjs-node'import*asfsfrom'fs'import*aspathfrom'path'constFILE_PATH='files'constcakeImagePath=path.join(FILE_PATH,'cake.jpg')constcakeImage=fs.readFileSync(cakeImagePath)![1](assets/1.png)tf.tidy(()=>{constcakeTensor=tf.node.decodeImage(cakeImage)![2](assets/2.png)console.log(`Success: local file to a ${cakeTensor.shape} tensor`)constcakeBWTensor=tf.node.decodeImage(cakeImage,1)![3](assets/3.png)console.log(`Success: local file to a ${cakeBWTensor.shape} tensor`)})\n```", "```py\nconst gantCakeTensor = tf.node.decodeImage(gantCake, 3, 'int32', true)\nconsole.log(`Success: local file to a ${gantCakeTensor.shape} tensor`)\n```", "```py\n// Simple Tensor Flip constlemonadeImage=document.getElementById(\"lemonade\");constlemonadeCanvas=document.getElementById(\"lemonadeCanvas\");constlemonadeTensor=tf.browser.fromPixels(lemonadeImage);constflippedLemonadeTensor=tf.reverse(lemonadeTensor,1)![1](assets/1.png)tf.browser.toPixels(flippedLemonadeTensor,lemonadeCanvas).then(()=>{lemonadeTensor.dispose();flippedLemonadeTensor.dispose();})\n```", "```py\n// Batch Tensor Flip constcakeImage=document.getElementById(\"cake\");constcakeCanvas=document.getElementById(\"cakeCanvas\");constflipCake=tf.tidy(()=>{constcakeTensor=tf.expandDims(![1](assets/1.png)tf.browser.fromPixels(cakeImage)![2](assets/2.png).asType(\"float32\")![3](assets/3.png));returntf.squeeze(tf.image.flipLeftRight(cakeTensor))![4](assets/4.png).asType(\"int32\");![5](assets/5.png)})tf.browser.toPixels(flipCake,cakeCanvas).then(()=>{flipCake.dispose();});\n```", "```py\n// Simple Tensor Flip constnewSize=[768,560]// 4x larger ![1](assets/1.png)constlittleGantImage=document.getElementById(\"littleGant\");constnnCanvas=document.getElementById(\"nnCanvas\");constblCanvas=document.getElementById(\"blCanvas\");constgantTensor=tf.browser.fromPixels(littleGantImage);constnnResizeTensor=tf.image.resizeNearestNeighbor(![2](assets/2.png)gantTensor,newSize,true![3](assets/3.png))tf.browser.toPixels(nnResizeTensor,nnCanvas).then(()=>{nnResizeTensor.dispose();})constblResizeTensor=tf.image.resizeBilinear(![4](assets/4.png)gantTensor,newSize,true![5](assets/5.png))constblResizeTensorInt=blResizeTensor.asType('int32')![6](assets/6.png)tf.browser.toPixels(blResizeTensorInt,blCanvas).then(()=>{blResizeTensor.dispose();blResizeTensorInt.dispose();})// All done with ya gantTensor.dispose();\n```", "```py\n// Simple Tensor Crop conststartingPoint=[0,40,0];![1](assets/1.png)constnewSize=[265,245,3];![2](assets/2.png)constlemonadeImage=document.getElementById(\"lemonade\");constlemonadeCanvas=document.getElementById(\"lemonadeCanvas\");constlemonadeTensor=tf.browser.fromPixels(lemonadeImage);constcropped=tf.slice(lemonadeTensor,startingPoint,newSize)![3](assets/3.png)tf.browser.toPixels(cropped,lemonadeCanvas).then(()=>{cropped.dispose();})lemonadeTensor.dispose();\n```", "```py\n    [.keep-together]#`tf.slice(myTensor, [0,0,0], [20, 20, 3])`?#\n    ```"]