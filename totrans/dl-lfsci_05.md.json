["```py\nimport deepchem as dc\ngrid_featurizer = dc.feat.RdkitGridFeaturizer(\n                     voxel_width=2.0, \n                     feature_types=['hbond', 'salt_bridge', 'pi_stack', \n                                     'cation_pi', 'ecfp', 'splif'], \n                     sanitize=True, flatten=True)\n\n```", "```py\ntasks, datasets, transformers = dc.molnet.load_pdbbind(\n        featurizer=\"grid\", split=\"random\", subset=\"core\")\ntrain_dataset, valid_dataset, test_dataset = datasets\n\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor                 \nsklearn_model = RandomForestRegressor(n_estimators=100)\nmodel = dc.models.SklearnModel(sklearn_model)\nmodel.fit(train_dataset)\n```", "```py\nn_features = train_dataset.X.shape[1]\nmodel = dc.models.MultitaskRegressor(\n        n_tasks=len(pdbbind_tasks),\n        n_features=n_features,\n        layer_sizes=[2000, 1000],\n        dropouts=0.5,\n        learning_rate=0.0003)\nmodel.fit(train_dataset, nb_epoch=250)\n```", "```py\nmetric = dc.metrics.Metric(dc.metrics.pearson_r2_score)\n\n```", "```py\nprint(\"Evaluating model\")\ntrain_scores = model.evaluate(train_dataset, [metric], transformers)\ntest_scores = model.evaluate(test_dataset, [metric], transformers)\n\nprint(\"Train scores\")\nprint(train_scores)\n\nprint(\"Test scores\")\nprint(test_scores)\n\n```"]