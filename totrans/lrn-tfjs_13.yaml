- en: 'Chapter 12\. Dicify: Capstone Project'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。骰子化：顶点项目
- en: “Everybody has a plan until they get punched in the mouth.”
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “每个人都有一个计划，直到他们被打在嘴巴上。”
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Iron Mike Tyson
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —铁拳迈克·泰森
- en: All of your training has gotten you through a variety of theories and exercises.
    As of right now, you know enough to come up with a plan to build new and creative
    uses for machine learning in TensorFlow.js. In this chapter, you’ll develop your
    capstone project. Rather than learning yet another aspect of machine learning
    with TensorFlow.js, you’ll start this chapter with a challenge, and you’ll use
    your existing skills to build a solution that works. From idea to completion,
    this chapter will guide you through the execution of solving a problem. Whether
    this is your first book on machine learning or your 10th, this capstone is your
    time to shine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你的所有训练使你通过各种理论和练习。现在，你已经知道足够多，可以提出一个计划，在TensorFlow.js中为机器学习构建新的创意用途。在这一章中，你将开发你的顶点项目。与其用TensorFlow.js学习另一个机器学习方面，不如在这一章开始时接受一个挑战，并利用你现有的技能构建一个可行的解决方案。从构思到完成，这一章将指导你解决问题的执行。无论这是你第一本机器学习书籍还是第十本，这个顶点项目是你展现才华的时刻。
- en: 'We will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将：
- en: Research the problem
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究问题
- en: Create and augment data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和增强数据
- en: Train a model that will solve the problem
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练一个能解决问题的模型
- en: Implement the solution in a website
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网站中实施解决方案
- en: When you finish this chapter, you’ll have applied your skills from beginning
    to end to solve a fun machine learning project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成这一章时，你将运用从头到尾的技能来解决一个有趣的机器学习项目。
- en: A Dicey Challenge
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个具有挑战性的任务
- en: We’ll be using your newfound skill to blur the line between art and science.
    Engineers have been using machines for impressive visual feats for years. Most
    notably, the camera obscura technique (as shown in [Figure 12-1](#camera_obscura))
    allowed mad scientists to trace live scenery with a lens and a mirror.^([1](ch12.html#idm45049236364264))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用你新发现的技能来模糊艺术和科学之间的界限。工程师们多年来一直在利用机器进行令人印象深刻的视觉壮举。最值得注意的是，暗箱相机技术（如[图12-1](#camera_obscura)所示）让疯狂的科学家们可以用镜头和镜子追踪实景。^([1](ch12.html#idm45049236364264))
- en: '![person looking into dark box camera obscura](assets/ltjs_1201.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![人看着黑匣子相机暗箱](assets/ltjs_1201.png)'
- en: Figure 12-1\. Camera obscura
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-1。相机暗箱
- en: Today, people are making art from the strangest things. At my college, the art
    department created a whole scene from *Super Mario Bros.* using nothing but sticky
    notes as pixels. While some of us have the divine inspiration of art, others can
    produce similar works by wielding their other talents.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，人们正在用最奇怪的东西制作艺术品。在我的大学，艺术系用便利贴像素创造了一个完整的《超级马里奥兄弟》场景。虽然我们中有些人有艺术的神启，但其他人可以通过发挥他们的其他才能制作类似的作品。
- en: Your challenge, should you choose to accept it and get everything you can from
    this book, is to teach an AI how to draw using dice. By lining up six-sided dice
    and choosing the correct number to show, you can replicate any image. Artists
    will buy hundreds of dice and re-create images using their skills. In this chapter,
    you’ll bring all the skills you’ve learned to bear and teach an AI how to do a
    decent job at breaking down images into dice art, as shown in [Figure 12-2](#dicify_tfjs).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你的挑战，如果你选择接受并从这本书中学到尽可能多的东西，就是教会人工智能如何使用骰子绘画。通过排列六面骰子并选择正确的数字显示，你可以复制任何图像。艺术家们会购买数百个骰子，并利用他们的技能重新创作图像。在这一章中，你将运用你学到的所有技能，教会人工智能如何将图像分解成骰子艺术，如[图12-2](#dicify_tfjs)所示。
- en: '![Image to dice version](assets/ltjs_1202.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图像转换为骰子版本](assets/ltjs_1202.png)'
- en: Figure 12-2\. Converting graphics into dice
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-2。将图形转换为骰子
- en: Once you have the AI capable of converting black-and-white images to dice, you
    can do all kinds of things, like create a cool webcam filter, make an excellent
    website, or even print the directions for a fun craft project for yourself.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的人工智能能够将黑白图像转换为骰子，你可以做很多事情，比如创建一个酷炫的网络摄像头滤镜，制作一个出色的网站，甚至为自己打印一个有趣的手工艺项目的说明。
- en: Take 10 minutes before you continue, and strategize how you can use your skills
    to build a decent image-to-dice converter from scratch.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前花10分钟，策划如何利用你的技能从零开始构建一个体面的图像到骰子转换器。
- en: The Plan
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计划
- en: Ideally, you came up with something similar to me. First, you’ll need the data,
    then you’ll need to train a model, and lastly, you’ll need to create a website
    that utilizes the trained model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你想到了与我类似的东西。首先，你需要数据，然后你需要训练一个模型，最后，你需要创建一个利用训练模型的网站。
- en: The Data
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: While dice aren’t terribly complicated, what each patch of pixels should be
    isn’t an existing dataset. You’ll need to generate a dataset that’s good enough
    to map a patch of pixels of an image into what die would best fit. You’ll create
    data like that in [Figure 12-3](#pixel_to_die).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然骰子并不是非常复杂，但每个像素块应该是什么并不是一个现有的数据集。你需要生成一个足够好的数据集，将图像的一个像素块映射到最适合的骰子。你将创建像[图12-3](#pixel_to_die)中那样的数据。
- en: '![the vertical line is converted to the number three in dice](assets/ltjs_1203.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![垂直线转换为骰子中的数字三](assets/ltjs_1203.png)'
- en: Figure 12-3\. Teach the AI how to pick which die works
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-3。教AI如何选择哪个骰子适用
- en: Some dice can be rotated. The two, three, and six will have to be repeated in
    the dataset, so they are specific to each configuration. While they are interchangeable
    in games, they are not in art. [Figure 12-4](#three_ne_three) demonstrates how
    these numbers are visually mirrored.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些骰子可以旋转。数字二、三和六将需要在数据集中重复出现，因此它们对每种配置都是特定的。虽然它们在游戏中是可互换的，但在艺术中不是。[图12-4](#three_ne_three)展示了这些数字如何在视觉上镜像。
- en: '![Three and three rotated](assets/ltjs_1204.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![三个骰子和三个旋转](assets/ltjs_1204.png)'
- en: Figure 12-4\. Angles matter; these two are not equal
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-4。角度很重要；这两个不相等
- en: This means you’ll need nine possible configurations total. That’s six dice,
    with three of them rotated 90 degrees. [Figure 12-5](#nine_config) demonstrates
    all the possible configurations for your average six-sided game die.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你需要总共九种可能的配置。那就是六个骰子，其中三个旋转了90度。[图12-5](#nine_config)展示了你平均六面游戏骰子的所有可能配置。
- en: '![The nine possible configurations of a six sided die illustrated with actual
    dice](assets/ltjs_1205.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![用实际骰子说明的六面骰子的九种可能配置](assets/ltjs_1205.png)'
- en: Figure 12-5\. The nine possible configurations
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-5。九种可能的配置
- en: These are the patterns available for re-creating any image with one style of
    dice that must sit flat. While this is imperfect for directly representing an
    image, the resolution improves with quantity and distance from the dice.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用一种必须平放的骰子风格重新创建任何图像的可用模式。虽然这对于直接表示图像来说并不完美，但随着数量和距离的增加，分辨率会提高。
- en: The Training
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: 'Two big questions come to mind when designing the model:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计模型时，会有两个重要问题：
- en: Is there anything out there that would be useful for transfer learning?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有什么东西对迁移学习有用？
- en: Should the model have convolutional layers?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型应该有卷积层吗？
- en: First, I don’t believe I’ve ever seen anything like this before. When creating
    the model, we’ll need to assure a validation and a testing set to verify the model
    is training well because we’ll be designing it from scratch.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我从未见过类似的东西。在创建模型时，我们需要确保有一个验证和测试集来验证模型是否训练良好，因为我们将从头开始设计它。
- en: Second, the model should probably avoid convolutions. Convolutions help you
    extract complicated features regardless of their positions, but this model is
    very position-specific. Two patches of pixels could be a two or a two rotated.
    For this exercise, I’m going to go with no convolutional layers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，模型应该避免使用卷积。卷积可以帮助您提取复杂的特征，而不考虑它们的位置，但这个模型非常依赖位置。两个像素块可以是一个2或一个旋转的2。对于这个练习，我将不使用卷积层。
- en: We won’t know until we’re finished if skipping convolutions was a good plan
    or not. Unlike most programming, there’s a layer of experimentation in machine
    learning architecture. We can always go back and try other architectures.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 直到完成后我们才知道跳过卷积是否是一个好计划。与大多数编程不同，机器学习架构中有一层实验。我们可以随时回去尝试其他架构。
- en: The Website
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网站
- en: Once the model is capable of categorizing a small patch of pixels into a corresponding
    die, you’ll need to activate your tensor skills to break images into small chunks
    to be converted. The fragments of images will be stacked, predicted, and reconstructed
    with pictures of dice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型能够将一小块像素分类为相应的骰子，您将需要激活您的张量技能，将图像分解成小块以进行转换。图像的片段将被堆叠，预测并与骰子的图片重建。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Because the concepts covered in this chapter are applications of previously
    explained concepts, this chapter will discuss problems at a high level and might
    skip some of the details of the code to solve this capstone. If you’re unable
    to follow along, please review previous chapters for concepts and [the associated
    source code](https://oreil.ly/PjNLO) for specifics. *This chapter will not show
    every line of code.*
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章涵盖的概念是先前解释的概念的应用，本章将讨论高层次的问题，并可能跳过解决这个毕业项目的代码细节。如果您无法跟上，请查看先前章节以获取概念和[相关源代码](https://oreil.ly/PjNLO)的具体信息。*本章不会展示每一行代码*。
- en: Generating Training Data
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成训练数据
- en: The goal of this section is to create a multitude of data to use in training
    a model. This is more art than science. We want to have plenty of data. To generate
    hundreds of images, we can slightly modify existing dice pixels. For this section,
    I’ve created 12 x 12 prints of dice with simple rank-two tensors. The nine configurations
    of dice can be created with a little patience. Look at [Example 12-1](#dice_array_example)
    and notice blocks of zeros that represent the dark pips of the dice.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是创建大量数据以用于训练模型。这更多是一门艺术而不是科学。我们希望有大量的数据。为了生成数百张图像，我们可以轻微修改现有的骰子像素。对于本节，我创建了12
    x 12的骰子印刷品，使用简单的二阶张量。可以通过一点耐心创建九种骰子的配置。查看[示例12-1](#dice_array_example)，注意代表骰子黑点的零块。
- en: Example 12-1\. An array representation of the dice one and two
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例12-1。骰子一和二的数组表示
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can create a `[9, 12, 12]` float of ones with `tf.ones` and then manually
    convert spots to `0` to make the black spots for each die.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`tf.ones`创建一个`[9, 12, 12]`的全为`1`的浮点数，然后手动将位置转换为`0`，以制作每个骰子的黑点。
- en: Once you have all nine configurations, you can consider image augmentation to
    create new data. Standard image augmentation libraries won’t work here, but you
    can use your tensor skills to write a function to slightly shift each dice position
    by one pixel. This small mutation turns a single die into nine variations. You’d
    then have nine variations of nine dice in your dataset.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有所有九种配置，您可以考虑图像增强以创建新数据。标准图像增强库在这里无法使用，但您可以利用您的张量技能编写一个函数，稍微移动每个骰子位置一个像素。这种小变异将一个骰子变成九种变体。然后您的数据集中将有九种骰子的九种变体。
- en: 'To do this in code, imagine increasing the size of the die and then sliding
    a 12 x 12 window around to slightly cut new versions of the image off-center:
    this a *pad and crop augmentation*.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中实现这一点，想象一下增加骰子的大小，然后在周围滑动一个12 x 12的窗口，稍微偏离中心剪切图像的新版本：这是一种*填充和裁剪增强*。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_dicify__capstone_project_CO1-1)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dicify__capstone_project_CO1-1)'
- en: The `.pad` adds a `1` value white border to the existing tensor.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pad`为现有张量添加一个值为`1`的白色边框。'
- en: '[![2](assets/2.png)](#co_dicify__capstone_project_CO1-2)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dicify__capstone_project_CO1-2)'
- en: To generate nine new shifted values, the origin of the slice position is shifted
    each time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成九个新的移位值，每次都会移动切片位置的起点。
- en: '[![3](assets/3.png)](#co_dicify__capstone_project_CO1-3)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dicify__capstone_project_CO1-3)'
- en: The sliced subtensor becomes a new 12 x 12 value with each origin.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 切片的子张量每次都会成为一个新的12 x 12值，起点不同。
- en: The results of the `pixelShift` create small variations that should all still
    be solved with the original die. [Figure 12-6](#mods) shows the visual representation
    of shifted pixels.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixelShift`的结果创建了一些小变化，这些变化应该仍然可以用原始骰子解决。[图12-6](#mods)显示了移动像素的视觉表示。'
- en: '![Nine new images from one](assets/ltjs_1206.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![从一个骰子生成九个新图像](assets/ltjs_1206.png)'
- en: Figure 12-6\. Shifting the pixels creates new dice
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-6。移动像素创建新的骰子
- en: While nine versions of each die are better than one, it’s still a very small
    dataset. You’ve got to come up with a way to create new data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个骰子有九个版本比一个好，但数据集仍然非常小。您必须想出一种方法来创建新数据。
- en: You can create new variations by randomly combining the nine shifted images.
    There are a lot of ways you can combine any two of these images. One way is to
    use `tf.where` and keep the lesser of the two images in their new combined image.
    This keeps the dark pixels from any two shifted dice.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过随机组合这九个移位图像来创建新的变体。有很多方法可以组合这些图像中的任意两个。一种方法是使用`tf.where`，并将两个图像中较小的保留在它们的新组合图像中。这样可以保留任意两个移位骰子的黑色像素。
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_dicify__capstone_project_CO2-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dicify__capstone_project_CO2-1)'
- en: '`tf.where` is like running a conditional on each element.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.where`就像在每个元素上运行条件。'
- en: '[![2](assets/2.png)](#co_dicify__capstone_project_CO2-2)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dicify__capstone_project_CO2-2)'
- en: '`tf.less` returns true when the first parameter is less than the second parameter.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个参数小于第二个参数时，`tf.less`返回true。
- en: '[![3](assets/3.png)](#co_dicify__capstone_project_CO2-3)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dicify__capstone_project_CO2-3)'
- en: The value in `arrCopy[i]` is returned if the condition in the `where` is true.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`where`中的条件为true，则返回`arrCopy[i]`中的值。
- en: '[![4](assets/4.png)](#co_dicify__capstone_project_CO2-4)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_dicify__capstone_project_CO2-4)'
- en: The value in `arrCopy[j]` is returned if the condition in the `where` is false.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`where`中的条件为false，则返回`arrCopy[j]`中的值。
- en: When you overlap these dice, you get new tensors that look like small mutations
    of the dice you had before. The 4 x 4 pips on the dice get combined to create
    quite a few new dice you can add to your dataset.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您重叠这些骰子时，您会得到看起来像之前骰子的小变异的新张量。骰子上的4 x 4个点被组合在一起，可以创建相当多的新骰子，可以添加到您的数据集中。
- en: You can even run the mutation twice. Mutations of mutations are still distinguishable
    by the human eye. As you look at the four generated dice in [Figure 12-7](#combos),
    it’s still apparent that these are generated from the side showing value one.
    The new dice are still significantly visually distant from all other dice combinations,
    even though they are made-up second-generation mutations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以对变异进行两次。变异的变异仍然可以被人眼区分。当您查看[图12-7](#combos)中生成的四个骰子时，仍然可以明显看出这些骰子是从显示值为一的一面生成的。即使它们是由虚构的第二代变异组合而成，新骰子仍然在视觉上与所有其他骰子组合明显不同。
- en: '![Mutations via combinations of the previous dice to make new dice](assets/ltjs_1207.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![通过组合以前的骰子进行变异以制作新骰子](assets/ltjs_1207.png)'
- en: Figure 12-7\. Four mutations via combinations of dice
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-7。通过骰子组合的四种变异
- en: As you might have assumed, there will be some accidental duplication as we create
    these wild Tetris-like shapes. Rather than trying to avoid repeating configurations,
    you can remove duplicates with a call to `tf.unique`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的那样，在创建这些类似俄罗斯方块的形状时，会有一些意外的重复。与其试图避免重复配置，不如通过调用`tf.unique`来删除重复项。
- en: Warning
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The GPU currently does not support `tf.unique`, so you might have to set the
    backend to CPU to call `unique`. Afterward, you can return the backend to GPU
    if you’d like.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 目前GPU不支持`tf.unique`，因此您可能需要将后端设置为CPU来调用`unique`。之后，如果您愿意，可以将后端返回到GPU。
- en: 'At a high level, shifting and then mutating an image of a die generated over
    more than two hundred dice from a single die. Here is the high-level recap:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，对生成的骰子图像进行移位和变异，从单个骰子生成了两百多个骰子。以下是高层次的总结：
- en: Shift the image one pixel in every direction.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像在每个方向上移动一个像素。
- en: Combine the shifted tensors in all possible combinations.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将移位后的张量组合成所有可能的组合。
- en: Perform the same mutation combination on the previous set.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对先前集合执行相同的变异组合。
- en: Consolidate the data with only the unique results.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅使用唯一结果合并数据。
- en: Now we have more than two hundred tensors for each of the nine possible combinations.
    Not bad, considering you had only nine tensors a moment ago. Are two hundred images
    enough? We’ll have to test to find out.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每种九种可能的组合，我们有两百多个张量。考虑到刚才只有九个张量，这还不错。两百张图片足够吗？我们需要测试才能找出答案。
- en: 'You can jump immediately into training, or you can save the data to a file.
    [The code associated with this chapter](https://oreil.ly/Vr98u) writes a file.
    The primary function of this section can be summarized at a high level with the
    following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以立即开始训练，或者将数据保存到文件中。[本章相关的代码](https://oreil.ly/Vr98u)会写入一个文件。本节的主要功能可以用以下代码概括：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Training
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练
- en: 'Now that you have nearly two thousand images total, you can try to train your
    model. The data should be stacked and shuffled:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您总共有将近两千张图片，可以尝试训练您的模型。数据应该被堆叠和洗牌：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_dicify__capstone_project_CO3-1)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dicify__capstone_project_CO3-1)'
- en: You’re creating large arrays of data by concatenating individual arrays of data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过连接单个数据数组来创建大量数据数组。
- en: '[![2](assets/2.png)](#co_dicify__capstone_project_CO3-2)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dicify__capstone_project_CO3-2)'
- en: You’re then creating answer arrays of the exact same size as each dataset and
    filling them with the answer using `Array`’s `.fill`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您创建与每个数据集大小完全相同的答案数组，并使用`Array`的`.fill`来填充它们。
- en: '[![3](assets/3.png)](#co_dicify__capstone_project_CO3-3)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dicify__capstone_project_CO3-3)'
- en: You can then randomize these two arrays together.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将这两个数组一起随机化。
- en: 'From here, you can peel off a test set or not. Look at the associated code
    if you’d like help on how to do so. Once you have your data broken up how you’d
    like, you then convert these two JavaScript arrays into proper tensors:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以拆分出一个测试集，也可以不拆分。如果您需要帮助，可以查看相关代码。一旦您按照自己的意愿拆分了数据，然后将这两个JavaScript数组转换为正确的张量：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_dicify__capstone_project_CO4-1)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dicify__capstone_project_CO4-1)'
- en: The stacked tensor is created, and for simplicity it is returned to rank-three
    images by expanding the dimensions at index three.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建堆叠张量，并为简单起见，通过在索引三处扩展维度将其返回为三维图像。
- en: '[![2](assets/2.png)](#co_dicify__capstone_project_CO4-2)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dicify__capstone_project_CO4-2)'
- en: The numeric answers are then one-hot encoded into tensors to fit a softmax model
    output.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将数字答案进行独热编码为张量，以适应softmax模型输出。
- en: The model is constructed in a straightforward and small design. You might find
    a better structure, but for this, I went with two hidden layers. Feel free to
    come back and experiment with the architecture and see what you can get for speed
    and accuracy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型采用了简单而小型的设计。您可能会找到更好的结构，但对于这个，我选择了两个隐藏层。随时回来并尝试使用架构进行实验，看看您可以获得什么样的速度和准确性。
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The model starts by flattening the image input to connect them to a neural network,
    and then you have a `64`- and an `8`-unit layer. The last layer is nine possible
    dice configurations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型首先通过将图像输入展平以将它们连接到神经网络，然后有一个`64`和一个`8`单元层。最后一层是九种可能的骰子配置。
- en: This model was able to attain near-perfect accuracy in a few epochs. This is
    promising for the generated data, but in the next section, we’ll see how it fares
    against actual images.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型在几个时代内就能达到近乎完美的准确率。这对于生成的数据来说是很有希望的，但在下一节中，我们将看到它在实际图像中的表现如何。
- en: The Site Interface
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站界面
- en: Now that you have a trained model, it’s time to test it with nongenerated data.
    There are sure to be some mistakes, but if the model performs decently, this will
    be quite a success!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了一个经过训练的模型，是时候用非生成数据进行测试了。肯定会有一些错误，但如果模型表现得不错，这将是相当成功的！
- en: Your website will need to be told how many dice to use and then break an input
    image into that many patches. The patches will be resized into 12 x 12 inputs
    (like our training data), and then you run the model on the images for predictions.
    In the example shown in [Figure 12-8](#convert_img), an image of an X has been
    told to be converted into four dice. So the image is cut into four quadrants,
    and each of those is then predicted. They should ideally align the die to draw
    the X.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您的网站需要告诉需要使用多少个骰子，然后将输入图像分成相同数量的块。这些块将被调整大小为12 x 12的输入（就像我们的训练数据），然后在图像上运行模型进行预测。在[图12-8](#convert_img)中显示的示例中，一个X的图像被告知要转换为四个骰子。因此，图像被切割成四个象限，然后对每个象限进行预测。它们应该理想地将骰子对齐以绘制X。
- en: '![TensorFlow logo to 32 x 32 dice before and after](assets/ltjs_1208.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![将TensorFlow标志切割成32 x 32块之前和之后](assets/ltjs_1208.png)'
- en: Figure 12-8\. TensorFlow logo to 32 x 32 dice
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-8。将TensorFlow标志切割成32 x 32块
- en: Once you have the resulting predictions, you can reconstruct a new tensor composed
    of the designated image tensors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您获得了预测结果，您可以重建一个由指定图像张量组成的新张量。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The images were trained on zeros and ones. This means, for you to expect a decent
    result, your input image should also be composed of zeros and ones. Color or even
    shades of gray will have spurious results.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像是在0和1上进行训练的。这意味着，为了期望得到一个体面的结果，您的输入图像也应该由0和1组成。颜色甚至灰度都会产生虚假的结果。
- en: 'The core of the application code should look something like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代码的核心应该看起来像这样：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The prediction of the results is your classic “data in, data out” model behavior.
    The two most complicated parts will be `cutData` and the `displayPredictions`
    methods. Here, your tensor skills are ready to shine.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的预测是您经典的“数据输入，数据输出”模型行为。最复杂的部分将是`cutData`和`displayPredictions`方法。在这里，您的张量技能将大放异彩。
- en: Cut into Dice
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切成块
- en: The `cutData` method will utilize `tf.split`, which splits a tensor into N subtensors
    along an axis. You can split an image up by using `tf.split` along each axis to
    make a patch or grid of images to predict.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`cutData`方法将利用`tf.split`，它沿着一个轴将张量分割为N个子张量。您可以通过使用`tf.split`沿着每个轴将图像分割成一个补丁或图像网格来进行预测。'
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_dicify__capstone_project_CO5-1)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dicify__capstone_project_CO5-1)'
- en: You will only need a grayscale version of the image converted from pixels.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要将图像的灰度版本从像素转换过来。
- en: '[![2](assets/2.png)](#co_dicify__capstone_project_CO5-2)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dicify__capstone_project_CO5-2)'
- en: The image is resized so it can be evenly split by the number of dice you require.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图像被调整大小，以便可以被所需数量的骰子均匀分割。
- en: '[![3](assets/3.png)](#co_dicify__capstone_project_CO5-3)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dicify__capstone_project_CO5-3)'
- en: The image is cut along the first axis (height).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图像沿着第一个轴（高度）被切割。
- en: '[![4](assets/4.png)](#co_dicify__capstone_project_CO5-4)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_dicify__capstone_project_CO5-4)'
- en: Those columns are then cut along the width axis to create a grid of tensors.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将这些列沿着宽度轴切割，以创建一组张量。
- en: The `grid` variable now contains an array of images. You can resize the images
    and stack them for prediction when needed. For example, [Figure 12-9](#tf_grid)
    is a grid of slices because the black-and-white cut of the TensorFlow logo would
    create lots of smaller images that will be converted to dice.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid`变量现在包含一个图像数组。在需要时，您可以调整图像大小并堆叠它们进行预测。例如，[图12-9](#tf_grid)是一个切片网格，因为TensorFlow标志的黑白切割将创建许多较小的图像，这些图像将被转换为骰子。'
- en: '![TensorFlow logo to 27x27 patches](assets/ltjs_1209.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![将TensorFlow标志切割成27x27块](assets/ltjs_1209.png)'
- en: Figure 12-9\. The slices of a black-and-white TensorFlow logo
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-9。黑白TensorFlow标志的切片
- en: Reconstruct the Image
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重建图像
- en: Once you have your predictions, you’ll want to reconstruct the image, but you’ll
    want to switch the original patches out for their predicted dice.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了预测结果，您将想要重建图像，但您将希望将原始块替换为它们预测的骰子。
- en: 'The code to reconstruct and create a large tensor from the predicted answers
    could work like so:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从预测答案重建和创建大张量的代码可能如下所示：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_dicify__capstone_project_CO6-1)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_dicify__capstone_project_CO6-1)'
- en: The `diceTensors` to draw are loaded from the `diceData` and converted.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制的`diceTensors`从`diceData`中加载并转换。
- en: '[![2](assets/2.png)](#co_dicify__capstone_project_CO6-2)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_dicify__capstone_project_CO6-2)'
- en: To go from a 1D back to a 2D, the index is calculated for each row.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要从1D返回到2D，需要为每一行计算索引。
- en: '[![3](assets/3.png)](#co_dicify__capstone_project_CO6-3)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_dicify__capstone_project_CO6-3)'
- en: The rows are made by concatenating along the width axis.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 行是通过沿着宽度轴进行连接而创建的。
- en: '[![4](assets/4.png)](#co_dicify__capstone_project_CO6-4)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_dicify__capstone_project_CO6-4)'
- en: The columns are made by concatenating the rows along the default (height) axis.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 列是通过沿着默认（高度）轴连接行来制作的。
- en: '[![5](assets/5.png)](#co_dicify__capstone_project_CO6-5)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_dicify__capstone_project_CO6-5)'
- en: Ta-da! The newly constructed tensor can be displayed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 哒哒！新构建的张量可以显示出来了。
- en: If you load a black-and-white image and process it, it’s time for the moment
    of truth. Were 200ish generated images for each class sufficient?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你加载了一个黑白图像并处理它，现在是真相的时刻。每个类别生成了大约200张图像是否足够？
- en: I set the `numDice` variable to 27\. A 27 x 27 dice image is pretty low-resolution
    and would cost around $80 in dice on Amazon. Let’s see what it looks like with
    the TensorFlow logo. [Figure 12-10](#tf) shows the result.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我将`numDice`变量设置为27。一个27 x 27的骰子图像是相当低分辨率的，需要在亚马逊上花费大约80美元。让我们看看加上TensorFlow标志会是什么样子。[图12-10](#tf)展示了结果。
- en: '![TensorFlow logo to 27 x 27 dice before and after](assets/ltjs_1210.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![TensorFlow标志转换为27 x 27骰子之前和之后](assets/ltjs_1210.png)'
- en: Figure 12-10\. TensorFlow logo to 27 x 27 dice
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-10。TensorFlow标志转换为27 x 27骰子
- en: It works! Not bad at all. You just taught an AI how to be an artist. If you
    bump the number of dice even higher, the image becomes more apparent.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效！一点也不错。你刚刚教会了一个AI如何成为一个艺术家。如果你增加骰子的数量，图像会变得更加明显。
- en: Chapter Review
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: Using the strategies from this chapter, I trained an AI to handle red-and-white
    dice. I don’t have a lot of patience, so I only made a 19x19 image for a friend.
    The result was quite impressive. It took me about 30 minutes to put all the dice
    into the shadow box shown in [Figure 12-11](#ir_dice). I can’t say I would have
    braved this effort if I didn’t have printed instructions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章的策略，我训练了一个AI来处理红白骰子。我没有太多耐心，所以我只为一个朋友制作了一个19x19的图像。结果相当令人印象深刻。我花了大约30分钟将所有的骰子放入[图12-11](#ir_dice)中显示的影子盒中。如果没有印刷说明，我想我不会冒这个风险。
- en: '![image of the 19 x 19 finished product.](assets/ltjs_1211.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![19 x 19成品图像。](assets/ltjs_1211.png)'
- en: Figure 12-11\. The completed 19 x 19 red-and-white dice with a backlight
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-11。完成的19 x 19红白骰子带背光
- en: You can go much further. What mad scientist doesn’t have a portrait of themselves?
    Now your portrait can be made from dice. Maybe you can teach a small robot how
    to lay the dice out for you, so you can build huge frames full of hundreds of
    pounds of dice (see [Figure 12-12](#dice_wall)).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以走得更远。哪个疯狂的科学家没有自己的肖像？现在你的肖像可以由骰子制成。也许你可以教一个小机器人如何为你摆放骰子，这样你就可以建造满是数百磅骰子的巨大画框（见[图12-12](#dice_wall)）。
- en: '![person looking at a wall of dice that makes an image](assets/ltjs_1212.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![一个人看着一堵用骰子做成的图像的墙](assets/ltjs_1212.png)'
- en: Figure 12-12\. The perfect mad science portrait
  id: totrans-157
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-12。完美的疯狂科学肖像
- en: You can continue to improve the data and build better results, and you’re not
    just limited to plain old black-and-white dice. You can use your AI skills to
    draw with decorative dice, sticky notes, Rubik’s Cubes, Legos, coins, wood chips,
    cookies, stickers, or anything.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以继续改进数据并获得更好的结果，你不仅仅局限于普通的黑白骰子。你可以利用你的AI技能用装饰性骰子、便利贴、魔方、乐高积木、硬币、木片、饼干、贴纸或其他任何东西来绘画。
- en: While this experiment was a success for version 1.0, we’ve identified countless
    experiments you can take on to improve your model.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个实验对于1.0版本来说是成功的，但我们已经确定了无数个实验，可以让你改进你的模型。
- en: 'Chapter Challenge: Easy as 01, 10, 11'
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 章节挑战：简单如01、10、11
- en: Now you have a powerful new model that can be an artist for any photo that is
    composed of black `0` and white `1` pixels. Unfortunately, most images, even grayscale,
    have intermediate values. If only there was a way to take an image and convert
    it to black and white efficiently.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个强大的新模型，可以成为由黑色`0`和白色`1`像素组成的任何照片的艺术家。不幸的是，大多数图像，即使是灰度图像，也有中间值。如果有一种方法可以高效地将图像转换为黑白就好了。
- en: Converting images to binary black and white is called *binarization*. The world
    of computer vision has all kinds of impressive algorithms on how to best binarize
    an image. Let’s focus on the simplest.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像转换为二进制黑白被称为*二值化*。计算机视觉领域有各种各样的令人印象深刻的算法，可以最好地将图像二值化。让我们专注于最简单的方法。
- en: In this Chapter Challenge, take the `tf.where` method and use it to check if
    a pixel is beyond a given threshold. Using that threshold, you can convert each
    pixel of a grayscale image to `1` or `0`. This will prepare normal graphics input
    into your dice model.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个章节挑战中，使用`tf.where`方法来检查像素是否超过给定的阈值。使用该阈值，你可以将灰度图像的每个像素转换为`1`或`0`。这将为你的骰子模型准备正常的图形输入。
- en: With a few lines of code, you can convert images with thousands of variations
    of light and condense them down to black-and-white pixels, as shown in [Figure 12-13](#binarize).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几行代码，你可以将成千上万种光的变化转换为黑白像素，如[图12-13](#binarize)所示。
- en: '![A skull turned into black-and-white pixels.](assets/ltjs_1213.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![一个头骨被转换成黑白像素。](assets/ltjs_1213.png)'
- en: Figure 12-13\. The binarized skull
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-13。二值化的头骨
- en: You can find the answer to this challenge in [Appendix B](app02.html#appendix_b).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[附录B](app02.html#appendix_b)中找到这个挑战的答案。
- en: Review Questions
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Let’s review the lessons you’ve learned from the code you’ve written in this
    chapter. Take a moment to answer the following questions:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下你在本章编写的代码中学到的知识。花点时间回答以下问题：
- en: What TensorFlow.js method allows you to break a tensor into an equal set of
    sub-tensors?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TensorFlow.js的哪个方法允许你将张量分解为一组相等的子张量？
- en: What is the name of the process with which you create slightly modified alternatives
    of data to grow your data set?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于创建数据的稍微修改的替代品以扩大数据集的过程的名称是什么？
- en: Why is Gant Laborde so amazing?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么Gant Laborde如此了不起？
- en: Solutions to these exercises are available in [Appendix A](app01.html#book_appendix).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习的解决方案可以在[附录A](app01.html#book_appendix)中找到。
- en: ^([1](ch12.html#idm45049236364264-marker)) If you’d like to learn more about
    camera obscura, watch the documentary [*Tim’s Vermeer*](https://oreil.ly/IrjNM).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch12.html#idm45049236364264-marker))如果你想了解更多关于暗箱的知识，请观看纪录片[*Tim's Vermeer*](https://oreil.ly/IrjNM)。
