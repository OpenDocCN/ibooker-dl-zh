["```py\n*# Keras to TensorFlow Lite*\n$ tflite_convert \\\n  --output_file=my_model.tflite \\\n  --keras_model_file=my_model.h5\n\n*# TensorFlow to TensorFlow Lite*\n$ tflite_convert \\\n  --output_file=my_model.tflite \\\n  --graph_def_file=my_model/frozen_graph.pb\n```", "```py\n    git clone https://github.com/tensorflow/tensorflow.git\n    ```", "```py\nval image = FirebaseVisionImage.fromBitmap(bitmap)\nval detector = FirebaseVision.getInstance().visionLabelDetector\nval result = detector.detectInImage(image).addOnSuccessListener { labels ->\n    *`// Print labels`*\n}\n```", "```py\nval customModel = FirebaseLocalModelSource.Builder(\"my_custom_model\")\n        .setAssetFilePath(\"my_custom_model.tflite\").build()\nFirebaseModelManager.getInstance().registerLocalModelSource(customModel)\n```", "```py\nval IMAGE_WIDTH = 224\nval IMAGE_HEIGHT = 224\nval modelConfig = FirebaseModelInputOutputOptions.Builder()\n        .setInputFormat(0, FirebaseModelDataType.FLOAT32, intArrayOf(1,\nIMAGE_WIDTH, IMAGE_HEIGHT, 3))\n        .setOutputFormat(0, FirebaseModelDataType.FLOAT32, intArrayOf(1, 1000))\n        .build()\n```", "```py\nval bitmap = Bitmap.createScaledBitmap(image, IMAGE_WIDTH, IMAGE_HEIGHT, true)\nval input = Array(1) {\n\tArray(IMAGE_WIDTH) { Array(IMAGE_HEIGHT) { FloatArray(3) } }\n\t}\nfor (x in 0..IMAGE_WIDTH) {\n    for (y in 0..IMAGE_HEIGHT) {\n        val pixel = bitmap.getPixel(x, y)\n        input[0][x][y][0] = (Color.red(pixel) - 127) / 128.0f\n        input[0][x][y][1] = (Color.green(pixel) - 127) / 128.0f\n        input[0][x][y][2] = (Color.blue(pixel) - 127) / 128.0f\n    }\n}\n```", "```py\nval options = FirebaseModelOptions.Builder()\n     .setLocalModelName(\"my_custom_model\").build()\nval interpreter = FirebaseModelInterpreter.getInstance(options)\n```", "```py\nval modelInputs = FirebaseModelInputs.Builder().add(input).build()\ninterpreter.run(modelInputs, modelConfig).addOnSuccessListener { result ->\n    // Print results\n}\n```", "```py\nval remoteModel = FirebaseCloudModelSource.Builder(\"my_remote_custom_model\")\n        .enableModelUpdates(true).build()\nFirebaseModelManager.getInstance().registerCloudModelSource(remoteModel)\n```", "```py\nval options = FirebaseModelOptions.Builder()\n    .setCloudModelName(\"my_remote_custom_model\").build()\nval interpreter = FirebaseModelInterpreter.getInstance(options)\n```", "```py\nval remoteConfig = FirebaseRemoteConfig.getInstance()\nremoteConfig.fetch()\nval modelName = remoteConfig.getString(\"current_best_model\")\nval remoteModel = FirebaseCloudModelSource.Builder(modelName)\n        .enableModelUpdates(true).build()\nFirebaseModelManager.getInstance().registerCloudModelSource(remoteModel)\n```", "```py\n$ tflite_convert \\\n  --output_file=quantized-model.tflite \\\n  --graph_def_file=/tmp/some-graph.pb \\\n  --inference_type=QUANTIZED_UINT8 \\\n  --input_arrays=input \\\n  --output_arrays=MobilenetV1/Predictions/Reshape_1 \\\n  --mean_values=128 \\\n  --std_dev_values=127\n```", "```py\n    $ fritz model benchmark <path to keras model.h5>\n     ...\n     ------------------------\n     Fritz Model Grade Report\n     ------------------------\n\n     Core ML Compatible:              True\n     Predicted Runtime (iPhone X):    31.4 ms (31.9 fps)\n     Total MFLOPS:                    686.90\n     Total Parameters:                1,258,580\n     Fritz Version ID:                <Version UID>\n    ```", "```py\n    let poseModel = FritzVisionPoseModel()\n    guard let poseResult = try? poseModel.predict(image) else { return }\n    let imageWithPose = poseResult.drawPose() *`//` `O``v``e``r``l``a``y``s` `p``o``s``e` `o``n` `i``n``p``u``t``.`*\n    ```"]