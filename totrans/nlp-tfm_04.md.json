["```py\nfrom transformers import AutoTokenizer\nfrom bertviz.transformers_neuron_view import BertModel\nfrom bertviz.neuron_view import show\n\nmodel_ckpt = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(model_ckpt)\nmodel = BertModel.from_pretrained(model_ckpt)\ntext = \"time flies like an arrow\"\nshow(model, \"bert\", tokenizer, text, display_mode=\"light\", layer=0, head=8)\n```", "```py\ninputs = tokenizer(text, return_tensors=\"pt\", add_special_tokens=False)\ninputs.input_ids\n```", "```py\ntensor([[ 2051, 10029,  2066,  2019,  8612]])\n```", "```py\nfrom torch import nn\nfrom transformers import AutoConfig\n\nconfig = AutoConfig.from_pretrained(model_ckpt)\ntoken_emb = nn.Embedding(config.vocab_size, config.hidden_size)\ntoken_emb\n```", "```py\nEmbedding(30522, 768)\n```", "```py\ninputs_embeds = token_emb(inputs.input_ids)\ninputs_embeds.size()\n```", "```py\ntorch.Size([1, 5, 768])\n```", "```py\nimport torch\nfrom math import sqrt\n\nquery = key = value = inputs_embeds\ndim_k = key.size(-1)\nscores = torch.bmm(query, key.transpose(1,2)) / sqrt(dim_k)\nscores.size()\n```", "```py\ntorch.Size([1, 5, 5])\n```", "```py\nimport torch.nn.functional as F\n\nweights = F.softmax(scores, dim=-1)\nweights.sum(dim=-1)\n```", "```py\ntensor([[1., 1., 1., 1., 1.]], grad_fn=<SumBackward1>)\n```", "```py\nattn_outputs = torch.bmm(weights, value)\nattn_outputs.shape\n```", "```py\ntorch.Size([1, 5, 768])\n```", "```py\ndef scaled_dot_product_attention(query, key, value):\n    dim_k = query.size(-1)\n    scores = torch.bmm(query, key.transpose(1, 2)) / sqrt(dim_k)\n    weights = F.softmax(scores, dim=-1)\n    return torch.bmm(weights, value)\n```", "```py\nclass AttentionHead(nn.Module):\n    def __init__(self, embed_dim, head_dim):\n        super().__init__()\n        self.q = nn.Linear(embed_dim, head_dim)\n        self.k = nn.Linear(embed_dim, head_dim)\n        self.v = nn.Linear(embed_dim, head_dim)\n\n    def forward(self, hidden_state):\n        attn_outputs = scaled_dot_product_attention(\n            self.q(hidden_state), self.k(hidden_state), self.v(hidden_state))\n        return attn_outputs\n```", "```py\nclass MultiHeadAttention(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        embed_dim = config.hidden_size\n        num_heads = config.num_attention_heads\n        head_dim = embed_dim // num_heads\n        self.heads = nn.ModuleList(\n            [AttentionHead(embed_dim, head_dim) for _ in range(num_heads)]\n        )\n        self.output_linear = nn.Linear(embed_dim, embed_dim)\n\n    def forward(self, hidden_state):\n        x = torch.cat([h(hidden_state) for h in self.heads], dim=-1)\n        x = self.output_linear(x)\n        return x\n```", "```py\nmultihead_attn = MultiHeadAttention(config)\nattn_output = multihead_attn(inputs_embeds)\nattn_output.size()\n```", "```py\ntorch.Size([1, 5, 768])\n```", "```py\nfrom bertviz import head_view\nfrom transformers import AutoModel\n\nmodel = AutoModel.from_pretrained(model_ckpt, output_attentions=True)\n\nsentence_a = \"time flies like an arrow\"\nsentence_b = \"fruit flies like a banana\"\n\nviz_inputs = tokenizer(sentence_a, sentence_b, return_tensors='pt')\nattention = model(**viz_inputs).attentions\nsentence_b_start = (viz_inputs.token_type_ids == 0).sum(dim=1)\ntokens = tokenizer.convert_ids_to_tokens(viz_inputs.input_ids[0])\n\nhead_view(attention, tokens, sentence_b_start, heads=[8])\n```", "```py\nclass FeedForward(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.linear_1 = nn.Linear(config.hidden_size, config.intermediate_size)\n        self.linear_2 = nn.Linear(config.intermediate_size, config.hidden_size)\n        self.gelu = nn.GELU()\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n\n    def forward(self, x):\n        x = self.linear_1(x)\n        x = self.gelu(x)\n        x = self.linear_2(x)\n        x = self.dropout(x)\n        return x\n```", "```py\nfeed_forward = FeedForward(config)\nff_outputs = feed_forward(attn_outputs)\nff_outputs.size()\n```", "```py\ntorch.Size([1, 5, 768])\n```", "```py\nclass TransformerEncoderLayer(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.layer_norm_1 = nn.LayerNorm(config.hidden_size)\n        self.layer_norm_2 = nn.LayerNorm(config.hidden_size)\n        self.attention = MultiHeadAttention(config)\n        self.feed_forward = FeedForward(config)\n\n    def forward(self, x):\n        # Apply layer normalization and then copy input into query, key, value\n        hidden_state = self.layer_norm_1(x)\n        # Apply attention with a skip connection\n        x = x + self.attention(hidden_state)\n        # Apply feed-forward layer with a skip connection\n        x = x + self.feed_forward(self.layer_norm_2(x))\n        return x\n```", "```py\nencoder_layer = TransformerEncoderLayer(config)\ninputs_embeds.shape, encoder_layer(inputs_embeds).size()\n```", "```py\n(torch.Size([1, 5, 768]), torch.Size([1, 5, 768]))\n```", "```py\nclass Embeddings(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.token_embeddings = nn.Embedding(config.vocab_size,\n                                             config.hidden_size)\n        self.position_embeddings = nn.Embedding(config.max_position_embeddings,\n                                                config.hidden_size)\n        self.layer_norm = nn.LayerNorm(config.hidden_size, eps=1e-12)\n        self.dropout = nn.Dropout()\n\n    def forward(self, input_ids):\n        # Create position IDs for input sequence\n        seq_length = input_ids.size(1)\n        position_ids = torch.arange(seq_length, dtype=torch.long).unsqueeze(0)\n        # Create token and position embeddings\n        token_embeddings = self.token_embeddings(input_ids)\n        position_embeddings = self.position_embeddings(position_ids)\n        # Combine token and position embeddings\n        embeddings = token_embeddings + position_embeddings\n        embeddings = self.layer_norm(embeddings)\n        embeddings = self.dropout(embeddings)\n        return embeddings\n```", "```py\nembedding_layer = Embeddings(config)\nembedding_layer(inputs.input_ids).size()\n```", "```py\ntorch.Size([1, 5, 768])\n```", "```py\nclass TransformerEncoder(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.embeddings = Embeddings(config)\n        self.layers = nn.ModuleList([TransformerEncoderLayer(config)\n                                     for _ in range(config.num_hidden_layers)])\n\n    def forward(self, x):\n        x = self.embeddings(x)\n        for layer in self.layers:\n            x = layer(x)\n        return x\n```", "```py\nencoder = TransformerEncoder(config)\nencoder(inputs.input_ids).size()\n```", "```py\ntorch.Size([1, 5, 768])\n```", "```py\nclass TransformerForSequenceClassification(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.encoder = TransformerEncoder(config)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        self.classifier = nn.Linear(config.hidden_size, config.num_labels)\n\n    def forward(self, x):\n        x = self.encoder(x)[:, 0, :] # select hidden state of [CLS] token\n        x = self.dropout(x)\n        x = self.classifier(x)\n        return x\n```", "```py\nconfig.num_labels = 3\nencoder_classifier = TransformerForSequenceClassification(config)\nencoder_classifier(inputs.input_ids).size()\n```", "```py\ntorch.Size([1, 3])\n```", "```py\nseq_len = inputs.input_ids.size(-1)\nmask = torch.tril(torch.ones(seq_len, seq_len)).unsqueeze(0)\nmask[0]\n```", "```py\ntensor([[1., 0., 0., 0., 0.],\n        [1., 1., 0., 0., 0.],\n        [1., 1., 1., 0., 0.],\n        [1., 1., 1., 1., 0.],\n        [1., 1., 1., 1., 1.]])\n```", "```py\nscores.masked_fill(mask == 0, -float(\"inf\"))\n```", "```py\ntensor([[[26.8082,    -inf,    -inf,    -inf,    -inf],\n         [-0.6981, 26.9043,    -inf,    -inf,    -inf],\n         [-2.3190,  1.2928, 27.8710,    -inf,    -inf],\n         [-0.5897,  0.3497, -0.3807, 27.5488,    -inf],\n         [ 0.5275,  2.0493, -0.4869,  1.6100, 29.0893]]],\n       grad_fn=<MaskedFillBackward0>)\n```", "```py\ndef scaled_dot_product_attention(query, key, value, mask=None):\n    dim_k = query.size(-1)\n    scores = torch.bmm(query, key.transpose(1, 2)) / sqrt(dim_k)\n    if mask is not None:\n        scores = scores.masked_fill(mask == 0, float(\"-inf\"))\n    weights = F.softmax(scores, dim=-1)\n    return weights.bmm(value)\n```"]