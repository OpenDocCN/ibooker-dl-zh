["```py\nmodel.add(ALayer)\nmodel.add(BLayer)\nmodel.add(CLayer)\n\n// Currently, model is [ALayer, BLayer, CLayer]\n```", "```py\n// The entire inner workings of the model\nmodel.add(\n  tf.layers.dense({\n    inputShape: 1, // one value 1D tensor\n    units: 1 // one neuron - output tensor\n  })\n);\n```", "```py\nmodel.compile({\n  optimizer: \"sgd\",\n  loss: \"meanSquaredError\"\n});\n```", "```py\n_________________________________________________________________\nLayer (type)                 Output shape              Param #\n=================================================================\ndense_Dense6 (Dense)         [null,1]                  2\n=================================================================\nTotal params: 2\nTrainable params: 2\nNon-trainable params: 0\n_________________________________________________________________\n```", "```py\n// Inputs constxs=tf.tensor([-1,0,1,2,3,4]);![1](assets/1.png)// Answers we want from inputs constys=tf.tensor([-4,-2,0,2,4,6]);// Create a model constmodel=tf.sequential();![2](assets/2.png)model.add(![3](assets/3.png)tf.layers.dense({inputShape: 1,units: 1}));model.compile({![4](assets/4.png)optimizer:\"sgd\",loss:\"meanSquaredError\"});// Print out the model structure model.summary();// Train model.fit(xs,ys,{epochs: 300}).then(history=>{![5](assets/5.png)constinputTensor=tf.tensor([10]);constanswer=model.predict(inputTensor);![6](assets/6.png)console.log(`10 results in ${Math.round(answer.dataSync())}`);// cleanup\ntf.dispose([xs,ys,model,answer,inputTensor]);![7](assets/7.png)});\n```", "```py\nconst jsxs = [];\nconst jsys = [];\n\nconst dataSize = 10;\nconst stepSize = 0.001;\nfor (let i = 0; i < dataSize; i = i + stepSize) {\n  jsxs.push(i);\n  jsys.push(i * i);\n}\n// Inputs\nconst xs = tf.tensor(jsxs);\n// Answers we want from inputs\nconst ys = tf.tensor(jsys);\n```", "```py\nmodel.add(tf.layers.dense({inputShape: 1,![1](assets/1.png)units: 20,![2](assets/2.png)activation:\"relu\"![3](assets/3.png)}));model.add(tf.layers.dense({units: 1![4](assets/4.png)}));\n```", "```py\n_________________________________________________________________\nLayer (type)                 Output shape              Param #\n=================================================================\ndense_Dense1 (Dense)         [null,20]                 40\n_________________________________________________________________\ndense_Dense2 (Dense)         [null,1]                  21\n=================================================================\nTotal params: 61\nTrainable params: 61\nNon-trainable params: 0\n_________________________________________________________________\n```", "```py\nconstprintCallback={![1](assets/1.png)onEpochEnd:(epoch,log)=>{![2](assets/2.png)console.log(epoch,log);![3](assets/3.png)}};\n```", "```py\nawait model.fit(xs, ys, {\n  epochs: 100,\n  callbacks: printCallback\n});\n```", "```py\nmodel.compile({\n  optimizer: \"adam\",\n  loss: \"meanSquaredError\"\n});\n```", "```py\nawaitmodel.fit(xs,ys,{epochs: 100,callbacks: printCallback,batchSize: 64![1](assets/1.png)});\n```", "```py\nmodel.add(\n  tf.layers.dense({\n    inputShape: 1,\n    units: 20,\n    activation: \"relu\"\n  })\n);\n\nmodel.add(\n  tf.layers.dense({\n    units: 20,\n    activation: \"relu\"\n  })\n);\n\nmodel.add(\n  tf.layers.dense({\n    units: 1\n  })\n);\n```", "```py\nconst jsxs = [];(((\"improving training\", \"adding more neurons and layers\")))\nconst jsys = [];\n\n// Create the dataset\nconst dataSize = 10;\nconst stepSize = 0.001;\nfor (let i = 0; i < dataSize; i = i + stepSize) {\n  jsxs.push(i);\n  jsys.push(i * i);\n}\n// Inputs\nconst xs = tf.tensor(jsxs);\n// Answers we want from inputs\nconst ys = tf.tensor(jsys);\n\n// Print the progress on each epoch\nconst printCallback = {\n  onEpochEnd: (epoch, log) => {\n    console.log(epoch, log);\n  }\n};\n\n// Create the model\nconst model = tf.sequential();\nmodel.add(\n  tf.layers.dense({\n    inputShape: 1,\n    units: 20,\n    activation: \"relu\"\n  })\n);\nmodel.add(\n  tf.layers.dense({\n    units: 20,\n    activation: \"relu\"\n  })\n);\nmodel.add(\n  tf.layers.dense({\n    units: 1\n  })\n);\n\n// Compile for training\nmodel.compile({\n  optimizer: \"adam\",\n  loss: \"meanSquaredError\"\n});\n\n// Train and print timing\nconsole.time(\"Training\");\nawait model.fit(xs, ys, {\n  epochs: 30,\n  callbacks: printCallback,\n  batchSize: 64\n});\nconsole.timeEnd(\"Training\");\n\n// evaluate the model\nconst next = tf.tensor([7]);\nconst answer = model.predict(next);\nanswer.print();\n\n// Cleanup!\nanswer.dispose();\nxs.dispose();\nys.dispose();\nmodel.dispose();\n```"]