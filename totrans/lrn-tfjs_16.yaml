- en: Appendix B. Chapter Challenge Answers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 章节挑战答案
- en: '[Chapter 2](ch02.html#the_chapter_2): Truck Alert!'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html#the_chapter_2)：卡车警报！'
- en: The MobileNet model can detect all kinds of different trucks. You could solve
    this problem by going through the list of identifiable trucks, or you can simply
    search for the word *truck* in the given list of class names. For simplicity,
    the provided answer did the latter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MobileNet模型可以检测各种不同类型的卡车。您可以通过查看可识别卡车的列表来解决这个问题，或者您可以简单地在给定的类名列表中搜索*truck*这个词。为简单起见，提供的答案选择了后者。
- en: 'The entire solution with HTML and JavaScript is here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 包含HTML和JavaScript的整个解决方案在这里：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_chapter_challenge_answers_CO1-1)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_chapter_challenge_answers_CO1-1)'
- en: Load the MobileNet model from a CDN.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从CDN加载MobileNet模型。
- en: '[![2](assets/2.png)](#co_chapter_challenge_answers_CO1-2)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_chapter_challenge_answers_CO1-2)'
- en: Access the image on the DOM via ID. The DOM has probably been loaded for a while
    now due to waiting for the model to load.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ID访问DOM上的图像。由于等待模型加载，DOM可能已经加载了一段时间。
- en: '[![3](assets/3.png)](#co_chapter_challenge_answers_CO1-3)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_chapter_challenge_answers_CO1-3)'
- en: Set `foundATruck` to true if the word *truck* was detected in any prediction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何预测中检测到*truck*这个词，将`foundATruck`设置为true。
- en: '[![4](assets/4.png)](#co_chapter_challenge_answers_CO1-4)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_chapter_challenge_answers_CO1-4)'
- en: The moment of truth! Alert only if `foundATruck` is true.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 真相时刻！只有在`foundATruck`为true时才会弹出警报。
- en: This Chapter Challenge answer with a truck image is available in the [GitHub](https://github.com/GantMan/learn-tfjs)
    source code for this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个带有卡车图像的章节挑战答案可以在本书的[GitHub](https://github.com/GantMan/learn-tfjs)源代码中找到。
- en: '[Chapter 3](ch03.html#the_chapter_3): What Makes You So Special?'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html#the_chapter_3)：你有什么特别之处？'
- en: 'This simple exercise is about finding the TensorFlow.js `tf.unique` method.
    Once you find this friendly method, it’s easy to build a solution, like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的练习是关于查找TensorFlow.js `tf.unique`方法。一旦找到这个友好的方法，就很容易构建一个解决方案，就像这样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Don’t forget to wrap this code in a `tf.tidy` for automatic tensor cleanup!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将此代码包装在`tf.tidy`中以进行自动张量清理！
- en: '[Chapter 4](ch04.html#the_chapter_4): Sorting Chaos'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html#the_chapter_4)：混乱排序'
- en: 'One elegant solution to sorting the generated randomness would be to use `topk`
    on a `randomUniform`-created tensor. Since a `randomUniform` creates values between
    `0` and `1` and `topk` sorts values along the final axis, you can complete this
    exercise with the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一种优雅的解决方案是对`randomUniform`创建的张量使用`topk`进行排序。由于`randomUniform`创建的值在`0`和`1`之间，并且`topk`沿着最后一个轴对值进行排序，您可以使用以下代码完成这个练习：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_chapter_challenge_answers_CO2-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_chapter_challenge_answers_CO2-1)'
- en: Create a 2D 400 x 400 tensor of random values between `0` and `1`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个2D的400 x 400张量，其中包含介于`0`和`1`之间的随机值。
- en: '[![2](assets/2.png)](#co_chapter_challenge_answers_CO2-2)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_chapter_challenge_answers_CO2-2)'
- en: Use `topk` to sort the last dimension (width), and return all 400 values.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`topk`对最后一个维度（宽度）进行排序，并返回所有400个值。
- en: '[![3](assets/3.png)](#co_chapter_challenge_answers_CO2-3)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_chapter_challenge_answers_CO2-3)'
- en: 'Optional: reshape the tensor to a 3D value.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可选：将张量重塑为3D值。
- en: 'The previous solution is quite verbose and could be condensed into a single
    line of code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的解决方案非常冗长，可以压缩为一行代码：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Chapter 5](ch05.html#the_chapter_5): Cute Faces'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html#the_chapter_5)：可爱的脸'
- en: Now that the first model has given the coordinates of the face, a tensor crop
    would supply just those pixels. This works almost exactly like `strokeRect`, because
    you supply a starting position and desired size. However, all of our previous
    measurements will not work for this crop, because they were calculated on a resized
    version of the image. You’ll need to do similar calculations on the original tensor
    data so you can extract the correct information.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，第一个模型已经给出了脸部的坐标，一个张量裁剪将提供这些像素。这几乎与`strokeRect`完全相同，因为您提供了一个起始位置和所需的大小。然而，我们之前的所有测量对于这个裁剪都不起作用，因为它们是在图像的调整版本上计算的。您需要在原始张量数据上进行类似的计算，以便提取正确的信息。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you don’t want to recalculate the positions, you could resize the tensor
    to match `petImage` width and height. This would allow you to reuse the same `startX`,
    `startY`, `width`, and `height` variables for your crop.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想重新计算位置，可以将张量调整大小以匹配`petImage`的宽度和高度。这将允许您重用相同的`startX`、`startY`、`width`和`height`变量进行裁剪。
- en: 'The follow code may reference some of the variables created in the original
    face localization code, most specifically `myTensor`, which was the original `fromPixels`
    tensor:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可能引用原始人脸定位代码中创建的一些变量，特别是原始的`fromPixels`张量`myTensor`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_chapter_challenge_answers_CO3-1)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_chapter_challenge_answers_CO3-1)'
- en: Note that the order for tensors is height and then width. They are formatted
    like a mathematical matrix rather than image-specific standards of width by height.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，张量的顺序是高度然后宽度。它们的格式类似于数学矩阵，而不是图像特定的宽度乘以高度的标准。
- en: '[![2](assets/2.png)](#co_chapter_challenge_answers_CO3-2)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_chapter_challenge_answers_CO3-2)'
- en: Subtracting ratios can leave floating-point values; you’ll need to round these
    to specific pixel indices. In this case, the answer is using `parseInt` to remove
    any decimals.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 减去比率可能会留下浮点值；您需要将这些值四舍五入到特定的像素索引。在这种情况下，答案是使用`parseInt`来去除任何小数。
- en: '[![3](assets/3.png)](#co_chapter_challenge_answers_CO3-3)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_chapter_challenge_answers_CO3-3)'
- en: Obviously, batching and then unbatching and then rebatching is inefficient.
    Whenever possible, you should leave all your operations batched until absolutely
    necessary.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，批处理，然后取消批处理，然后重新批处理是低效的。在可能的情况下，您应该将所有操作保持批处理，直到绝对必要。
- en: Now you’ve successfully prepared the dog’s face tensor for passing into the
    next model, which will do something like return a percentage likelihood that the
    dog is panting.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经成功地准备好将狗脸张量传递到下一个模型中，该模型将返回狗在喘气的可能性百分比。
- en: The resulting model output was never specified, but you can be assured that
    it will be either a two-value rank-one tensor, with index 0 meaning not panting
    and index 1 meaning panting, or a single-value rank-one tensor with a likelihood
    of panting from zero to one. Both of these are easy enough for you to handle!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果模型的输出从未指定，但您可以确保它将是一个两值的一维张量，索引0表示不 panting，索引1表示 panting，或者是一个一值的一维张量，表示从零到一的
    panting 可能性。这两种情况都很容易处理！
- en: '[Chapter 6](ch06.html#the_chapter_6): Top Detective'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html#the_chapter_6)：顶级侦探'
- en: The problem with using `topk` is that it works only on the final dimension of
    a particular tensor. So one way you can find a max value across two dimensions
    is to call `topk` twice. The second time you can limit the results to the top
    three.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`topk`的问题在于它仅在特定张量的最终维度上起作用。因此，您可以通过两次调用`topk`来找到两个维度上的最大值。第二次您可以将结果限制为前三名。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can then loop over the results and access the top values from the `topvals`
    variable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以循环遍历结果并从`topvals`变量中访问前几个值。
- en: '[Chapter 7](ch07.html#the_chapter_7): R.I.P. You will be MNIST'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html#the_chapter_7)：再见，MNIST'
- en: 'By using the wizard you can select all the desired settings; you should have
    created some interesting results. The results should be as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向导您可以选择所有所需的设置；您应该已经创建了一些有趣的结果。结果应该如下：
- en: 100 bin files were generated in a single grouping.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 100个二进制文件被生成在一个分组中。
- en: The final size was around 1.5 MB.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终大小约为1.5 MB。
- en: Since the size was 1.5 MB, this could have fit in a single 4 MB shard if the
    defaults were used.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于大小为1.5 MB，如果使用默认值，这可以适合单个4 MB分片。
- en: '[Chapter 8](ch08.html#the_chapter_8): The Model Architect'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html#the_chapter_8)：模型架构师'
- en: You’ve been tasked to create a Layers model that fits the specifications given.
    The model should have an input shape of five and an output shape of four with
    several layers between with specified activations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求创建一个符合给定规格的 Layers 模型。该模型的输入形状为五，输出形状为四，中间有几个具有指定激活函数的层。
- en: 'The code to build the model should look like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 构建模型的代码应该如下所示：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The number of trainable parameters is calculated as the number of lines into
    a layer + number of units in that layer. You can solve this with the calculation
    `layerUnits[i] * layerUnits[i - 1] + layerUnits[i]` for each layer. The output
    of `model.summary()` will verify your math. Compare your summary to [Example B-1](#challenge_summary).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可训练参数的数量计算为进入一个层的行数 + 该层中的单元数。您可以使用每个层的计算`layerUnits[i] * layerUnits[i - 1]
    + layerUnits[i]`来解决这个问题。`model.summary()`的输出将验证您的数学计算。将您的摘要与[示例 B-1](#challenge_summary)进行比较。
- en: Example B-1\. The model summary
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-1\. 模型摘要
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Chapter 9](ch09.html#the_chapter_9): Ship Happens'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html#the_chapter_9)：船出事了'
- en: Of course, there are plenty of ways to get this information. This is just one
    way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有很多获取这些信息的方法。这只是其中一种方式。
- en: To extract the honorific of each name, you could use `.apply` and split via
    spaces. This would get you most of your answers pretty quickly. However, some
    names have things like “von,” which would cause extra spaces and slightly ruin
    your code. To do this, a good trick is to use a regular expression. I used `/,\s(.*?)\./`,
    which looks for a comma followed by a space and then matches everything up to
    the first dot.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取每个名称的敬语，您可以使用`.apply`并通过空格分割。这将让您很快得到大部分答案。但是，一些名称中有“von”之类的内容，这会导致额外的空格并稍微破坏您的代码。为此，一个好的技巧是使用正则表达式。我使用了`/,\s(.*?)\./`，它查找逗号后跟一个空格，然后匹配直到第一个句点。
- en: You can apply this to create a new row, group by that row, and then table the
    survivors’ average using `.mean()`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以应用这个方法创建一个新行，按该行分组，然后使用`.mean()`对幸存者的平均值进行表格化。
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `mega_df['Name']` is replaced with something useful and then grouped for
    verification. This could then be easily encoded or binned/bucketized for your
    model.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`mega_df[''Name'']`被替换为有用的内容，然后进行分组以进行验证。然后可以轻松地对其进行编码或进行分箱处理以用于您的模型。'
- en: '[Figure B-1](#ship_happens) shows the results of the grouping code displayed
    in a Dnotebook.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 B-1](#ship_happens)显示了在 Dnotebook 中显示的分组代码的结果。'
- en: '![screenshot of Dnotebook solution](assets/ltjs_ab01.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Dnotebook解决方案的屏幕截图](assets/ltjs_ab01.png)'
- en: Figure B-1\. Honorifics and survival averages
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-1\. 敬语和生存平均值
- en: '[Chapter 10](ch10.html#the_chapter_10): Saving the Magic'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html#the_chapter_10)：保存魔法'
- en: To save the highest validation accuracy, rather than the last validation accuracy,
    you can add a conditional save to the epoch’s end callback. This can save you
    the headache of accidentally landing on an overfitting epoch.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存最高的验证准确性，而不是最后的验证准确性，您可以在时期结束回调中添加一个条件保存。这可以避免您意外地陷入过拟合时期的困扰。
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There is *also* the [`earlyStopping`](https://oreil.ly/BZw2o) prepackaged callback
    that monitors and protects against overfitting. Setting your callbacks to `callbacks:
    tf.callbacks.earlyStopping({monitor: ''val_acc''})` would stop training the moment
    that validation accuracy regresses.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '还有[`earlyStopping`](https://oreil.ly/BZw2o)预打包回调，用于监视和防止过拟合。将您的回调设置为`callbacks:
    tf.callbacks.earlyStopping({monitor: ''val_acc''})`将在验证准确性回退时停止训练。'
- en: '[Chapter 11](ch11.html#the_chapter_11): Warp-Speed Learning'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html#the_chapter_11)：光速学习'
- en: 'You now know plenty of ways to solve this problem, but we’ll go fast and simple.
    There are four steps to solving this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在知道很多解决这个问题的方法，但我们将采取快速简单的方式。解决这个问题有四个步骤：
- en: Load the new image data
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载新的图像数据
- en: Shave the base model into a feature model
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将基础模型削减为特征模型
- en: Create new layers that read features
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建读取特征的新层
- en: Train the new layers
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练新层
- en: 'Load the new image data:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 加载新的图像数据：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Shave the base model into a feature model:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将基础模型削减为特征模型：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create new layers that read features:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 创建读取特征的新层：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Train the new layers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 训练新层：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The result trains to excellent accuracy in 10 epochs, as shown in [Figure B-2](#trek_transfer_results).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结果在10个时期内训练到了很高的准确性，如[图 B-2](#trek_transfer_results)所示。
- en: '![Perfect validation accuracy in a few epochs](assets/ltjs_ab02.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![在几个时期内达到完美的验证准确性](assets/ltjs_ab02.png)'
- en: Figure B-2\. Trained from only 150 images
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-2\. 仅从 150 张图像训练
- en: The full answer of this challenge is available with [the associated source code
    for this chapter](https://oreil.ly/lKaUm) so you can view the code and even interact
    with the result.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战的完整答案可以在[本章的相关源代码](https://oreil.ly/lKaUm)中找到，这样你就可以查看代码，甚至与结果进行交互。
- en: '[Chapter 12](ch12.html#the_chapter_12): Easy as 01, 10, 11'
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第 12 章](ch12.html#the_chapter_12)：简单如 01, 10, 11'
- en: You can convert an image to grayscale easily. Once you’ve done that, you can
    use `tf.where` on an image to replace each pixel with a white or a black pixel.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像转换为灰度很容易。一旦你这样做了，你可以在图像上使用 `tf.where` 来用白色或黑色像素替换每个像素。
- en: 'The following code converts an image with an ID of `input` into a binarized
    image that is displayed in a canvas named `output` on the same page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将具有 `input` ID 的图像转换为一个二值化图像，该图像显示在同一页上名为 `output` 的画布上：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A fully functioning example of this Chapter Challenge answer is [available in
    the associated source code for this chapter](https://oreil.ly/gMVzA).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章挑战答案的完全运行示例可以在[本章的相关源代码](https://oreil.ly/gMVzA)中找到。
- en: There are more advanced and robust ways to binarize an image. Check into binarization
    algorithms if you’re looking to handle more images.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有更高级和更健壮的方法来对图像进行二值化。如果你想处理更多的图像，请查看二值化算法。
