["```py\n# Load checkpoint from SGD training\nIN_DIM, FEATURE_DIM, OUT_DIM = 784, 256, 10\nmodel = Net(IN_DIM, FEATURE_DIM, OUT_DIM)\n\nmodel.load_state_dict(torch.load('mnist.pt'))\n\n```", "```py\nimport copy\n\n# Access parameters with state_dict\nopt_state_dict = copy.deepcopy(model.state_dict())\n\nfor param_tensor in opt_state_dict:\n\u00a0\u00a0\u00a0\u00a0print(param_tensor, \"\\t\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opt_state_dict[param_tensor].size())\n\n# outputs:\n# classifier.1.weight\u00a0\u00a0\u00a0torch.Size([256, 784])\n# classifier.1.bias\u00a0\u00a0\u00a0\u00a0\u00a0torch.Size([256])\n# classifier.3.weight\u00a0\u00a0\u00a0torch.Size([256, 256])\n# classifier.3.bias\u00a0\u00a0\u00a0\u00a0\u00a0torch.Size([256])\n# classifier.5.weight\u00a0\u00a0\u00a0torch.Size([10, 256])\n# classifier.5.bias\u00a0\u00a0\u00a0\u00a0\u00a0torch.Size([10])\n\n```", "```py\n# Create randomly initialized network\nmodel_rand = Net(IN_DIM, FEATURE_DIM, OUT_DIM)\nrand_state_dict = copy.deepcopy(model_rand.state_dict())\n\n```", "```py\n# Create a new state_dict for interpolated parameters\ntest_model = Net(IN_DIM, FEATURE_DIM, OUT_DIM)\ntest_state_dict = copy.deepcopy(test_model.state_dict())\n\nalpha = 0.2\nbeta = 1.0 - alpha\nfor p in opt_state_dict:\n\u00a0\u00a0\u00a0\u00a0test_state_dict[p] = (opt_state_dict[p] * beta +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rand_state_dict[p] * alpha)\n\n```", "```py\ndef inference(testloader, model, loss_fn):\n\u00a0\u00a0running_loss = 0.0\n\u00a0\u00a0with torch.no_grad():\n\u00a0\u00a0\u00a0\u00a0for inputs, labels in testloader:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputs = model(inputs)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss = loss_fn(outputs, labels)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0running_loss += loss\n\u00a0\u00a0running_loss /= len(testloader)\n\u00a0\u00a0return running_loss\n\n```", "```py\nresults = []\nfor alpha in torch.arange(-2, 2, 0.05):\n\u00a0\u00a0beta = 1.0 - alpha\n\n\u00a0\u00a0# Compute interpolated parameters\n\u00a0\u00a0for p in opt_state_dict:\n\u00a0\u00a0\u00a0\u00a0test_state_dict[p] = (opt_state_dict[p] * beta +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rand_state_dict[p] * alpha)\n\n\u00a0\u00a0# Load interpolated parameters into test model\n\u00a0\u00a0model.load_state_dict(test_state_dict)\n\n\u00a0\u00a0# Compute loss given interpolated parameters\n\u00a0\u00a0loss = inference(trainloader, model, loss_fn)\n\u00a0\u00a0results.append(loss.item())\n\n```", "```py\nrand_walk = [torch.randint(-10, 10, (1,1)) for x in range(100)]\n\n```", "```py\nmomentum = 0.1\nmomentum_rand_walk = \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[torch.randint(-10, 10, (1,1)) for x in range(100)]\n\nfor i in range(1, len(rand_walk) - 1):\n\u00a0\u00a0prev = momentum_rand_walk[i-1]\n\u00a0\u00a0rand_choice = torch.randint(-10, 10, (1,1)).item()\n\u00a0\u00a0new_step = momentum * prev + (1 - momentum) * rand_choice\n\u00a0\u00a0momentum_rand_walk[i] = new_step\n\n```", "```py\noptimizer = optim.SGD(model.parameters(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lr = 0.01,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0momentum = 0.9)\noptimizer.step()\n\n```", "```py\noptimizer = optim.SGD(model.parameters(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lr = 0.01,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0momentum = 0.9,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nesterov = True)\n\n```", "```py\noptimizer = optim.Adagrad(model.parameters(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lr = 0.01,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0weight_decay = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initial_accumulator_value = 0)\n\n```", "```py\noptimizer = optim.RMSprop(model.parameters(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lr = 0.01,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0alpha = 0.99,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eps = 1e-8,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0weight_decay = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0momentum = 0)\n\n```", "```py\noptimizer = optim.Adam(model.parameters(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lr = 0.001,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0betas = (0.9, 0.999),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0eps = 1e-08,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0weight_decay = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0amsgrad = False)\n\n```"]